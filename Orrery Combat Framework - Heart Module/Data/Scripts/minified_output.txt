using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Network;using Heart_Module.Data.Scripts.HeartModule.Utility;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule{internal class HeartData{public static HeartData I;public const ushort HeartNetworkId=(ushort)(65198749845%ushort.MaxValue);public bool IsLoaded=false;public bool IsSuspended=false;public bool IsPaused=false;public HeartNetwork Net=new HeartNetwork();public HeartLog Log=new HeartLog();public int SyncRange=MyAPIGateway.Session.SessionSettings.SyncDistance;public int SyncRangeSq=MyAPIGateway.Session.SessionSettings.SyncDistance*MyAPIGateway.Session.SessionSettings.SyncDistance;public Random Random=new Random();public ulong SteamId=0;public List<IMyPlayer>Players=new List<IMyPlayer>();public bool DegradedMode=false;public Action<IMyCubeGrid>OnGridAdd=(a)=>{};public Action<IMyCubeGrid>OnGridRemove=(a)=>{};public GuiBlockCategoryHelper OrreryBlockCategory=new GuiBlockCategoryHelper("[Orrery Combat Framework]","OrreryBlockCategory");}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions;using Heart_Module.Data.Scripts.HeartModule.Definitions.ApiHandler;using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons;using RichHudFramework.Client;using Sandbox.ModAPI;using System;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.ModAPI;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Hiding;namespace Heart_Module.Data.Scripts.HeartModule{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation,priority:int.MaxValue)]internal class HeartLoad:MySessionComponentBase{private static HeartLoad I;CriticalHandle handle;ApiSender apiSender;DefinitionReciever definitionReciever;CommandHandler commands;int remainingDegradedModeTicks=30;public override void LoadData(){I=this;HeartData.I=new HeartData();HeartLog.Log($"Start loading core...");handle=new CriticalHandle();handle.LoadData();try{HeartData.I.Net.LoadData();if(!MyAPIGateway.Utilities.IsDedicated){RichHudClient.Init("HeartModule",()=>{},()=>{});HeartLog.Log($"Loaded RichHudClient");}else HeartLog.Log($"Skipped loading RichHudClient");WeaponDefinitionManager.I=new WeaponDefinitionManager();ProjectileDefinitionManager.I=new ProjectileDefinitionManager();HeartLog.Log($"Initialized DefinitionManagers");definitionReciever=new DefinitionReciever();definitionReciever.LoadData();apiSender=new ApiSender();apiSender.LoadData();commands=new CommandHandler();commands.Init();HeartData.I.IsSuspended=false;HeartLog.Log($"Finished loading core.");}catch(Exception ex){CriticalHandle.ThrowCriticalException(ex,typeof(HeartLoad));}}public override void UpdateAfterSimulation(){handle.Update();byte[]a=BitConverter.GetBytes(1.2f);try{if(HeartData.I.IsSuspended)return;HeartData.I.IsPaused=false;if(!HeartData.I.IsLoaded){MyAPIGateway.Entities.OnEntityAdd+=OnEntityAdd;MyAPIGateway.Entities.OnEntityRemove+=OnEntityRemove;MyAPIGateway.Entities.GetEntities(null,ent=>{OnEntityAdd(ent);return false;});HeartData.I.IsLoaded=true;HideSorterControls.DoOnce();SorterWeaponTerminalControls.DoOnce(ModContext);}if(!MyAPIGateway.Utilities.IsDedicated&&HeartData.I.SteamId==0)HeartData.I.SteamId=MyAPIGateway.Session?.Player?.SteamUserId??0;HeartData.I.Net.Update();if(MyAPIGateway.Session.IsServer){HeartData.I.Players.Clear();MyAPIGateway.Multiplayer.Players.GetPlayers(HeartData.I.Players);}if(MyAPIGateway.Physics.SimulationRatio<0.7&&!HeartData.I.IsPaused){if(!HeartData.I.DegradedMode){if(remainingDegradedModeTicks>=60){HeartData.I.DegradedMode=true;if(MyAPIGateway.Session.IsServer)MyAPIGateway.Utilities.SendMessage("[OCF] Entering degraded mode!");MyAPIGateway.Utilities.ShowMessage("[OCF]","Entering client degraded mode!");remainingDegradedModeTicks=600;}else remainingDegradedModeTicks++;}}else if(MyAPIGateway.Physics.SimulationRatio>0.87){if(remainingDegradedModeTicks<=0&&HeartData.I.DegradedMode){HeartData.I.DegradedMode=false;if(MyAPIGateway.Session.IsServer)MyAPIGateway.Utilities.SendMessage("[OCF] Exiting degraded mode.");MyAPIGateway.Utilities.ShowMessage("[OCF]","Exiting client degraded mode.");remainingDegradedModeTicks=0;}else if(remainingDegradedModeTicks>0)remainingDegradedModeTicks--;}}catch(Exception ex){SoftHandle.RaiseException(ex);}}public override void UpdatingStopped(){HeartData.I.IsPaused=true;}protected override void UnloadData(){commands.Close();handle.UnloadData();HeartData.I.Net.UnloadData();HeartLog.Log($"Unloaded HeartNetwork");MyAPIGateway.Entities.OnEntityAdd-=OnEntityAdd;MyAPIGateway.Entities.OnEntityRemove-=OnEntityRemove;definitionReciever.UnloadData();WeaponDefinitionManager.I=null;ProjectileDefinitionManager.I=null;HeartLog.Log($"Closed DefinitionManagers");apiSender.UnloadData();HeartLog.Log($"Closing core, log finishes here.");HeartData.I.Log.Close();HeartData.I=null;I=null;}private void OnEntityAdd(IMyEntity entity){if(entity is IMyCubeGrid)HeartData.I?.OnGridAdd?.Invoke(entity as IMyCubeGrid);}private void OnEntityRemove(IMyEntity entity){if(entity is IMyCubeGrid)HeartData.I?.OnGridRemove?.Invoke(entity as IMyCubeGrid);}public static void ResetDefinitions(){WeaponDefinitionManager.ClearDefinitions();ProjectileDefinitionManager.ClearDefinitions();I.definitionReciever.UnloadData();I.definitionReciever.LoadData();}}}﻿using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game;using VRage.Game.Entity;using VRage.Game.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule{public class HeartUtils{public static MyRelationsBetweenPlayers GetRelationsBetweenPlayers(long playerIdentity1,long playeIdentity2){if(playerIdentity1==playeIdentity2)return MyRelationsBetweenPlayers.Self;var faction1=MyAPIGateway.Session.Factions.TryGetPlayerFaction(playerIdentity1);var faction2=MyAPIGateway.Session.Factions.TryGetPlayerFaction(playeIdentity2);if(faction1==null||faction2==null)return MyRelationsBetweenPlayers.Enemies;if(faction1==faction2)return MyRelationsBetweenPlayers.Allies;if(MyAPIGateway.Session.Factions.GetRelationBetweenFactions(faction1.FactionId,faction2.FactionId)==MyRelationsBetweenFactions.Neutral)return MyRelationsBetweenPlayers.Neutral;return MyRelationsBetweenPlayers.Enemies;}public static IMyIdentity GetGridOwner(IMyCubeGrid grid){if(grid==null)return null;List<long>owners=grid.BigOwners;if(owners.Count==0)return null;IMyIdentity targetOwner=null;MyAPIGateway.Players.GetAllIdentites(null,(ident)=>{if(ident.IdentityId==owners[0])targetOwner=ident;return false;});return targetOwner;}public static IMyPlayer GetPlayerFromSteamId(ulong id){if(HeartData.I?.Players==null)return null;foreach(var player in HeartData.I.Players)if(player.SteamUserId==id)return player;return null;}public static MyRelationsBetweenPlayerAndBlock MapPlayerRelationsToBlock(MyRelationsBetweenPlayers relations){switch(relations){case MyRelationsBetweenPlayers.Self:return MyRelationsBetweenPlayerAndBlock.Owner;case MyRelationsBetweenPlayers.Neutral:return MyRelationsBetweenPlayerAndBlock.Neutral;case MyRelationsBetweenPlayers.Allies:return MyRelationsBetweenPlayerAndBlock.Friends;case MyRelationsBetweenPlayers.Enemies:return MyRelationsBetweenPlayerAndBlock.Enemies;}return MyRelationsBetweenPlayerAndBlock.NoOwnership;}public static MyRelationsBetweenPlayerAndBlock GetRelationsBetweeenGrids(IMyCubeGrid ownGrid,IMyCubeGrid targetGrid){if(targetGrid==null||ownGrid==null)return MyRelationsBetweenPlayerAndBlock.NoOwnership;if(targetGrid.BigOwners.Count==0||ownGrid.BigOwners.Count==0)return MyRelationsBetweenPlayerAndBlock.NoOwnership;long targetOwner=targetGrid.BigOwners[0];long owner=ownGrid.BigOwners[0];return MapPlayerRelationsToBlock(GetRelationsBetweenPlayers(owner,targetOwner));}public static MyRelationsBetweenPlayerAndBlock GetRelationsBetweenGridAndPlayer(IMyCubeGrid ownGrid,long?targetIdentity){if(targetIdentity==null)return MyRelationsBetweenPlayerAndBlock.Enemies;if(ownGrid==null||ownGrid.BigOwners.Count==0)return MyRelationsBetweenPlayerAndBlock.NoOwnership;long owner=ownGrid.BigOwners[0];return MapPlayerRelationsToBlock(GetRelationsBetweenPlayers(owner,targetIdentity.Value));}public static double Clamp(double value,double min,double max){if(value<min)return min;if(value>max)return max;return value;}public static double ClampAbs(double value,double absMax)=>Clamp(value,-absMax,absMax);public static double MinAbs(double value1,double value2){if(Math.Abs(value1)<Math.Abs(value2))return value1;return value2;}public static double MaxAbs(double value1,double value2){if(Math.Abs(value1)>Math.Abs(value2))return value1;return value2;}public static double LimitRotationSpeed(double currentAngle,double targetAngle,double maxRotationSpeed){var diff=NormalizeAngle(targetAngle-currentAngle);if(diff<-maxRotationSpeed)return currentAngle-maxRotationSpeed;if(diff>maxRotationSpeed)return currentAngle+maxRotationSpeed;return targetAngle;}public static double NormalizeAngle(double angleRads,double limit=Math.PI){if(angleRads>limit)return(angleRads%limit)-limit;if(angleRads<-limit)return(angleRads%limit)+limit;return angleRads;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.Common.ObjectBuilders;using Sandbox.ModAPI;using VRage.Game.Components;using VRage.Game.Entity;using VRage.Game.ModAPI;using VRage.ModAPI;using VRage.ObjectBuilders;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule{[MyEntityComponentDescriptor(typeof(MyObjectBuilder_ConveyorSorter),false,"BarrelBlock")]public class TestBarrel:MyGameLogicComponent{IMyCubeBlock block;SubpartManager SubpartManager=new SubpartManager();SorterTurretLogic turret=null;double offset=0;public override void Init(MyObjectBuilder_EntityBase objectBuilder){base.Init(objectBuilder);block=(IMyCubeBlock)Entity;NeedsUpdate|=MyEntityUpdateEnum.BEFORE_NEXT_FRAME;}public override void UpdateOnceBeforeFrame(){base.UpdateOnceBeforeFrame();if(block?.CubeGrid?.Physics==null)return;NeedsUpdate|=MyEntityUpdateEnum.EACH_FRAME;}public override void UpdateAfterSimulation(){if(!HeartData.I.IsLoaded)return;if(turret?.SorterWep==null||turret.SorterWep.MarkedForClose||turret.SorterWep.CubeGrid!=block.CubeGrid){TryGetNewTurret();return;}MyEntitySubpart subpart=SubpartManager.GetSubpart(Entity,"barrel");MatrixD muzzleMatrix=turret.MuzzleMatrix;muzzleMatrix.Translation=turret.SorterWep.GetPosition()+turret.MuzzleMatrix.Forward*offset;MatrixD parentMatrix=subpart.Parent.PositionComp.WorldMatrixRef;Matrix m=muzzleMatrix*MatrixD.Invert(parentMatrix);subpart.PositionComp.SetLocalMatrix(ref m);}private void TryGetNewTurret(){SubpartManager.GetSubpart(Entity,"barrel").PositionComp.SetLocalMatrix(ref Matrix.Identity);if(WeaponManager.I.GridWeapons[block.CubeGrid].Count==0)return;foreach(var wep in WeaponManager.I.GridWeapons[block.CubeGrid]){if(wep is SorterTurretLogic){turret=(SorterTurretLogic)wep;offset=((Vector3D)(block.Position-wep.SorterWep.Position)).Max()*2.5f;MyAPIGateway.Utilities.ShowNotification(offset.ToString());break;}}}}}﻿using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Linq;using VRage;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.Utils;using VRageMath;using static VRageRender.MyBillboard;namespace Heart_Module.Data.Scripts.HeartModule.Debug{[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate)]public class DebugDraw:MySessionComponentBase{private static DebugDraw Instance;protected static readonly MyStringId MaterialDot=MyStringId.GetOrCompute("WhiteDot");protected static readonly MyStringId MaterialSquare=MyStringId.GetOrCompute("Square");private Dictionary<Vector3D,MyTuple<long,Color>>QueuedPoints=new Dictionary<Vector3D,MyTuple<long,Color>>();private Dictionary<Vector3I,MyTuple<long,Color,IMyCubeGrid>>QueuedGridPoints=new Dictionary<Vector3I,MyTuple<long,Color,IMyCubeGrid>>();private Dictionary<MyTuple<Vector3D,Vector3D>,MyTuple<long,Color>>QueuedLinePoints=new Dictionary<MyTuple<Vector3D,Vector3D>,MyTuple<long,Color>>();public override void LoadData(){if(!MyAPIGateway.Utilities.IsDedicated)Instance=this;}protected override void UnloadData(){Instance=null;}public static void AddPoint(Vector3D globalPos,Color color,float duration){if(Instance==null)return;if(Instance.QueuedPoints.ContainsKey(globalPos))Instance.QueuedPoints[globalPos]=new MyTuple<long,Color>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color);else Instance.QueuedPoints.Add(globalPos,new MyTuple<long,Color>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color));}public static void AddGPS(string name,Vector3D position,float duration){IMyGps gps=MyAPIGateway.Session.GPS.Create(name,string.Empty,position,showOnHud:true,temporary:true);gps.DiscardAt=MyAPIGateway.Session.ElapsedPlayTime.Add(new TimeSpan((long)(duration*TimeSpan.TicksPerSecond)));MyAPIGateway.Session.GPS.AddLocalGps(gps);}public static void AddGridGPS(string name,Vector3I gridPosition,IMyCubeGrid grid,float duration){AddGPS(name,GridToGlobal(gridPosition,grid),duration);}public static void AddGridPoint(Vector3I blockPos,IMyCubeGrid grid,Color color,float duration){if(Instance==null)return;if(Instance.QueuedGridPoints.ContainsKey(blockPos))Instance.QueuedGridPoints[blockPos]=new MyTuple<long,Color,IMyCubeGrid>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color,grid);else Instance.QueuedGridPoints.Add(blockPos,new MyTuple<long,Color,IMyCubeGrid>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color,grid));}public static void AddLine(Vector3D origin,Vector3D destination,Color color,float duration){if(Instance==null)return;MyTuple<Vector3D,Vector3D>key=new MyTuple<Vector3D,Vector3D>(origin,destination);if(Instance.QueuedLinePoints.ContainsKey(key))Instance.QueuedLinePoints[key]=new MyTuple<long,Color>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color);else Instance.QueuedLinePoints.Add(key,new MyTuple<long,Color>(DateTime.UtcNow.Ticks+(long)(duration*TimeSpan.TicksPerSecond),color));}public override void Draw(){foreach(var key in QueuedPoints.Keys.ToList()){DrawPoint0(key,QueuedPoints[key].Item2);if(DateTime.UtcNow.Ticks>QueuedPoints[key].Item1)QueuedPoints.Remove(key);}foreach(var key in QueuedGridPoints.Keys.ToList()){DrawGridPoint0(key,QueuedGridPoints[key].Item3,QueuedGridPoints[key].Item2);if(DateTime.UtcNow.Ticks>QueuedGridPoints[key].Item1)QueuedGridPoints.Remove(key);}foreach(var key in QueuedLinePoints.Keys.ToList()){DrawLine0(key.Item1,key.Item2,QueuedLinePoints[key].Item2);if(DateTime.UtcNow.Ticks>QueuedLinePoints[key].Item1)QueuedLinePoints.Remove(key);}}private void DrawPoint0(Vector3D globalPos,Color color){float depthScale=ToAlwaysOnTop(ref globalPos);MyTransparentGeometry.AddPointBillboard(MaterialDot,color*OnTopColorMul,globalPos,0.5f*depthScale,0,blendType:BlendTypeEnum.PostPP);}private void DrawGridPoint0(Vector3I blockPos,IMyCubeGrid grid,Color color){DrawPoint0(GridToGlobal(blockPos,grid),color);}private void DrawLine0(Vector3D origin,Vector3D destination,Color color){float length=(float)(destination-origin).Length();Vector3D direction=(destination-origin)/length;MyTransparentGeometry.AddLineBillboard(MaterialSquare,color,origin,direction,length,0.5f,blendType:BlendTypeEnum.PostPP);float depthScale=ToAlwaysOnTop(ref origin);direction*=depthScale;MyTransparentGeometry.AddLineBillboard(MaterialSquare,color*OnTopColorMul,origin,direction,length,0.5f*depthScale,blendType:BlendTypeEnum.PostPP);}public static Vector3D GridToGlobal(Vector3I position,IMyCubeGrid grid){return Vector3D.Rotate((Vector3D)position*2.5f,grid.WorldMatrix)+grid.GetPosition();}protected const float OnTopColorMul=0.5f;const float DepthRatioF=0.01f;protected static float ToAlwaysOnTop(ref Vector3D position){MatrixD camMatrix=MyAPIGateway.Session.Camera.WorldMatrix;position=camMatrix.Translation+(position-camMatrix.Translation)*DepthRatioF;return DepthRatioF;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.ModAPI;using System;namespace Heart_Module.Data.Scripts.HeartModule.Definitions{public class DefinitionReciever{const int DefinitionMessageId=8643;public void LoadData(){MyAPIGateway.Utilities.RegisterMessageHandler(DefinitionMessageId,RecieveDefinitions);MyAPIGateway.Utilities.SendModMessage(DefinitionMessageId,true);}private void RecieveDefinitions(object o){if(!(o is byte[]))return;byte[]message=o as byte[];if(message==null)return;try{DefinitionContainer definitionContainer=MyAPIGateway.Utilities.SerializeFromBinary<DefinitionContainer>(message);if(definitionContainer==null)return;if(definitionContainer.WeaponDefs==null||definitionContainer.AmmoDefs==null){SoftHandle.RaiseException($"Error in recieved definition! WeaponDefsIsNull: {definitionContainer.WeaponDefs==null} AmmoDefsIsNull: {definitionContainer.AmmoDefs==null}",callingType:typeof(DefinitionReciever));return;}foreach(var wepDef in definitionContainer.WeaponDefs)WeaponDefinitionManager.RegisterDefinition(wepDef);foreach(var projDef in definitionContainer.AmmoDefs)ProjectileDefinitionManager.RegisterDefinition(projDef);MyAPIGateway.Utilities.ShowMessage("[OCF]",$"Loaded {definitionContainer.WeaponDefs.Length+definitionContainer.AmmoDefs.Length} definitions.");}catch(Exception e){SoftHandle.RaiseException(e,typeof(DefinitionReciever));}}public void UnloadData(){MyAPIGateway.Utilities.UnregisterMessageHandler(DefinitionMessageId,RecieveDefinitions);}}}﻿using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Network;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using ProtoBuf;using Sandbox.ModAPI;using System.ComponentModel;namespace Heart_Module.Data.Scripts.HeartModule.Definitions{[ProtoContract]public class n_ProjectileDefinitionIdSync:PacketBase{[ProtoMember(21)]public int Id{get;set;}[ProtoMember(22)]public string Name{get;set;}[ProtoMember(23),DefaultValue(null)]public byte[]Serialized=null;public n_ProjectileDefinitionIdSync(){}public n_ProjectileDefinitionIdSync(int id,string name,byte[]serialized=null){Id=id;Name=name;Serialized=serialized;}public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer)return;HeartLog.Log("Syncing projectile definition "+Name+" to "+Id);if(Serialized!=null)ProjectileDefinitionManager.RegisterDefinition(MyAPIGateway.Utilities.SerializeFromBinary<ProjectileDefinitionBase>(Serialized));}}}﻿using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Sandbox.ModAPI;using System;using System.Collections.Generic;namespace Heart_Module.Data.Scripts.HeartModule.Definitions.ApiHandler{internal class ApiSender{const long HeartApiChannel=8644;Dictionary<string,Delegate>methods=new HeartApiMethods().ModApiMethods;public void LoadData(){MyAPIGateway.Utilities.SendModMessage(HeartApiChannel,methods);MyAPIGateway.Utilities.RegisterMessageHandler(HeartApiChannel,RecieveApiMethods);HeartLog.Log("Orrery Combat Framework: HeartAPISender ready.");}public void UnloadData(){MyAPIGateway.Utilities.UnregisterMessageHandler(HeartApiChannel,RecieveApiMethods);}public void RecieveApiMethods(object data){if(data==null)return;if(data is bool&&(bool)data){MyAPIGateway.Utilities.SendModMessage(HeartApiChannel,methods);HeartLog.Log("Orrery Combat Framework: HeartAPISender send methods.");}}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game.Entity;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Definitions.ApiHandler{internal class HeartApiMethods{internal readonly Dictionary<string,Delegate>ModApiMethods;internal HeartApiMethods(){ModApiMethods=new Dictionary<string,Delegate>(){["AddOnProjectileSpawn"]=new Action<string,Action<uint,MyEntity>>(AddOnSpawn),["AddOnProjectileImpact"]=new Action<string,Action<uint,Vector3D,Vector3D,MyEntity>>(AddOnImpact),["AddOnEndOfLife"]=new Action<string,Action<uint>>(AddOnEndOfLife),["GetProjectileDefinitionId"]=new Func<string,int>(GetProjectileDefinitionId),["GetProjectileDefinition"]=new Func<int,byte[]>(GetProjectileDefinition),["RegisterProjectileDefinition"]=new Func<byte[],int>(RegisterProjectileDefinition),["UpdateProjectileDefinition"]=new Func<int,byte[],bool>(UpdateProjectileDefinition),["RemoveProjectileDefinition"]=new Action<int>(ProjectileDefinitionManager.RemoveDefinition),["SpawnProjectile"]=new Func<int,Vector3D,Vector3D,long,Vector3D,uint>(SpawnProjectile),["GetProjectileInfo"]=new Func<uint,int,byte[]>(GetProjectileInfo),["BlockHasWeapon"]=new Func<MyEntity,bool>(HasWeapon),["SubtypeHasDefinition"]=new Func<string,bool>(SubtypeHasDefinition),["GetWeaponDefinitions"]=new Func<string[]>(GetWeaponDefinitions),["GetWeaponDefinition"]=new Func<string,byte[]>(GetWeaponDefinition),["RegisterWeaponDefinition"]=new Func<byte[],bool>(RegisterWeaponDefinition),["UpdateWeaponDefinition"]=new Func<byte[],bool>(UpdateWeaponDefinition),["RemoveWeaponDefinition"]=new Action<string>(WeaponDefinitionManager.RemoveDefinition),["LogWriteLine"]=new Action<string>(HeartLog.Log),["GetNetworkLoad"]=new Func<int>(GetNetworkLoad),["AddChatCommand"]=new Action<string,string,Action<string[]>,string>(CommandHandler.AddCommand),};}public void AddOnSpawn(string definitionName,Action<uint,MyEntity>onSpawn){if(onSpawn==null)return;try{ProjectileDefinitionManager.GetDefinition(definitionName).LiveMethods.OnSpawn+=onSpawn;}catch(Exception ex){SoftHandle.RaiseException("Failed to call AddOnSpawn to projectile definition "+definitionName,ex,typeof(HeartApiMethods));}}public void AddOnImpact(string definitionName,Action<uint,Vector3D,Vector3D,MyEntity>onImpact){if(onImpact==null)return;try{ProjectileDefinitionManager.GetDefinition(definitionName).LiveMethods.OnImpact+=onImpact;}catch(Exception ex){SoftHandle.RaiseException("Failed to call AddOnImpact to projectile definition "+definitionName,ex,typeof(HeartApiMethods));}}public void AddOnEndOfLife(string definitionName,Action<uint>onEol){if(onEol==null)return;try{ProjectileDefinitionManager.GetDefinition(definitionName).LiveMethods.OnEndOfLife+=onEol;}catch(Exception ex){SoftHandle.RaiseException("Failed to call AddOnEndOfLife to projectile definition "+definitionName,ex,typeof(HeartApiMethods));}}public int GetProjectileDefinitionId(string definitionName){return ProjectileDefinitionManager.GetId(definitionName);}public byte[]GetProjectileDefinition(int definitionId){var def=ProjectileDefinitionManager.GetSerializedDefinition(definitionId);if(def==null)return null;return def;}public int RegisterProjectileDefinition(byte[]serialized){if(serialized==null)return-1;return ProjectileDefinitionManager.RegisterModApiDefinition(serialized);}public bool UpdateProjectileDefinition(int definitionId,byte[]serialized){if(serialized==null)return false;return ProjectileDefinitionManager.ReplaceDefinition(definitionId,serialized,true);}public uint SpawnProjectile(int definitionId,Vector3D position,Vector3D direction,long firerId,Vector3D initialVelocity){return ProjectileManager.I.AddProjectile(definitionId,position,direction,firerId,initialVelocity).Id;}public byte[]GetProjectileInfo(uint projectileId,int detailLevel){n_SerializableProjectile info=ProjectileManager.I.GetProjectile(projectileId)?.AsSerializable(detailLevel);if(info==null)return null;return MyAPIGateway.Utilities.SerializeToBinary(info);}public bool HasWeapon(MyEntity block){return block is IMyConveyorSorter&&((IMyConveyorSorter)block).GameLogic is SorterWeaponLogic;}public bool SubtypeHasDefinition(string subtype){return WeaponDefinitionManager.HasDefinition(subtype);}public string[]GetWeaponDefinitions()=>WeaponDefinitionManager.GetAllDefinitions();public byte[]GetWeaponDefinition(string subtype){if(WeaponDefinitionManager.HasDefinition(subtype))return WeaponDefinitionManager.GetSerializedDefinition(subtype);return null;}public bool RegisterWeaponDefinition(byte[]definition){if(definition==null||definition.Length==0)return false;return WeaponDefinitionManager.RegisterModApiDefinition(definition);}public bool UpdateWeaponDefinition(byte[]definition){if(definition==null||definition.Length==0)return false;return WeaponDefinitionManager.UpdateDefinition(definition);}public int GetNetworkLoad()=>HeartData.I.Net.TotalNetworkLoad;}}﻿using ProtoBuf;namespace Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses{[ProtoContract]internal class DefinitionContainer{[ProtoMember(1)]public byte[][]WeaponDefs{get;set;}[ProtoMember(2)]public byte[][]AmmoDefs{get;set;}}}﻿namespace Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses{public enum IFF_Enum{None=0,TargetSelf=1,TargetEnemies=2,TargetFriendlies=4,TargetNeutrals=8,TargetUnique=16,}public enum TargetType_Enum{None=0,TargetGrids=1,TargetProjectiles=2,TargetCharacters=4,TargetUnique=8,}}﻿using Sandbox.Game;using Sandbox.ModAPI;using System;using VRage.Utils;namespace Heart_Module.Data.Scripts.HeartModule.ExceptionHandler{public class CriticalHandle{const int WarnTimeSeconds=20;private static CriticalHandle I;private long CriticalCloseTime=-1;private Exception Exception;public void LoadData(){I=this;}public void Update(){if(CriticalCloseTime==-1)return;double secondsRemaining=Math.Round((CriticalCloseTime-DateTime.UtcNow.Ticks)/(double)TimeSpan.TicksPerSecond,1);if(secondsRemaining<=0){CriticalCloseTime=-1;if(!MyAPIGateway.Utilities.IsDedicated)MyVisualScriptLogicProvider.SessionClose(1000,false,true);else{MyAPIGateway.Session.Unload();MyAPIGateway.Session.UnloadDataComponents();}}if(!MyAPIGateway.Utilities.IsDedicated)MyAPIGateway.Utilities.ShowNotification($"HeartMod CRITICAL ERROR - Shutting down in {secondsRemaining}s",1000/60);}public void UnloadData(){I=null;}public static void ThrowCriticalException(Exception ex,Type callingType,ulong callerId=ulong.MaxValue){I?.m_ThrowCriticalException(ex,callingType,callerId);}public static void ThrowCriticalException(n_SerializableError ex,Type callingType,ulong callerId=ulong.MaxValue){I?.m_ThrowCriticalException(ex,callingType,callerId);}private void m_ThrowCriticalException(Exception ex,Type callingType,ulong callerId=ulong.MaxValue){HeartData.I.IsSuspended=true;HeartLog.Log("Start Throw Critical Exception "+CriticalCloseTime);if(CriticalCloseTime!=-1)return;Exception=ex;HeartLog.LogException(ex,callingType,(callerId!=ulong.MaxValue?$"Shared exception from {callerId}: ":"")+"Critical ");MyAPIGateway.Utilities.ShowMessage("HeartMod",$"CRITICAL ERROR - Shutting down in {WarnTimeSeconds} seconds.");MyLog.Default.WriteLineAndConsole($"HeartMod: CRITICAL ERROR - Shutting down in {WarnTimeSeconds} seconds.");CriticalCloseTime=DateTime.UtcNow.Ticks+WarnTimeSeconds*TimeSpan.TicksPerSecond;if(MyAPIGateway.Session.IsServer)HeartData.I.Net.SendToEveryone(new n_SerializableError(Exception,true));}private void m_ThrowCriticalException(n_SerializableError ex,Type callingType,ulong callerId=ulong.MaxValue){HeartData.I.IsSuspended=true;HeartLog.Log("Start Throw Critical Exception "+CriticalCloseTime);if(CriticalCloseTime!=-1)return;Exception=new Exception(ex.ExceptionMessage);HeartLog.LogException(ex,callingType,(callerId!=ulong.MaxValue?$"Shared exception from {callerId}: ":"")+"Critical ");MyAPIGateway.Utilities.ShowMessage("HeartMod",$"CRITICAL ERROR - Shutting down in {WarnTimeSeconds} seconds.");MyLog.Default.WriteLineAndConsole($"HeartMod: CRITICAL ERROR - Shutting down in {WarnTimeSeconds} seconds.");CriticalCloseTime=DateTime.UtcNow.Ticks+WarnTimeSeconds*TimeSpan.TicksPerSecond;if(MyAPIGateway.Session.IsServer)HeartData.I.Net.SendToEveryone(new n_SerializableError(Exception,true));}}}﻿using Sandbox.ModAPI;using System;using System.IO;namespace Heart_Module.Data.Scripts.HeartModule.ExceptionHandler{public class HeartLog{TextWriter writer;private static HeartLog I;public static void Log(string message){I._Log(message);}public static void LogException(Exception ex,Type callingType,string prefix=""){I._LogException(ex,callingType,prefix);}public static void LogException(n_SerializableError ex,Type callingType,string prefix=""){I._LogException(ex,callingType,prefix);}public HeartLog(){I?.Close();I=this;writer=MyAPIGateway.Utilities.WriteFileInLocalStorage("debug.log",typeof(HeartLog));writer.WriteLine("LogStart");writer.Flush();}public void Close(){writer.Close();I=null;}private void _Log(string message){writer.WriteLine($"{DateTime.UtcNow:HH:mm:ss}: {message}");writer.Flush();}private void _LogException(Exception ex,Type callingType,string prefix=""){if(ex==null){_Log("Null exception! CallingType: "+callingType.FullName);return;}_Log(prefix+$"Exception in {callingType.FullName}! {ex.Message}\n{ex.StackTrace}\n{ex.InnerException}");}private void _LogException(n_SerializableError ex,Type callingType,string prefix=""){if(ex==null){_Log("Null exception! CallingType: "+callingType.FullName);return;}_Log(prefix+$"Exception in {callingType.FullName}! {ex.ExceptionMessage}\n{ex.ExceptionStackTrace}");}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using System;namespace Heart_Module.Data.Scripts.HeartModule.ExceptionHandler{[ProtoContract]public class n_SerializableError:PacketBase{[ProtoMember(21)]public string ExceptionMessage;[ProtoMember(22)]public string ExceptionStackTrace;[ProtoMember(23)]public bool IsCritical;public n_SerializableError(){}public n_SerializableError(Exception e,bool IsCritical){ExceptionMessage=e.Message;ExceptionStackTrace=e.StackTrace;this.IsCritical=IsCritical;}public override void Received(ulong SenderSteamId){if(IsCritical)CriticalHandle.ThrowCriticalException(this,typeof(n_SerializableError),SenderSteamId);else SoftHandle.RaiseException(this,callerId:SenderSteamId);}}}﻿using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Sandbox.ModAPI;using System;namespace Heart_Module.Data.Scripts.HeartModule.ErrorHandler{public class SoftHandle{public static void RaiseException(string message,Exception ex=null,Type callingType=null,ulong callerId=ulong.MaxValue){if(message==null)return;if(!MyAPIGateway.Utilities.IsDedicated)MyAPIGateway.Utilities.ShowNotification("Minor Exception: "+message);Exception soft=new Exception(message,ex);HeartLog.LogException(soft,callingType??typeof(SoftHandle),callerId!=ulong.MaxValue?$"Shared exception from {callerId}: ":"");if(MyAPIGateway.Session.IsServer)HeartData.I.Net.SendToEveryone(new n_SerializableError(soft,false));}public static void RaiseException(Exception exception,Type callingType=null,ulong callerId=ulong.MaxValue){if(exception==null)return;if(!MyAPIGateway.Utilities.IsDedicated)MyAPIGateway.Utilities.ShowNotification("Minor Exception: "+exception.Message);HeartLog.LogException(exception,callingType??typeof(SoftHandle),callerId!=ulong.MaxValue?$"Shared exception from {callerId}: ":"");}public static void RaiseException(n_SerializableError exception,Type callingType=null,ulong callerId=ulong.MaxValue){if(exception==null)return;if(!MyAPIGateway.Utilities.IsDedicated)MyAPIGateway.Utilities.ShowNotification("Minor Exception: "+exception.ExceptionMessage);HeartLog.LogException(exception,callingType??typeof(SoftHandle),callerId!=ulong.MaxValue?$"Shared exception from {callerId}: ":"");}public static void RaiseSyncException(string message){RaiseException("Client is out of sync!\n"+message);}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Collections.Specialized;using System.Linq;using VRage.Game.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Network{public class HeartNetwork{public int NetworkLoadTicks=240;public int TotalNetworkLoad{get;private set;}=0;public Dictionary<Type,int>TypeNetworkLoad=new Dictionary<Type,int>();private int networkLoadUpdate=0;public double ServerTimeOffset{get;internal set;}=0;internal double estimatedPing=0;public void LoadData(){MyAPIGateway.Multiplayer.RegisterSecureMessageHandler(HeartData.HeartNetworkId,ReceivedPacket);foreach(var type in PacketBase.Types){TypeNetworkLoad.Add(type,0);}UpdateTimeOffset();}private void UpdateTimeOffset(){estimatedPing=DateTime.UtcNow.TimeOfDay.TotalMilliseconds;if(!MyAPIGateway.Session.IsServer)SendToServer(new n_TimeSyncPacket(){OutgoingTimestamp=estimatedPing});}public void UnloadData(){MyAPIGateway.Multiplayer.UnregisterSecureMessageHandler(HeartData.HeartNetworkId,ReceivedPacket);}int tickCounter=0;public void Update(){networkLoadUpdate--;if(networkLoadUpdate<=0){networkLoadUpdate=NetworkLoadTicks;TotalNetworkLoad=0;foreach(var networkLoadArray in TypeNetworkLoad.Keys.ToArray()){TotalNetworkLoad+=TypeNetworkLoad[networkLoadArray];TypeNetworkLoad[networkLoadArray]=0;}TotalNetworkLoad/=(NetworkLoadTicks/60);}if(tickCounter%307==0)UpdateTimeOffset();tickCounter++;}void ReceivedPacket(ushort channelId,byte[]serialized,ulong senderSteamId,bool isSenderServer){try{PacketBase packet=MyAPIGateway.Utilities.SerializeFromBinary<PacketBase>(serialized);TypeNetworkLoad[packet.GetType()]+=serialized.Length;HandlePacket(packet,senderSteamId);}catch(Exception ex){SoftHandle.RaiseException(ex,typeof(HeartNetwork));}}void HandlePacket(PacketBase packet,ulong senderSteamId){packet.Received(senderSteamId);}public KeyValuePair<Type,int>HighestNetworkLoad(){Type highest=null;foreach(var networkLoadArray in TypeNetworkLoad){if(highest==null||networkLoadArray.Value>TypeNetworkLoad[highest]){highest=networkLoadArray.Key;}}return new KeyValuePair<Type,int>(highest,TypeNetworkLoad[highest]);}public void SendToPlayer(PacketBase packet,ulong playerSteamId,byte[]serialized=null){RelayToClient(packet,playerSteamId,HeartData.I.SteamId,serialized);}public void SendToEveryone(PacketBase packet,byte[]serialized=null){RelayToClients(packet,HeartData.I.SteamId,serialized);}public void SendToEveryoneInSync(PacketBase packet,Vector3D position,byte[]serialized=null){List<ulong>toSend=new List<ulong>();foreach(var player in HeartData.I.Players)if(Vector3D.DistanceSquared(player.GetPosition(),position)<=HeartData.I.SyncRangeSq)toSend.Add(player.SteamUserId);if(toSend.Count==0)return;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);foreach(var clientSteamId in toSend)RelayToClient(packet,clientSteamId,HeartData.I.SteamId,serialized);}public void SendToServer(PacketBase packet,byte[]serialized=null){RelayToServer(packet,HeartData.I.SteamId,serialized);}List<IMyPlayer>TempPlayers=new List<IMyPlayer>();void RelayToClients(PacketBase packet,ulong senderSteamId=0,byte[]serialized=null){if(!MyAPIGateway.Multiplayer.IsServer)return;TempPlayers.Clear();MyAPIGateway.Players.GetPlayers(TempPlayers);foreach(IMyPlayer p in TempPlayers){if(p.SteamUserId==MyAPIGateway.Multiplayer.ServerId||p.SteamUserId==senderSteamId)continue;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageTo(HeartData.HeartNetworkId,serialized,p.SteamUserId);}TempPlayers.Clear();}void RelayToClient(PacketBase packet,ulong playerSteamId,ulong senderSteamId,byte[]serialized=null){if(playerSteamId==MyAPIGateway.Multiplayer.ServerId||playerSteamId==senderSteamId)return;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageTo(HeartData.HeartNetworkId,serialized,playerSteamId);}void RelayToServer(PacketBase packet,ulong senderSteamId=0,byte[]serialized=null){if(senderSteamId==MyAPIGateway.Multiplayer.ServerId)return;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageToServer(HeartData.HeartNetworkId,serialized);}}}﻿using ProtoBuf;using Sandbox.ModAPI;using System;namespace Heart_Module.Data.Scripts.HeartModule.Network{[ProtoContract]internal class n_TimeSyncPacket:PacketBase{[ProtoMember(21)]public double OutgoingTimestamp;[ProtoMember(22)]public double IncomingTimestamp;public n_TimeSyncPacket(){}public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer){HeartData.I.Net.SendToPlayer(new n_TimeSyncPacket(){IncomingTimestamp=this.OutgoingTimestamp,OutgoingTimestamp=DateTime.UtcNow.TimeOfDay.TotalMilliseconds},SenderSteamId);}else{HeartData.I.Net.estimatedPing=DateTime.UtcNow.TimeOfDay.TotalMilliseconds-HeartData.I.Net.estimatedPing;HeartData.I.Net.ServerTimeOffset=OutgoingTimestamp-IncomingTimestamp-HeartData.I.Net.estimatedPing;}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles.ProjectileNetworking;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using ProtoBuf;using System;using Heart_Module.Data.Scripts.HeartModule.Weapons;namespace Heart_Module.Data.Scripts.HeartModule.Network{[ProtoInclude(1,typeof(n_SerializableProjectile))][ProtoInclude(2,typeof(n_SerializableError))][ProtoInclude(3,typeof(n_ProjectileRequest))][ProtoInclude(4,typeof(n_ProjectileArray))][ProtoInclude(5,typeof(n_TurretFacing))][ProtoInclude(6,typeof(n_TurretFacingArray))][ProtoInclude(7,typeof(n_ProjectileDefinitionIdSync))][ProtoInclude(8,typeof(n_SerializableProjectileInfos))][ProtoInclude(9,typeof(n_SerializableFireEvents))][ProtoInclude(10,typeof(n_TimeSyncPacket))][ProtoInclude(11,typeof(Heart_Settings))][ProtoInclude(12,typeof(n_TargetingUpdate))][ProtoInclude(13,typeof(n_MagazineUpdate))][ProtoContract(UseProtoMembersOnly=true)]public abstract partial class PacketBase{public abstract void Received(ulong SenderSteamId);public static Type[]Types=new Type[]{typeof(PacketBase),typeof(n_SerializableProjectile),typeof(n_SerializableError),typeof(n_ProjectileRequest),typeof(n_ProjectileArray),typeof(n_TurretFacing),typeof(n_TurretFacingArray),typeof(n_ProjectileDefinitionIdSync),typeof(n_SerializableProjectileInfos),typeof(n_SerializableFireEvents),typeof(n_TimeSyncPacket),typeof(Heart_Settings),typeof(n_TargetingUpdate),typeof(n_MagazineUpdate),};}}﻿using Sandbox.ModAPI;using System.Collections.Generic;using VRage.Game;using VRage.Game.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles{public class DamageHandler{private static DamageHandler I;public static void Load(){I=new DamageHandler();}public static void Unload(){I=null;}public static void Update(){I?.m_Update();}public static void QueueEvent(DamageEvent damageEvent){I?.m_QueueEvent(damageEvent);}private List<DamageEvent>DamageEvents=new List<DamageEvent>();private void m_Update(){foreach(var damageEvent in DamageEvents){switch(damageEvent.Type){case DamageEvent.DamageEntType.Grid:m_GridDamageHandler((IMyCubeGrid)damageEvent.Entity,damageEvent);break;case DamageEvent.DamageEntType.Character:m_CharacterDamageHandler((IMyCharacter)damageEvent.Entity,damageEvent);break;case DamageEvent.DamageEntType.Projectile:m_ProjectileDamageHandler((Projectile)damageEvent.Entity,damageEvent);break;}}DamageEvents.Clear();}private void m_QueueEvent(DamageEvent damageEvent){DamageEvents.Add(damageEvent);}public static IMySlimBlock GetCollider(IMyCubeGrid Entity,Vector3D StartPos,Vector3D EndPosition){Vector3I?HitBlock=Entity?.RayCastBlocks(StartPos,EndPosition);if(HitBlock!=null){return Entity.GetCubeBlock(HitBlock.Value);}return null;}private void m_GridDamageHandler(IMyCubeGrid Entity,DamageEvent DamageEvent){IMySlimBlock block=GetCollider(Entity,DamageEvent.StartPosition,DamageEvent.EndPosition);if(block!=null){Entity.Physics?.ApplyImpulse(DamageEvent.Projectile.Direction*DamageEvent.Projectile.Definition.Ungrouped.Impulse,DamageEvent.HitPosition);float damageMult=block.FatBlock==null?DamageEvent.Projectile.Definition.Damage.SlimBlockDamageMod:DamageEvent.Projectile.Definition.Damage.FatBlockDamageMod;block.DoDamage(DamageEvent.Projectile.Definition.Damage.BaseDamage*damageMult,MyDamageType.Bullet,MyAPIGateway.Session.IsServer);if(DamageEvent.Projectile.Definition.Damage.AreaDamage!=0&&DamageEvent.Projectile.Definition.Damage.AreaRadius>0){BoundingSphereD damageArea=new BoundingSphereD(DamageEvent.HitPosition,DamageEvent.Projectile.Definition.Damage.AreaRadius);List<IMySlimBlock>AoEBlocks=Entity.GetBlocksInsideSphere(ref damageArea);foreach(var ablock in AoEBlocks){float distMult=Vector3.Distance(ablock.Position,block.Position)/DamageEvent.Projectile.Definition.Damage.AreaRadius;damageMult=ablock.FatBlock==null?DamageEvent.Projectile.Definition.Damage.SlimBlockDamageMod:DamageEvent.Projectile.Definition.Damage.FatBlockDamageMod;ablock.DoDamage(DamageEvent.Projectile.Definition.Damage.AreaDamage*damageMult*distMult,MyDamageType.Explosion,MyAPIGateway.Session.IsServer);}}}}private void m_CharacterDamageHandler(IMyCharacter Entity,DamageEvent DamageEvent){Entity.Physics?.ApplyImpulse(DamageEvent.Projectile.Direction*DamageEvent.Projectile.Definition.Ungrouped.Impulse,DamageEvent.Projectile.Position);Entity.DoDamage(DamageEvent.Projectile.Definition.Damage.BaseDamage,MyDamageType.Bullet,MyAPIGateway.Session.IsServer);}private void m_ProjectileDamageHandler(Projectile Entity,DamageEvent DamageEvent){}}public class DamageEvent{internal DamageEntType Type;internal float Modifier;internal Projectile Projectile;internal object Entity;internal Vector3D HitPosition;internal Vector3D HitNormal;internal Vector3D StartPosition;internal Vector3D EndPosition;internal DamageEvent(object Entity,DamageEntType type,Projectile projectile,Vector3D hitPosition,Vector3D hitNormal,Vector3D startPosition,Vector3D endPosition){this.Entity=Entity;Type=type;Projectile=projectile;HitPosition=hitPosition;HitNormal=hitNormal;StartPosition=startPosition;EndPosition=endPosition;}public enum DamageEntType{Grid,Character,Projectile}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles.GuidanceHelpers;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game.Entity;using VRage.Game.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles{public partial class Projectile{public uint Id{get;private set;}public readonly ProjectileDefinitionBase Definition;public readonly int DefinitionId;Dictionary<string,object>Overrides=new Dictionary<string,object>();public Vector3D InheritedVelocity;public ProjectileGuidance Guidance;public bool IsHitscan{get;private set;}=false;public long Firer=-1;public Vector3D Position=Vector3D.Zero;public Vector3D Direction=Vector3D.Up;public float Velocity=0;public int RemainingImpacts=0;public Action<Projectile>OnClose=(p)=>{p.Definition.LiveMethods.OnEndOfLife?.Invoke(p.Id);p.CloseDrawing();};public long LastUpdate{get;set;}public float DistanceTravelled{get;private set;}=0;public float Age{get;set;}=0;public bool QueuedDispose{get;private set;}=false;private float _health=0;public float Health{get{return _health;}set{_health=value;if(_health<=0&&Definition.PhysicalProjectile.Health>0)QueueDispose();}}public Projectile(){}public Projectile(n_SerializableProjectile projectile){if(!ProjectileManager.I.IsIdAvailable(projectile.Id)){SoftHandle.RaiseSyncException("Unable to spawn projectile - duplicate Id!");return;}if(!projectile.DefinitionId.HasValue||!ProjectileDefinitionManager.HasDefinition(projectile.DefinitionId.Value)){SoftHandle.RaiseSyncException("Unable to spawn projectile - invalid DefinitionId!");DefinitionId=-1;return;}Id=projectile.Id;DefinitionId=projectile.DefinitionId.Value;Definition=ProjectileDefinitionManager.GetDefinition(projectile.DefinitionId.Value);Firer=projectile.Firer.GetValueOrDefault(0);IsHitscan=Definition.PhysicalProjectile.IsHitscan;Health=Definition.PhysicalProjectile.Health;if(!IsHitscan)Velocity=Definition.PhysicalProjectile.Velocity;else Definition.PhysicalProjectile.MaxLifetime=1/60f;if(Definition.Guidance.Length>0)Guidance=new ProjectileGuidance(this);Definition.LiveMethods.OnSpawn?.Invoke(Id,(MyEntity)MyAPIGateway.Entities.GetEntityById(Firer));UpdateFromSerializable(projectile);}public Projectile(int DefinitionId,Vector3D Position,Vector3D Direction,IMyCubeBlock block):this(DefinitionId,Position,Direction,block.EntityId,block.CubeGrid?.LinearVelocity??Vector3D.Zero){}public Projectile(int DefinitionId,Vector3D Position,Vector3D Direction,long firer=0,Vector3D InitialVelocity=new Vector3D()){if(!ProjectileDefinitionManager.HasDefinition(DefinitionId)){SoftHandle.RaiseSyncException("Unable to spawn projectile - invalid DefinitionId!");return;}this.DefinitionId=DefinitionId;Definition=ProjectileDefinitionManager.GetDefinition(DefinitionId);this.Position=Position;this.Direction=Direction;this.Firer=firer;IsHitscan=Definition.PhysicalProjectile.IsHitscan;if(!IsHitscan){float variance=(float)(new Random().NextDouble()*2-1)*Definition.PhysicalProjectile.VelocityVariance;Velocity=Definition.PhysicalProjectile.Velocity+variance;this.InheritedVelocity=InitialVelocity;}else{Definition.PhysicalProjectile.MaxLifetime=1/60f;}RemainingImpacts=Definition.Damage.MaxImpacts;Health=Definition.PhysicalProjectile.Health;if(Definition.Guidance.Length>0)Guidance=new ProjectileGuidance(this);Definition.LiveMethods.OnSpawn?.Invoke(Id,(MyEntity)MyAPIGateway.Entities.GetEntityById(Firer));}public void TickUpdate(float delta){if((Definition.PhysicalProjectile.MaxTrajectory!=-1&&Definition.PhysicalProjectile.MaxTrajectory<DistanceTravelled)||(Definition.PhysicalProjectile.MaxLifetime!=-1&&Definition.PhysicalProjectile.MaxLifetime<Age))QueueDispose();if(Guidance==null&&Definition.Guidance.Length>0)Guidance=new ProjectileGuidance(this);Age+=delta;if(!IsHitscan){Guidance?.RunGuidance(delta);CheckHits();float gravityMultiplier=Definition.PhysicalProjectile.GravityInfluenceMultiplier;Vector3D gravity;float dummyNaturalGravityInterference;gravity=MyAPIGateway.Physics.CalculateNaturalGravityAt(Position,out dummyNaturalGravityInterference);Vector3D gravityDirection=Vector3D.Normalize(gravity);double gravityAcceleration=gravity.Length()*gravityMultiplier;Velocity+=(float)(gravityAcceleration*delta);Position+=(InheritedVelocity+Direction*Velocity)*delta;DistanceTravelled+=Velocity*delta;NextMoveStep=Position+(InheritedVelocity+Direction*Velocity)*delta;if(gravityAcceleration<=0){NextMoveStep=Position+(InheritedVelocity+Direction*Velocity)*delta;}else{Velocity+=(float)(gravityAcceleration*delta);Direction=Vector3D.Normalize(Direction+gravityDirection*gravityMultiplier);NextMoveStep=Position+(InheritedVelocity+Direction*(Velocity+Definition.PhysicalProjectile.Acceleration*delta))*delta;}}else{if(!MyAPIGateway.Session.IsServer)RemainingImpacts=Definition.Damage.MaxImpacts;NextMoveStep=Position+Direction*Definition.PhysicalProjectile.MaxTrajectory;if(RemainingImpacts>0){MaxBeamLength=CheckHits();if(MaxBeamLength==-1)MaxBeamLength=Definition.PhysicalProjectile.MaxTrajectory;}DrawUpdate();QueueDispose();}if(MyAPIGateway.Session.IsServer)UpdateAudio();}public float CheckHits(){if(NextMoveStep==Vector3D.Zero)return-1;double len=IsHitscan?Definition.PhysicalProjectile.MaxTrajectory:Vector3D.Distance(Position,NextMoveStep);double dist=-1;if(MyAPIGateway.Session.IsServer&&RemainingImpacts>0&&Definition.Damage.DamageToProjectiles>0){List<Projectile>hittableProjectiles=new List<Projectile>();ProjectileManager.I.GetProjectilesInSphere(new BoundingSphereD(Position,len),ref hittableProjectiles,true);float damageToProjectilesInAoE=0;List<Projectile>projectilesInAoE=new List<Projectile>();ProjectileManager.I.GetProjectilesInSphere(new BoundingSphereD(Position,Definition.Damage.DamageToProjectilesRadius),ref projectilesInAoE,true);RayD ray=new RayD(Position,Direction);foreach(var projectile in hittableProjectiles){if(RemainingImpacts<=0||projectile==this)continue;Vector3D offset=Vector3D.Half*projectile.Definition.PhysicalProjectile.ProjectileSize;BoundingBoxD box=new BoundingBoxD(projectile.Position-offset,projectile.Position+offset);double?intersectDist=ray.Intersects(box);if(intersectDist!=null){dist=intersectDist.Value;projectile.Health-=Definition.Damage.DamageToProjectiles;damageToProjectilesInAoE+=Definition.Damage.DamageToProjectiles;Vector3D hitPos=Position+Direction*dist;if(MyAPIGateway.Session.IsServer)PlayImpactAudio(hitPos);if(!MyAPIGateway.Utilities.IsDedicated)DrawImpactParticle(hitPos,Direction);Definition.LiveMethods.OnImpact?.Invoke(Id,hitPos,Direction,null);RemainingImpacts--;}}if(damageToProjectilesInAoE>0)foreach(var projectile in projectilesInAoE)if(projectile!=this)projectile.Health-=damageToProjectilesInAoE;}if(RemainingImpacts>0){List<IHitInfo>intersects=new List<IHitInfo>();MyAPIGateway.Physics.CastRay(Position,NextMoveStep,intersects);foreach(var hitInfo in intersects){if(RemainingImpacts<=0)break;if(hitInfo.HitEntity.EntityId==Firer)continue;dist=hitInfo.Fraction*len;if(MyAPIGateway.Session.IsServer){if(hitInfo.HitEntity is IMyCubeGrid)DamageHandler.QueueEvent(new DamageEvent(hitInfo.HitEntity,DamageEvent.DamageEntType.Grid,this,hitInfo.Position,hitInfo.Normal,Position,NextMoveStep));else if(hitInfo.HitEntity is IMyCharacter)DamageHandler.QueueEvent(new DamageEvent(hitInfo.HitEntity,DamageEvent.DamageEntType.Character,this,hitInfo.Position,hitInfo.Normal,Position,NextMoveStep));}if(MyAPIGateway.Session.IsServer)PlayImpactAudio(hitInfo.Position);if(!MyAPIGateway.Utilities.IsDedicated)DrawImpactParticle(hitInfo.Position,hitInfo.Normal);Definition.LiveMethods.OnImpact?.Invoke(Id,hitInfo.Position,Direction,(MyEntity)hitInfo.HitEntity);RemainingImpacts--;}}if(RemainingImpacts<=0)QueueDispose();return(float)dist;}public Vector3D NextMoveStep=Vector3D.Zero;public void UpdateFromSerializable(n_SerializableProjectile projectile){if(projectile.IsActive.HasValue)QueuedDispose=!projectile.IsActive.Value;LastUpdate=DateTime.UtcNow.Date.AddMilliseconds(projectile.TimestampFromMidnight).Ticks;float delta=(DateTime.UtcNow.Ticks-LastUpdate)/(float)TimeSpan.TicksPerSecond;if(projectile.Direction.HasValue)Direction=projectile.Direction.Value;if(projectile.Position.HasValue)Position=projectile.Position.Value;if(projectile.Velocity.HasValue)Velocity=projectile.Velocity.Value;if(projectile.InheritedVelocity.HasValue)InheritedVelocity=projectile.InheritedVelocity.Value;if(projectile.Firer.HasValue)Firer=projectile.Firer.Value;TickUpdate(delta);}public void UpdateHitscan(Vector3D newPosition,Vector3D newDirection){Age=0;Position=newPosition;Direction=newDirection;RemainingImpacts=Definition.Damage.MaxImpacts;}public n_SerializableProjectile AsSerializable(int DetailLevel=1){n_SerializableProjectile projectile=new n_SerializableProjectile(){Id=Id,TimestampFromMidnight=(uint)DateTime.Now.TimeOfDay.TotalMilliseconds,};switch(DetailLevel){case 0:projectile.IsActive=!QueuedDispose;projectile.DefinitionId=DefinitionId;projectile.Position=Position;projectile.Direction=Direction;projectile.InheritedVelocity=InheritedVelocity;projectile.Firer=Firer;break;case 1:projectile.IsActive=!QueuedDispose;projectile.Position=Position;if(IsHitscan||Definition.Guidance.Length>0)projectile.Direction=Direction;if(!IsHitscan&&Definition.PhysicalProjectile.Acceleration>0)projectile.Velocity=Velocity;break;case 3:projectile.DefinitionId=DefinitionId;projectile.Position=Position;projectile.Direction=Direction;projectile.InheritedVelocity=InheritedVelocity;projectile.Firer=Firer;break;}return projectile;}public void QueueDispose(){QueuedDispose=true;}public void SetId(uint id){if(Id==0)Id=id;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Sandbox.ModAPI;using System.Collections.Generic;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles{internal class ProjectileDefinitionManager{public static ProjectileDefinitionManager I;private List<ProjectileDefinitionBase>Definitions=new List<ProjectileDefinitionBase>();private List<byte[]>SerializedDefinitions=new List<byte[]>();private Dictionary<string,int>DefinitionNamePairs=new Dictionary<string,int>();public static ProjectileDefinitionBase GetDefinition(int id){if(HasDefinition(id))return I.Definitions[id];else return null;}public static byte[]GetSerializedDefinition(int id){if(HasDefinition(id))return I.SerializedDefinitions[id];else return null;}public static ProjectileDefinitionBase GetDefinition(string name){return GetDefinition(GetId(name));}public static byte[]GetSerializedDefinition(string name){return GetSerializedDefinition(GetId(name));}public static int GetId(string definitionName){if(HasDefinition(definitionName))return I.DefinitionNamePairs[definitionName];return-1;}public static int GetId(ProjectileDefinitionBase definition){return I.Definitions.IndexOf(definition);}public static bool HasDefinition(string name){if(name==null)return false;return I.DefinitionNamePairs.ContainsKey(name);}public static bool HasDefinition(int id){return I.Definitions.Count>id&&id>=0&&I.Definitions[id]!=null;}public static int RegisterModApiDefinition(byte[]serializedDefinition){return RegisterDefinition(serializedDefinition);}public static int RegisterDefinition(ProjectileDefinitionBase definition){if(I.DefinitionNamePairs.ContainsKey(definition.Name)){HeartLog.Log($"Duplicate ammo definition {definition.Name}! Skipping...");return-1;}var serializedDefinition=MyAPIGateway.Utilities.SerializeToBinary(definition);I.Definitions.Add(definition);I.SerializedDefinitions.Add(serializedDefinition);I.DefinitionNamePairs.Add(definition.Name,I.Definitions.Count-1);if(MyAPIGateway.Session.IsServer)HeartData.I.Net.SendToEveryone(new n_ProjectileDefinitionIdSync(I.Definitions.Count-1,definition.Name,serializedDefinition));HeartLog.Log($"Registered class projectile definition {definition.Name} for ID {I.Definitions.Count-1}.");return I.Definitions.Count-1;}public static int RegisterDefinition(byte[]serializedDefinition){var definition=MyAPIGateway.Utilities.SerializeFromBinary<ProjectileDefinitionBase>(serializedDefinition);if(I.DefinitionNamePairs.ContainsKey(definition.Name)){HeartLog.Log($"Duplicate ammo definition {definition.Name}! Skipping...");return-1;}I.Definitions.Add(definition);I.SerializedDefinitions.Add(serializedDefinition);I.DefinitionNamePairs.Add(definition.Name,I.Definitions.Count-1);if(MyAPIGateway.Session.IsServer)HeartData.I.Net.SendToEveryone(new n_ProjectileDefinitionIdSync(I.Definitions.Count-1,definition.Name,serializedDefinition));HeartLog.Log($"Registered binary projectile definition {definition.Name} for ID {I.Definitions.Count-1}.");return I.Definitions.Count-1;}public static bool ReplaceDefinition(int definitionId,byte[]serializedDefinition,bool syncToClients=false){if(!HasDefinition(definitionId))return false;var definition=MyAPIGateway.Utilities.SerializeFromBinary<ProjectileDefinitionBase>(serializedDefinition);I.Definitions[definitionId]=definition;I.SerializedDefinitions[definitionId]=serializedDefinition;if(MyAPIGateway.Session.IsServer&&syncToClients)HeartData.I.Net.SendToEveryone(new n_ProjectileDefinitionIdSync(definitionId,definition.Name,serializedDefinition));HeartLog.Log($"Updated binary projectile definition {definition.Name} for ID {definitionId}");return true;}public static bool ReplaceDefinition(int definitionId,ProjectileDefinitionBase definition,bool syncToClients=false){if(!HasDefinition(definitionId))return false;var serializedDefinition=MyAPIGateway.Utilities.SerializeToBinary(definition);I.Definitions[definitionId]=definition;I.SerializedDefinitions[definitionId]=serializedDefinition;if(MyAPIGateway.Session.IsServer&&syncToClients)HeartData.I.Net.SendToEveryone(new n_ProjectileDefinitionIdSync(definitionId,definition.Name,serializedDefinition));HeartLog.Log($"Updated class projectile definition {definition.Name} for ID {definitionId}");return true;}public static void RemoveDefinition(int definitionId){if(!HasDefinition(definitionId))return;var definition=I.Definitions[definitionId];I.DefinitionNamePairs.Remove(definition.Name);I.Definitions[definitionId]=null;I.SerializedDefinitions[definitionId]=null;HeartLog.Log($"Removed ammo definition "+definitionId);}public static void ClearDefinitions(){I.Definitions.Clear();I.DefinitionNamePairs.Clear();I.SerializedDefinitions.Clear();HeartLog.Log($"Cleared all ammo definitions.");}public static int DefinitionCount(){return I.Definitions.Count;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Utility;using Sandbox.Game;using Sandbox.Game.Entities;using VRage.Game;using VRage.Game.Entity;using VRage.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles{partial class Projectile{MyEntity ProjectileEntity=new MyEntity();MyParticleEffect ProjectileEffect;uint RenderId=0;MatrixD ProjectileMatrix=MatrixD.Identity;MyEntity3DSoundEmitter ProjectileSound;public bool IsVisible=true;public bool HasAudio=true;private float MaxBeamLength=0;internal void InitEffects(){float f=(float)HeartData.I.Random.NextDouble();IsVisible=f<=Definition.Visual.VisibleChance;HasAudio=f<=Definition.Audio.SoundChance;if(IsVisible&&Definition.Visual.HasModel){ProjectileEntity.Init(null,Definition.Visual.Model,null,null);ProjectileEntity.Render.CastShadows=false;ProjectileEntity.IsPreview=true;ProjectileEntity.Save=false;ProjectileEntity.SyncFlag=false;ProjectileEntity.NeedsWorldMatrix=false;ProjectileEntity.Flags|=EntityFlags.IsNotGamePrunningStructureObject;MyEntities.Add(ProjectileEntity,true);ProjectileEntity.WorldMatrix=MatrixD.CreateWorld(Position,Direction,Vector3D.Cross(Direction,Vector3D.Up));RenderId=ProjectileEntity.Render.GetRenderObjectID();}else RenderId=uint.MaxValue;if(HasAudio&&Definition.Audio.HasTravelSound){ProjectileSound=new MyEntity3DSoundEmitter(null);ProjectileSound.SetPosition(Position);ProjectileSound.CanPlayLoopSounds=true;ProjectileSound.VolumeMultiplier=Definition.Audio.TravelVolume;ProjectileSound.CustomMaxDistance=Definition.Audio.TravelMaxDistance;ProjectileSound.PlaySound(Definition.Audio.TravelSoundPair,true);}}public void DrawUpdate(){if(!IsVisible||HeartData.I.DegradedMode)return;ProjectileMatrix=MatrixD.CreateWorld(Position,Direction,Vector3D.Cross(Direction,Vector3D.Up));if(Definition.Visual.HasTrail&&!HeartData.I.IsPaused){if(IsHitscan)GlobalEffects.AddLine(Position,Position+Direction*MaxBeamLength,Definition.Visual.TrailFadeTime,Definition.Visual.TrailWidth,Definition.Visual.TrailColor,Definition.Visual.TrailTexture);else GlobalEffects.AddLine(Position,Position+Direction*Definition.Visual.TrailLength,Definition.Visual.TrailFadeTime,Definition.Visual.TrailWidth,Definition.Visual.TrailColor,Definition.Visual.TrailTexture);}if(Definition.Visual.HasAttachedParticle&&!HeartData.I.IsPaused){if(ProjectileEffect==null)MyParticlesManager.TryCreateParticleEffect(Definition.Visual.AttachedParticle,ref MatrixD.Identity,ref Vector3D.Zero,RenderId,out ProjectileEffect);if(RenderId==uint.MaxValue)ProjectileEffect.WorldMatrix=ProjectileMatrix;}ProjectileEntity.WorldMatrix=ProjectileMatrix;if(HasAudio&&Definition.Audio.HasTravelSound){ProjectileSound.SetPosition(Position);}}private void UpdateAudio(){if(!HasAudio||!Definition.Audio.HasTravelSound)return;ProjectileSound.SetPosition(Position);ProjectileSound.SetVelocity(Direction*Velocity);}private void DrawImpactParticle(Vector3D ImpactPosition,Vector3D ImpactNormal){if(!IsVisible||Definition.Visual.ImpactParticle==""||HeartData.I.DegradedMode)return;MatrixD matrix=MatrixD.CreateWorld(ImpactPosition,ImpactNormal,Vector3D.CalculatePerpendicularVector(ImpactNormal));MyParticleEffect hitEffect;if(MyParticlesManager.TryCreateParticleEffect(Definition.Visual.ImpactParticle,ref matrix,ref ImpactPosition,uint.MaxValue,out hitEffect)){if(hitEffect.Loop)hitEffect.Stop();}}private void PlayImpactAudio(Vector3D ImpactPosition){if(!HasAudio||!Definition.Audio.HasImpactSound)return;MyVisualScriptLogicProvider.PlaySingleSoundAtPosition(Definition.Audio.ImpactSound,ImpactPosition);}private void CloseDrawing(){ProjectileEffect?.Close();ProjectileEntity?.Close();ProjectileSound?.StopSound(true);ProjectileSound?.Cleanup();}internal class LineFade{public Vector3D Start;public Vector3D End;public float FadeTime;public LineFade(Vector3D start,Vector3D end,float fadeTime){Start=start;End=end;FadeTime=fadeTime;}}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles.ProjectileNetworking;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.Game.GUI.DebugInputComponents;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using VRage.Game.Components;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]public partial class ProjectileManager:MySessionComponentBase{public static ProjectileManager I=new ProjectileManager();public ProjectileNetwork Network=new ProjectileNetwork();private Dictionary<uint,Projectile>ActiveProjectiles=new Dictionary<uint,Projectile>();private HashSet<Projectile>ProjectilesWithHealth=new HashSet<Projectile>();public uint NextId{get;private set;}=0;private List<Projectile>QueuedCloseProjectiles=new List<Projectile>();private const float deltaTick=1/60f;private Stopwatch clockTick=Stopwatch.StartNew();public int NumProjectiles=>ActiveProjectiles.Count;public override void LoadData(){I=this;DamageHandler.Load();}protected override void UnloadData(){I=null;DamageHandler.Unload();}public override void UpdateAfterSimulation(){if(HeartData.I.IsSuspended)return;try{MyAPIGateway.Parallel.ForEach(ActiveProjectiles.Values.ToArray(),UpdateSingleProjectile);foreach(var projectile in QueuedCloseProjectiles){ActiveProjectiles.Remove(projectile.Id);ProjectilesWithHealth.Remove(projectile);projectile.OnClose.Invoke(projectile);}QueuedCloseProjectiles.Clear();Network.Update1();DamageHandler.Update();clockTick.Restart();}catch(Exception ex){SoftHandle.RaiseException(ex,typeof(ProjectileManager));}}private void UpdateSingleProjectile(Projectile projectile){projectile.TickUpdate(deltaTick);if(projectile.QueuedDispose)QueuedCloseProjectiles.Add(projectile);}public override void UpdatingStopped(){clockTick.Stop();}public override void Draw(){if(HeartData.I.IsSuspended||MyAPIGateway.Utilities.IsDedicated)return;foreach(var projectile in ActiveProjectiles.Values)projectile.DrawUpdate();}[Obsolete]public void UpdateProjectileSync(n_SerializableProjectile projectile){if(MyAPIGateway.Session.IsServer)return;if(IsIdAvailable(projectile.Id)&&projectile.DefinitionId.HasValue){if(projectile.Firer!=null){WeaponManager.I.GetWeapon(projectile.Firer.Value)?.MuzzleFlash(true);}AddProjectile(new Projectile(projectile));}else{Projectile p=GetProjectile(projectile.Id);if(p!=null)p.UpdateFromSerializable(projectile);else if(projectile.IsActive??false)HeartData.I.Net.SendToServer(new n_ProjectileRequest(projectile.Id));}}public Projectile AddProjectile(int projectileDefinitionId,Vector3D position,Vector3D direction,IMyConveyorSorter sorterWep,bool shouldSync=true){try{return AddProjectile(new Projectile(projectileDefinitionId,position,direction,sorterWep),shouldSync);}catch(Exception ex){SoftHandle.RaiseException($"Invalid ammo definition ({projectileDefinitionId} of {ProjectileDefinitionManager.DefinitionCount()})",ex,typeof(ProjectileManager));return null;}}public Projectile AddProjectile(int projectileDefinitionId,Vector3D position,Vector3D direction,long firer,Vector3D initialVelocity,bool shouldSync=true){try{return AddProjectile(new Projectile(projectileDefinitionId,position,direction,firer,initialVelocity),shouldSync);}catch(Exception ex){SoftHandle.RaiseException($"Invalid ammo definition ({projectileDefinitionId} of {ProjectileDefinitionManager.DefinitionCount()})",ex,typeof(ProjectileManager));return null;}}internal Projectile AddProjectile(Projectile projectile,bool shouldSync=true){if(projectile==null||projectile.DefinitionId==-1)return null;projectile.Position-=projectile.InheritedVelocity/60f;NextId++;while(!IsIdAvailable(NextId))NextId++;projectile.SetId(NextId);ActiveProjectiles.Add(projectile.Id,projectile);if(MyAPIGateway.Session.IsServer&&shouldSync){switch(projectile.Definition.Networking.NetworkingMode){case Networking.NetworkingModeEnum.FullSync:Network.QueueSync_PP(projectile,0);break;case Networking.NetworkingModeEnum.FireEvent:Network.QueueSync_FireEvent(projectile);break;}}if(!MyAPIGateway.Utilities.IsDedicated)projectile.InitEffects();if(projectile.Definition.PhysicalProjectile.Health>0&&projectile.Definition.PhysicalProjectile.ProjectileSize>0)ProjectilesWithHealth.Add(projectile);return projectile;}public Projectile GetProjectile(uint id)=>ActiveProjectiles.GetValueOrDefault(id,null);public bool IsIdAvailable(uint id)=>!ActiveProjectiles.ContainsKey(id);public void GetProjectilesInSphere(BoundingSphereD sphere,ref List<Projectile>projectiles,bool onlyDamageable=false){projectiles.Clear();double rangeSq=sphere.Radius*sphere.Radius;Vector3D pos=sphere.Center;if(onlyDamageable){foreach(var projectile in ProjectilesWithHealth)if(Vector3D.DistanceSquared(pos,projectile.Position)<rangeSq)projectiles.Add(projectile);}else{foreach(var projectile in ActiveProjectiles.Values)if(Vector3D.DistanceSquared(pos,projectile.Position)<rangeSq)projectiles.Add(projectile);}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Utility;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game;using VRage.Game.ModAPI;using VRage.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.GuidanceHelpers{public class ProjectileGuidance{IMyEntity targetEntity;Projectile projectile;ProjectileDefinitionBase Definition;LinkedList<Guidance>stages;float time=0;Vector3D randomOffset=Vector3D.Zero;PID stagePid;public ProjectileGuidance(Projectile projectile){this.projectile=projectile;Definition=projectile.Definition;stages=new LinkedList<Guidance>(Definition.Guidance);stagePid=stages.First?.Value.PID?.GetPID();if((stages.First?.Value.Velocity??-1)!=-1)projectile.Velocity=stages.First.Value.Velocity;else projectile.Velocity=projectile.Definition.PhysicalProjectile.Velocity;}public IMyEntity GetTarget(){return targetEntity;}public void SetTarget(IMyEntity target){if(IsTargetAllowed(target,stages.First.Value))targetEntity=target;}public void RunGuidance(float delta){time+=delta;if(stages.Count==0||stages.First.Value.TriggerTime>time)return;Guidance currentStage=stages.First.Value;if(currentStage.ActiveDuration==-1){if((stages.First.Next?.Value.TriggerTime??float.MaxValue)<=time){NextStage(delta);return;}}else if(currentStage.TriggerTime+currentStage.ActiveDuration<time){NextStage(delta);return;}if(currentStage.DoRaycast)CheckRaycast(currentStage);if(targetEntity!=null&&!targetEntity.Closed){Vector3D leadPos=targetEntity.PositionComp.WorldAABB.Center;if(currentStage.UseAimPrediction)leadPos=TargetingHelper.InterceptionPoint(projectile.Position,projectile.InheritedVelocity,targetEntity.PositionComp.WorldAABB.Center,targetEntity.Physics.LinearVelocity,projectile.Velocity)??leadPos;leadPos+=randomOffset;StepDirection((leadPos-projectile.Position).Normalized(),currentStage.MaxTurnRate,currentStage.MaxGs,delta);}}internal void NextStage(float delta){stages.RemoveFirst();if((stages.First?.Value.Velocity??-1)!=-1)projectile.Velocity=stages.First.Value.Velocity;else projectile.Velocity=projectile.Definition.PhysicalProjectile.Velocity;if(stages.First==null)return;randomOffset=Vector3D.Zero;if(stages.First.Value.Inaccuracy!=0){Vector3D.CreateFromAzimuthAndElevation(HeartData.I.Random.NextDouble()*2*Math.PI,HeartData.I.Random.NextDouble()*2*Math.PI,out randomOffset);randomOffset*=stages.First.Value.Inaccuracy*HeartData.I.Random.NextDouble();}stagePid=stages.First?.Value.PID?.GetPID();RunGuidance(delta);}internal void StepDirection(Vector3D targetDir,float maxTurnRate,float maxGs,float delta){double AngleDifference=Vector3D.Angle(projectile.Direction,targetDir);Vector3 RotAxis=Vector3.Cross(projectile.Direction,targetDir);RotAxis.Normalize();double actualTurnRate=maxTurnRate>=0?maxTurnRate:double.MaxValue;if(maxGs>=0){double gravityLimited=Definition.PhysicalProjectile.Velocity/(maxGs*9.81);actualTurnRate=Math.Min(gravityLimited,actualTurnRate);}actualTurnRate*=delta;double finalAngle;if(stagePid!=null){finalAngle=HeartUtils.MinAbs(stagePid.Tick(AngleDifference,0,0,delta),actualTurnRate);}else{finalAngle=HeartUtils.ClampAbs(AngleDifference,actualTurnRate);}Matrix RotationMatrix=Matrix.CreateFromAxisAngle(RotAxis,(float)finalAngle);projectile.Direction=Vector3.Transform(projectile.Direction,RotationMatrix).Normalized();}internal void CheckRaycast(Guidance currentstage){if(targetEntity==null){PreformRaycast(currentstage);return;}double angle=Vector3D.Angle(projectile.Direction,targetEntity.WorldAABB.Center);if(angle>currentstage.CastCone)PreformRaycast(currentstage);}internal void PreformRaycast(Guidance currentstage){MatrixD frustrumMatrix=MatrixD.CreatePerspectiveFieldOfView(currentstage.CastCone,1,50,currentstage.CastDistance);frustrumMatrix=MatrixD.Invert(MatrixD.CreateWorld(projectile.Position,projectile.Direction,Vector3D.CalculatePerpendicularVector(projectile.Direction)))*frustrumMatrix;BoundingFrustumD frustrum=new BoundingFrustumD(frustrumMatrix);BoundingSphereD sphere=new BoundingSphereD(projectile.Position,currentstage.CastDistance);foreach(var entity in MyAPIGateway.Entities.GetTopMostEntitiesInSphere(ref sphere)){if(!IsTargetAllowed(entity,currentstage))continue;if(frustrum.Intersects(entity.WorldAABB)){targetEntity=entity;break;}}}internal bool IsTargetAllowed(IMyEntity target,Guidance?currentStage){if(currentStage==null||target==null)return false;if(projectile.Firer==0)return true;IMyEntity firer=MyAPIGateway.Entities.GetEntityById(projectile.Firer);if(firer==null||!(firer is IMyCubeBlock))return true;MyRelationsBetweenPlayerAndBlock relations;if(target is IMyCubeGrid)relations=HeartUtils.GetRelationsBetweeenGrids(((IMyCubeBlock)firer).CubeGrid,(IMyCubeGrid)target);else if(target is IMyPlayer)relations=HeartUtils.GetRelationsBetweenGridAndPlayer(((IMyCubeBlock)firer).CubeGrid,((IMyPlayer)target).IdentityId);else return true;if((relations==MyRelationsBetweenPlayerAndBlock.NoOwnership||relations==MyRelationsBetweenPlayerAndBlock.Neutral)&&(currentStage?.IFF&IFF_Enum.TargetNeutrals)==IFF_Enum.TargetNeutrals)return true;if((relations==MyRelationsBetweenPlayerAndBlock.Owner)&&(currentStage?.IFF&IFF_Enum.TargetSelf)==IFF_Enum.TargetSelf)return true;if((relations==MyRelationsBetweenPlayerAndBlock.Friends)&&(currentStage?.IFF&IFF_Enum.TargetFriendlies)==IFF_Enum.TargetFriendlies)return true;if((relations==MyRelationsBetweenPlayerAndBlock.Enemies)&&(currentStage?.IFF&IFF_Enum.TargetEnemies)==IFF_Enum.TargetEnemies)return true;return false;}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Network;using Heart_Module.Data.Scripts.HeartModule.Weapons;using ProtoBuf;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game.ModAPI;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.ProjectileNetworking{[ProtoContract]internal class n_SerializableProjectileInfos:PacketBase{public n_SerializableProjectileInfos(){}public n_SerializableProjectileInfos(uint[]uniqueProjectileId,Vector3[]positionRelativeToPlayer,Vector3[]direction,int[]definitionId,long[]firerEntityId=null,long?[]targetEntityId=null,uint[]projectileAge=null){UniqueProjectileId=uniqueProjectileId;playerRelativeX=new float[positionRelativeToPlayer.Length];playerRelativeY=new float[positionRelativeToPlayer.Length];playerRelativeZ=new float[positionRelativeToPlayer.Length];for(int i=0;i<positionRelativeToPlayer.Length;i++){playerRelativeX[i]=positionRelativeToPlayer[i].X;playerRelativeY[i]=positionRelativeToPlayer[i].Y;playerRelativeZ[i]=positionRelativeToPlayer[i].Z;}directionX=new float[direction.Length];directionY=new float[direction.Length];directionZ=new float[direction.Length];for(int i=0;i<direction.Length;i++){directionX[i]=direction[i].X;directionY[i]=direction[i].Y;directionZ[i]=direction[i].Z;}DefinitionId=definitionId;FirerEntityId=firerEntityId;TargetEntityId=targetEntityId;ProjectileAge=projectileAge;MillisecondsFromMidnight=(int)DateTime.UtcNow.TimeOfDay.TotalMilliseconds;}public n_SerializableProjectileInfos(List<Projectile>projectiles,IMyCharacter character,ProjectileDetailLevel detailLevel=ProjectileDetailLevel.Full){UniqueProjectileId=new uint[projectiles.Count];playerRelativeX=new float[projectiles.Count];playerRelativeY=new float[projectiles.Count];playerRelativeZ=new float[projectiles.Count];directionX=new float[projectiles.Count];directionY=new float[projectiles.Count];directionZ=new float[projectiles.Count];if(detailLevel!=ProjectileDetailLevel.Minimal){DefinitionId=new int[projectiles.Count];FirerEntityId=new long[projectiles.Count];if(detailLevel!=ProjectileDetailLevel.NoGuidance){TargetEntityId=new long?[projectiles.Count];ProjectileAge=new uint[projectiles.Count];}}Vector3D characterPos=character.GetPosition();for(int i=0;i<projectiles.Count;i++){UniqueProjectileId[i]=projectiles[i].Id;playerRelativeX[i]=(float)(projectiles[i].Position.X-characterPos.X);playerRelativeY[i]=(float)(projectiles[i].Position.Y-characterPos.Y);playerRelativeZ[i]=(float)(projectiles[i].Position.Z-characterPos.Z);directionX[i]=(float)projectiles[i].Direction.X;directionY[i]=(float)projectiles[i].Direction.Y;directionZ[i]=(float)projectiles[i].Direction.Z;if(detailLevel!=ProjectileDetailLevel.Minimal){DefinitionId[i]=projectiles[i].DefinitionId;FirerEntityId[i]=projectiles[i].Firer;if(detailLevel!=ProjectileDetailLevel.NoGuidance){TargetEntityId[i]=projectiles[i].Guidance?.GetTarget()?.EntityId;ProjectileAge[i]=(uint)(projectiles[i].Age*60);}}}MillisecondsFromMidnight=(int)DateTime.UtcNow.TimeOfDay.TotalMilliseconds;}[ProtoMember(21)]public uint[]UniqueProjectileId;[ProtoMember(22)]private float[]playerRelativeX;[ProtoMember(23)]private float[]playerRelativeY;[ProtoMember(24)]private float[]playerRelativeZ;public Vector3[]PlayerRelativePosition(){Vector3[]array=new Vector3[playerRelativeX.Length];for(int i=0;i<array.Length;i++)array[i]=new Vector3(playerRelativeX[i],playerRelativeY[i],playerRelativeZ[i]);return array;}public Vector3 PlayerRelativePosition(int index){return new Vector3(playerRelativeX[index],playerRelativeY[index],playerRelativeZ[index]);}[ProtoMember(25)]private float[]directionX;[ProtoMember(26)]private float[]directionY;[ProtoMember(27)]private float[]directionZ;public Vector3[]Direction(){Vector3[]array=new Vector3[directionX.Length];for(int i=0;i<array.Length;i++)array[i]=new Vector3(directionX[i],directionY[i],directionZ[i]);return array;}public Vector3 Direction(int index){return new Vector3(directionX[index],directionY[index],directionZ[index]);}[ProtoMember(28)]public int[]DefinitionId;[ProtoMember(29)]public int MillisecondsFromMidnight;[ProtoMember(30)]public long[]FirerEntityId;[ProtoMember(31)]public long?[]TargetEntityId;[ProtoMember(32)]public uint[]ProjectileAge;public override void Received(ulong SenderSteamId){ProjectileManager.I.Network.Recieve_PP(this);}public enum ProjectileDetailLevel{Full=0,NoGuidance=1,Minimal=2,}public Projectile ToProjectile(int index){if(DefinitionId==null)return null;Projectile p=new Projectile(DefinitionId[index],PlayerRelativePosition(index)+MyAPIGateway.Session.Player.Character.GetPosition(),Direction(index),FirerEntityId[index],((IMyCubeBlock)MyAPIGateway.Entities.GetEntityById(FirerEntityId[index]))?.CubeGrid.LinearVelocity??Vector3D.Zero){LastUpdate=DateTime.UtcNow.Date.AddMilliseconds(MillisecondsFromMidnight-HeartData.I.Net.ServerTimeOffset).Ticks};if(ProjectileAge!=null)p.Age=ProjectileAge[index];if(TargetEntityId!=null){if(TargetEntityId[index]==null)p.Guidance.SetTarget(null);else p.Guidance.SetTarget(MyAPIGateway.Entities.GetEntityById(TargetEntityId[index]));}float delta=(DateTime.UtcNow.Ticks-p.LastUpdate)/(float)TimeSpan.TicksPerSecond;if(delta<0f)delta=0;p.TickUpdate(delta);return p;}}[ProtoContract]internal class n_SerializableFireEvents:PacketBase{public n_SerializableFireEvents(){}public n_SerializableFireEvents(List<Projectile>projectiles){FirerEntityId=new long[projectiles.Count];UniqueProjectileId=new uint[projectiles.Count];directionX=new float[projectiles.Count];directionY=new float[projectiles.Count];directionZ=new float[projectiles.Count];targetEntities=new long[projectiles.Count];bool needsTargetEntities=false;for(int i=0;i<projectiles.Count;i++){FirerEntityId[i]=projectiles[i].Firer;UniqueProjectileId[i]=projectiles[i].Id;directionX[i]=(float)projectiles[i].Direction.X;directionY[i]=(float)projectiles[i].Direction.Y;directionZ[i]=(float)projectiles[i].Direction.Z;if(projectiles[i].Guidance!=null&&projectiles[i].Guidance.GetTarget()!=null){needsTargetEntities=true;targetEntities[i]=projectiles[i].Guidance.GetTarget().EntityId;}}if(!needsTargetEntities)targetEntities=null;MillisecondsFromMidnight=(int)DateTime.UtcNow.TimeOfDay.TotalMilliseconds;}public n_SerializableFireEvents(long[]firerWeaponId,uint[]uniqueProjectileId,Vector3[]direction){FirerEntityId=firerWeaponId;UniqueProjectileId=uniqueProjectileId;directionX=new float[direction.Length];directionY=new float[direction.Length];directionZ=new float[direction.Length];for(int i=0;i<direction.Length;i++){directionX[i]=direction[i].X;directionY[i]=direction[i].Y;directionZ[i]=direction[i].Z;}}[ProtoMember(21)]public long[]FirerEntityId;[ProtoMember(22)]public uint[]UniqueProjectileId;[ProtoMember(23)]private float[]directionX;[ProtoMember(24)]private float[]directionY;[ProtoMember(25)]private float[]directionZ;[ProtoMember(26)]private long[]targetEntities;public Vector3[]Direction(){Vector3[]array=new Vector3[directionX.Length];for(int i=0;i<array.Length;i++)array[i]=new Vector3(directionX[i],directionY[i],directionZ[i]);return array;}public Vector3 Direction(int index){return new Vector3(directionX[index],directionY[index],directionZ[index]);}[ProtoMember(27)]public int MillisecondsFromMidnight;public Projectile ToProjectile(int index){SorterWeaponLogic weapon=WeaponManager.I.GetWeapon(FirerEntityId[index]);if(weapon==null){SoftHandle.RaiseSyncException("Attempted to call FireEvent for a weapon that doesn't exist!");return null;}Projectile p=new Projectile(weapon.Magazines.SelectedAmmoId,weapon.CalcMuzzleMatrix(weapon.NextMuzzleIdx).Translation,Direction(index),FirerEntityId[index],weapon?.SorterWep?.CubeGrid.LinearVelocity??Vector3D.Zero){LastUpdate=DateTime.UtcNow.Date.AddMilliseconds(MillisecondsFromMidnight-HeartData.I.Net.ServerTimeOffset).Ticks};if(targetEntities!=null&&p.Guidance!=null){p.Guidance.SetTarget(MyAPIGateway.Entities.GetEntityById(targetEntities[index]));}float delta=(float)((DateTime.UtcNow.TimeOfDay.TotalMilliseconds-(MillisecondsFromMidnight-HeartData.I.Net.ServerTimeOffset))/1000d);if(delta<0f)delta=0;p.TickUpdate(delta);return p;}public override void Received(ulong SenderSteamId){ProjectileManager.I.Network.Recieve_FireEvent(this);}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Linq;using VRage.Game.ModAPI;using VRage.Utils;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.ProjectileNetworking{public class ProjectileNetwork{const int ProjectilesPerPacket=50;const int TicksPerPacket=4;private Dictionary<ulong,PriorityQueue<Projectile,ushort>>SyncStream_PP=new Dictionary<ulong,PriorityQueue<Projectile,ushort>>();private Dictionary<ulong,PriorityQueue<Projectile,ushort>>SyncStream_FireEvent=new Dictionary<ulong,PriorityQueue<Projectile,ushort>>();public void QueueSync_PP(Projectile projectile,int detailLevel=0){foreach(var player in HeartData.I.Players)QueueSync_PP(player,projectile,detailLevel);}public void QueueSync_PP(IMyPlayer player,Projectile projectile,int detailLevel=0){if(!SyncStream_PP.ContainsKey(player.SteamUserId))return;SyncStream_PP[player.SteamUserId].Enqueue(projectile);}public void QueueSync_FireEvent(Projectile projectile){foreach(var player in HeartData.I.Players)QueueSync_FireEvent(player,projectile);}public void QueueSync_FireEvent(IMyPlayer player,Projectile projectile){if(!SyncStream_FireEvent.ContainsKey(player.SteamUserId))return;SyncStream_FireEvent[player.SteamUserId].Enqueue(projectile);HeartLog.Log("Enqueued fireEvent projectile "+projectile.Id);}internal void Recieve_PP(n_SerializableProjectileInfos projectileInfos){if(MyAPIGateway.Session.IsServer||MyAPIGateway.Session.Player?.Character==null)return;if(projectileInfos==null){SoftHandle.RaiseException("Null ProjectileInfos!",null,typeof(ProjectileNetwork));return;}if(projectileInfos.UniqueProjectileId==null)return;for(int i=0;i<projectileInfos.UniqueProjectileId.Length;i++){if(ProjectileManager.I.IsIdAvailable(projectileInfos.UniqueProjectileId[i])&&projectileInfos.DefinitionId!=null){if(projectileInfos.FirerEntityId!=null){WeaponManager.I.GetWeapon(projectileInfos.FirerEntityId[i])?.MuzzleFlash(true);}ProjectileManager.I.AddProjectile(projectileInfos.ToProjectile(i));}else{Projectile p=ProjectileManager.I.GetProjectile(projectileInfos.UniqueProjectileId[i]);if(p!=null){p.Position=projectileInfos.PlayerRelativePosition(i)+MyAPIGateway.Session.Player.Character.GetPosition();p.Direction=projectileInfos.Direction(i);p.LastUpdate=DateTime.UtcNow.Date.AddMilliseconds(projectileInfos.MillisecondsFromMidnight-HeartData.I.Net.ServerTimeOffset).Ticks;if(projectileInfos.ProjectileAge!=null)p.Age=projectileInfos.ProjectileAge[i];if(projectileInfos.TargetEntityId!=null){if(projectileInfos.TargetEntityId[i]==null)p.Guidance.SetTarget(null);else p.Guidance.SetTarget(MyAPIGateway.Entities.GetEntityById(projectileInfos.TargetEntityId[i]));}}else HeartData.I.Net.SendToServer(new n_ProjectileRequest(projectileInfos.UniqueProjectileId[i]));}}}internal void Recieve_FireEvent(n_SerializableFireEvents fireEvents){if(MyAPIGateway.Session.IsServer)return;if(fireEvents==null){SoftHandle.RaiseException("Null ProjectileInfos!",null,typeof(ProjectileNetwork));return;}if(fireEvents.UniqueProjectileId==null)return;for(int i=0;i<fireEvents.UniqueProjectileId.Length;i++){if(ProjectileManager.I.IsIdAvailable(fireEvents.UniqueProjectileId[i])){if(fireEvents.FirerEntityId!=null){WeaponManager.I.GetWeapon(fireEvents.FirerEntityId[i])?.MuzzleFlash(true);}Projectile p=ProjectileManager.I.AddProjectile(fireEvents.ToProjectile(i));}}}int AwaitedTicks=0;public void Update1(){AwaitedTicks++;if(AwaitedTicks%TicksPerPacket!=0||!(MyAPIGateway.Session.IsServer&&MyAPIGateway.Multiplayer.MultiplayerActive))return;foreach(var player in HeartData.I.Players){if(!SyncStream_PP.ContainsKey(player.SteamUserId)){SyncStream_PP.Add(player.SteamUserId,new PriorityQueue<Projectile,ushort>(PriorityQueueSelector));SyncStream_FireEvent.Add(player.SteamUserId,new PriorityQueue<Projectile,ushort>(PriorityQueueSelector));MyLog.Default.WriteLineAndConsole($"Heart Module: Registered player {player.SteamUserId}");}}foreach(ulong syncedPlayerSteamId in SyncStream_PP.Keys.ToList()){bool remove=true;foreach(var player in HeartData.I.Players){if(syncedPlayerSteamId==player.SteamUserId){SyncPlayerProjectiles(player);remove=false;}}if(remove){SyncStream_PP.Remove(syncedPlayerSteamId);SyncStream_FireEvent.Remove(syncedPlayerSteamId);MyLog.Default.WriteLineAndConsole($"Heart Module: Deregistered player {syncedPlayerSteamId}");}}}private void SyncPlayerProjectiles(IMyPlayer player){if(player.Character!=null){if(!SyncStream_PP.ContainsKey(player.SteamUserId)){SoftHandle.RaiseSyncException("Player "+player.DisplayName+" is missing projectile sync queue!");return;}List<Projectile>PPProjectiles=new List<Projectile>();for(int i=0;SyncStream_PP[player.SteamUserId].Count>0&&i<ProjectilesPerPacket;i++)PPProjectiles.Add(SyncStream_PP[player.SteamUserId].Dequeue());if(PPProjectiles.Count>0){n_SerializableProjectileInfos ppInfos=new n_SerializableProjectileInfos(PPProjectiles,player.Character);HeartData.I.Net.SendToPlayer(ppInfos,player.SteamUserId);}}if(SyncStream_FireEvent[player.SteamUserId].Count>0)HeartLog.Log("FEStream Count: "+SyncStream_FireEvent[player.SteamUserId].Count);List<Projectile>FEProjectiles=new List<Projectile>();for(int i=0;SyncStream_FireEvent[player.SteamUserId].Count>0&&i<ProjectilesPerPacket;i++)FEProjectiles.Add(SyncStream_FireEvent[player.SteamUserId].Dequeue());if(FEProjectiles.Count>0){n_SerializableFireEvents feInfos=new n_SerializableFireEvents(FEProjectiles);HeartData.I.Net.SendToPlayer(feInfos,player.SteamUserId);}}public void Init(){}public void Close(){}private static Func<Projectile,ushort>PriorityQueueSelector=(projectile)=>projectile.Definition.Networking.NetworkPriority;}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using Sandbox.ModAPI;using System.Collections.Generic;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses{[ProtoContract]public class n_ProjectileArray:PacketBase{[ProtoMember(21)]byte[][]Projectiles=new byte[0][];public n_ProjectileArray(){}public n_ProjectileArray(List<n_SerializableProjectile>projectiles){SerializeProjectiles(projectiles.ToArray());}public n_ProjectileArray(n_SerializableProjectile[]projectiles){SerializeProjectiles(projectiles);}private void SerializeProjectiles(n_SerializableProjectile[]projectiles){Projectiles=new byte[projectiles.Length][];for(int i=0;i<Projectiles.Length;i++)Projectiles[i]=MyAPIGateway.Utilities.SerializeToBinary(projectiles[i]);}private n_SerializableProjectile[]DeSerializeProjectiles(){n_SerializableProjectile[]deSerialized=new n_SerializableProjectile[Projectiles.Length];for(int i=0;i<Projectiles.Length;i++)deSerialized[i]=MyAPIGateway.Utilities.SerializeFromBinary<n_SerializableProjectile>(Projectiles[i]);return deSerialized;}public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer)return;foreach(var projectile in DeSerializeProjectiles())projectile?.Received(SenderSteamId);}}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using Sandbox.ModAPI;using VRage.Game.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses{[ProtoContract]internal class n_ProjectileRequest:PacketBase{[ProtoMember(21)]uint projectileId;public n_ProjectileRequest(){}public n_ProjectileRequest(uint projectileId){this.projectileId=projectileId;}public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer){Projectile p=ProjectileManager.I.GetProjectile(projectileId);if(p!=null){IMyPlayer player=HeartUtils.GetPlayerFromSteamId(SenderSteamId);if(player!=null)ProjectileManager.I.Network.QueueSync_PP(player,p,0);}}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using Sandbox.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses{[ProtoContract]public class n_SerializableProjectile:PacketBase{[ProtoMember(22)]public bool?IsActive=true;[ProtoMember(23)]public uint Id;[ProtoMember(211)]public uint TimestampFromMidnight;[ProtoMember(24)]public int?DefinitionId;[ProtoMember(25)]public Vector3D?Position;[ProtoMember(26)]public Vector3?Direction;[ProtoMember(27)]public Vector3?InheritedVelocity;[ProtoMember(28)]public float?Velocity;[ProtoMember(212)]public long?Firer;public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer)return;ProjectileManager.I.UpdateProjectileSync(this);}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Utility;using ProtoBuf;using Sandbox.Game.Entities;using System;using VRage.Game.Entity;using VRage.Utils;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses{[ProtoContract]public class ProjectileDefinitionBase{public ProjectileDefinitionBase(){}[ProtoMember(1)]public string Name="";[ProtoMember(2)]public Ungrouped Ungrouped;[ProtoMember(3)]public Damage Damage;[ProtoMember(4)]public PhysicalProjectile PhysicalProjectile;[ProtoMember(5)]public Visual Visual;[ProtoMember(6)]public Audio Audio;[ProtoMember(7)]public Guidance[]Guidance=new Guidance[0];[ProtoMember(8)]public Networking Networking;[ProtoIgnore]public LiveMethods LiveMethods=new LiveMethods();}[ProtoContract]public struct Ungrouped{[ProtoMember(1)]public float ReloadPowerUsage;[ProtoMember(2)]public int Recoil;[ProtoMember(3)]public int Impulse;[ProtoMember(4)]public int ShotsPerMagazine;[ProtoMember(5)]public string MagazineItemToConsume;[ProtoMember(6)]public ushort SyncPriority;}[ProtoContract]public struct Networking{[ProtoMember(1)]public NetworkingModeEnum NetworkingMode;[ProtoMember(2)]public bool DoConstantSync;[ProtoMember(3)]public ushort NetworkPriority;public enum NetworkingModeEnum{NoNetworking,FireEvent,FullSync}}[ProtoContract]public struct Damage{[ProtoMember(1)]public float SlimBlockDamageMod;[ProtoMember(2)]public float FatBlockDamageMod;[ProtoMember(3)]public float BaseDamage;[ProtoMember(4)]public float AreaDamage;[ProtoMember(5)]public float DamageToProjectiles;[ProtoMember(6)]public int MaxImpacts;[ProtoMember(7)]public float AreaRadius;[ProtoMember(8)]public float DamageToProjectilesRadius;}[ProtoContract]public struct PhysicalProjectile{[ProtoMember(1)]public float Velocity;[ProtoMember(2)]public float Acceleration;[ProtoMember(3)]public float Health;[ProtoMember(4)]public float MaxTrajectory;[ProtoMember(5)]public float MaxLifetime;[ProtoMember(6)]public bool IsHitscan;[ProtoMember(7)]public float ProjectileSize;[ProtoMember(8)]public float VelocityVariance;[ProtoMember(9)]public float AccuracyVarianceMultiplier;[ProtoMember(10)]public float GravityInfluenceMultiplier;}[ProtoContract]public struct Visual{[ProtoMember(1)]public string Model;[ProtoMember(2)]public MyStringId TrailTexture;[ProtoMember(7)]public float TrailLength;[ProtoMember(9)]public float TrailWidth;[ProtoMember(8)]public Vector4 TrailColor;[ProtoMember(3)]public float TrailFadeTime;[ProtoMember(4)]public string AttachedParticle;[ProtoMember(5)]public string ImpactParticle;[ProtoMember(6)]public float VisibleChance;public bool HasModel=>!Model?.Equals("")??false;public bool HasTrail=>TrailTexture!=null&&TrailLength>0&&TrailWidth>0&&TrailColor!=null&&TrailColor!=Vector4.Zero;public bool HasAttachedParticle=>!AttachedParticle?.Equals("")??false;public bool HasImpactParticle=>!ImpactParticle?.Equals("")??false;}[ProtoContract]public struct Audio{[ProtoMember(1)]public string TravelSound;[ProtoMember(2)]public float TravelMaxDistance;[ProtoMember(3)]public float TravelVolume;[ProtoMember(4)]public string ImpactSound;[ProtoMember(5)]public float SoundChance;public bool HasTravelSound=>!TravelSound?.Equals("")??false&&SoundChance>0&&TravelMaxDistance>0&&TravelVolume>0;public bool HasImpactSound=>!ImpactSound?.Equals("")??false&&SoundChance>0;public MySoundPair TravelSoundPair=>new MySoundPair(TravelSound);public MySoundPair ImpactSoundPair=>new MySoundPair(ImpactSound);}[ProtoContract]public struct Guidance{[ProtoMember(1)]public float TriggerTime;[ProtoMember(2)]public float ActiveDuration;[ProtoMember(3)]public bool UseAimPrediction;[ProtoMember(4)]public float MaxTurnRate;[ProtoMember(6)]public IFF_Enum IFF;[ProtoMember(7)]public bool DoRaycast;[ProtoMember(8)]public float CastCone;[ProtoMember(9)]public float CastDistance;[ProtoMember(10)]public float Velocity;[ProtoMember(11)]public float Inaccuracy;[ProtoMember(12)]public float MaxGs;[ProtoMember(13)]public Definition_PID?PID;}public class LiveMethods{public Action<uint,MyEntity>OnSpawn;public Action<uint,Vector3D,Vector3D,MyEntity>OnImpact;public Action<uint>OnEndOfLife;}[ProtoContract]public struct Definition_PID{[ProtoMember(1)]public float kProportional;[ProtoMember(2)]public float kIntegral;[ProtoMember(3)]public float kDerivative;public PID GetPID(){return new PID(kProportional,kIntegral,kDerivative);}}}﻿using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.ModAPI;using System;using System.Collections.Generic;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.ResourceSystem{internal class WeaponResourceSystem{private readonly WeaponDefinitionBase _weaponDefinition;private readonly SorterWeaponLogic _weaponLogic;private Dictionary<string,float>_resources;public WeaponResourceSystem(WeaponDefinitionBase weaponDefinition,SorterWeaponLogic weaponLogic){_weaponDefinition=weaponDefinition;_weaponLogic=weaponLogic;_resources=new Dictionary<string,float>();if(_weaponDefinition.Loading.Resources==null){return;}foreach(var resource in _weaponDefinition.Loading.Resources){if(string.IsNullOrEmpty(resource.ResourceType)){throw new Exception("Invalid resource type defined in the weapon definition.");}if(resource.ResourceStorage<=0){throw new Exception($"Invalid resource storage value for {resource.ResourceType}.");}_resources.Add(resource.ResourceType,resource.ResourceStorage);}}public bool CanShoot(){if(_weaponLogic==null||_weaponLogic.SorterWep==null)return false;if(_weaponLogic.SorterWep.CubeGrid==null||_weaponLogic.SorterWep.CubeGrid.Physics==null)return false;if(_weaponDefinition.Loading.Resources==null)return true;foreach(var resource in _weaponDefinition.Loading.Resources){if(!_resources.ContainsKey(resource.ResourceType)){return false;}if(_resources[resource.ResourceType]<resource.MinResourceBeforeFire){if(MyAPIGateway.Multiplayer.IsServer){ShowNotification($"Insufficient {resource.ResourceType} to fire. Current {resource.ResourceType} count: {_resources[resource.ResourceType]}",1000);}return false;}}return true;}public void ConsumeResources(){if(_weaponLogic.SorterWep.CubeGrid.Physics==null)return;if(_weaponDefinition.Loading.Resources==null)return;foreach(var resource in _weaponDefinition.Loading.Resources){_resources[resource.ResourceType]-=resource.ResourcePerShot;if(_resources[resource.ResourceType]<0)_resources[resource.ResourceType]=0;}if(MyAPIGateway.Multiplayer.IsServer){ShowResourceStatus();}}public void RegenerateResources(float deltaTime){if(_weaponLogic.SorterWep.CubeGrid.Physics==null)return;if(_weaponDefinition.Loading.Resources==null)return;foreach(var resource in _weaponDefinition.Loading.Resources){_resources[resource.ResourceType]+=resource.ResourceGeneration*deltaTime;if(_resources[resource.ResourceType]>resource.ResourceStorage)_resources[resource.ResourceType]=resource.ResourceStorage;}if(MyAPIGateway.Multiplayer.IsServer){ShowResourceStatus();}}public void Update(float deltaTime){if(MyAPIGateway.Multiplayer.IsServer){RegenerateResources(deltaTime);}}private void ShowResourceStatus(){foreach(var resource in _weaponDefinition.Loading.Resources){ShowNotification($"Current {resource.ResourceType} count: {_resources[resource.ResourceType]}",1000);}}private void ShowNotification(string message,int duration){MyAPIGateway.Utilities.ShowNotification(message,duration);}public void Unload(){_resources=null;}}}﻿using RichHudFramework.Internal;using RichHudFramework.IO;using Sandbox.ModAPI;using System;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using ClientData=VRage.MyTuple<string,System.Action<int,object>,System.Action,int>;using ServerData=VRage.MyTuple<System.Action,System.Func<int,object>,int>;namespace RichHudFramework.Client{using ExtendedClientData=MyTuple<ClientData,Action<Action>,ApiMemberAccessor>;public sealed class RichHudClient:RichHudComponentBase{public static readonly Vector4I versionID=new Vector4I(1,2,3,1);public const ClientSubtypes subtype=ClientSubtypes.Full;private const long modID=1965654081,queueID=1314086443;private const int vID=10;public static bool Registered=>Instance!=null?Instance.registered:false;private static RichHudClient Instance{get;set;}private readonly ExtendedClientData regMessage;private readonly Action InitAction,OnResetAction;private bool regFail,registered,inQueue;private Func<int,object>GetApiDataFunc;private Action UnregisterAction;private RichHudClient(string modName,Action InitCallback,Action ResetCallback):base(false,true){InitAction=InitCallback;OnResetAction=ResetCallback;ExceptionHandler.ModName=modName;if(LogIO.FileName==null||LogIO.FileName=="modLog.txt")LogIO.FileName=$"richHudLog.txt";var clientData=new ClientData(modName,MessageHandler,RemoteReset,vID);regMessage=new ExtendedClientData(clientData,ExceptionHandler.Run,GetOrSetMember);}public static void Init(string modName,Action InitCallback,Action ResetCallback){if(Instance==null){Instance=new RichHudClient(modName,InitCallback,ResetCallback);Instance.RequestRegistration();if(!Registered&&!Instance.regFail){Instance.EnterQueue();}}}public static void Reset(){if(Registered)ExceptionHandler.ReloadClients();}private void MessageHandler(int typeValue,object message){MsgTypes msgType=(MsgTypes)typeValue;if(!regFail){if(!Registered){if((msgType==MsgTypes.RegistrationSuccessful)&&message is ServerData){var data=(ServerData)message;UnregisterAction=data.Item1;GetApiDataFunc=data.Item2;registered=true;ExceptionHandler.Run(InitAction);ExceptionHandler.WriteToLog($"[RHF] Successfully registered with Rich HUD Master.");}else if(msgType==MsgTypes.RegistrationFailed){if(message is string)ExceptionHandler.WriteToLog($"[RHF] Failed to register with Rich HUD Master. Message: {message as string}");else ExceptionHandler.WriteToLog($"[RHF] Failed to register with Rich HUD Master.");regFail=true;}}}}private object GetOrSetMember(object data,int memberEnum){switch((ClientDataAccessors)memberEnum){case ClientDataAccessors.GetVersionID:return versionID;case ClientDataAccessors.GetSubtype:return subtype;}return null;}private void RequestRegistration()=>MyAPIUtilities.Static.SendModMessage(modID,regMessage);private void EnterQueue()=>MyAPIUtilities.Static.RegisterMessageHandler(queueID,QueueHandler);private void ExitQueue()=>MyAPIUtilities.Static.UnregisterMessageHandler(queueID,QueueHandler);private void QueueHandler(object message){if(!(registered||regFail)){inQueue=true;RequestRegistration();}}public override void Update(){if(registered&&inQueue){ExitQueue();inQueue=false;}}public override void Close(){ExitQueue();Unregister();Instance=null;}private void RemoteReset(){ExceptionHandler.Run(()=>{if(registered){ExceptionHandler.ReloadClients();OnResetAction();}});}private void Unregister(){if(registered){registered=false;UnregisterAction();}}public abstract class ApiModule<T>:RichHudComponentBase{protected readonly ApiModuleTypes componentType;public ApiModule(ApiModuleTypes componentType,bool runOnServer,bool runOnClient):base(runOnServer,runOnClient){if(!Registered)throw new Exception("Types of ApiModule cannot be instantiated before RichHudClient is initialized.");this.componentType=componentType;}protected T GetApiData(){object data=Instance?.GetApiDataFunc((int)componentType);return(T)data;}}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;namespace RichHudFramework{using EventData=MyTuple<bool,Action>;namespace UI.Client{public sealed partial class BindManager{private partial class BindGroup{public class Bind:IBind{public string Name=>_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.Name)as string;public int Index=>index.Y;public bool Analog=>(bool)_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.Analog);public bool IsPressed=>_instance.IsBindPressedFunc(index,(int)BindAccesssors.IsPressed);public bool IsPressedAndHeld=>_instance.IsBindPressedFunc(index,(int)BindAccesssors.IsPressedAndHeld);public bool IsNewPressed=>_instance.IsBindPressedFunc(index,(int)BindAccesssors.IsNewPressed);public bool IsReleased=>_instance.IsBindPressedFunc(index,(int)BindAccesssors.IsReleased);public event EventHandler NewPressed;public event EventHandler PressedAndHeld;public event EventHandler Released;private readonly Vector2I index;public Bind(Vector2I index){this.index=index;_instance.GetOrSetBindMemberFunc(index,new EventData(true,OnNewPressed),(int)BindAccesssors.OnNewPress);_instance.GetOrSetBindMemberFunc(index,new EventData(true,OnPressedAndHeld),(int)BindAccesssors.OnPressAndHold);_instance.GetOrSetBindMemberFunc(index,new EventData(true,OnReleased),(int)BindAccesssors.OnRelease);}private void OnNewPressed(){NewPressed?.Invoke(this,EventArgs.Empty);}private void OnPressedAndHeld(){PressedAndHeld?.Invoke(this,EventArgs.Empty);}private void OnReleased(){Released?.Invoke(this,EventArgs.Empty);}public List<IControl>GetCombo(){var indices=_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.GetCombo)as List<int>;var combo=new List<IControl>(indices.Count);for(int n=0;n<indices.Count;n++)combo.Add(_instance.controls[indices[n]]);return combo;}public List<int>GetComboIndices()=>_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.GetCombo)as List<int>;public bool TrySetCombo(IReadOnlyList<IControl>combo,bool strict=true,bool silent=true){var indices=new int[combo.Count];for(int n=0;n<combo.Count;n++)indices[n]=combo[n].Index;var comboData=new MyTuple<IReadOnlyList<int>,bool,bool>(indices,strict,silent);return(bool)_instance.GetOrSetBindMemberFunc(index,comboData,(int)BindAccesssors.TrySetComboWithIndices);}public bool TrySetCombo(IReadOnlyList<int>combo,bool strict=true,bool silent=true){var comboData=new MyTuple<IReadOnlyList<int>,bool,bool>(combo,strict,silent);return(bool)_instance.GetOrSetBindMemberFunc(index,comboData,(int)BindAccesssors.TrySetComboWithIndices);}public bool TrySetCombo(IReadOnlyList<string>combo,bool strict=true,bool silent=true){var comboData=new MyTuple<IReadOnlyList<string>,bool,bool>(combo,strict,silent);return(bool)_instance.GetOrSetBindMemberFunc(index,comboData,(int)BindAccesssors.TrySetComboWithNames);}public void ClearCombo()=>_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.ClearCombo);public void ClearSubscribers()=>_instance.GetOrSetBindMemberFunc(index,null,(int)BindAccesssors.ClearSubscribers);public override bool Equals(object obj){return((Bind)obj).index==index;}public override int GetHashCode(){return index.GetHashCode();}}}}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using BindDefinitionData=VRage.MyTuple<string,string[]>;namespace RichHudFramework{namespace UI.Client{public sealed partial class BindManager{private partial class BindGroup:ReadOnlyApiCollection<IBind>,IBindGroup{public IBind this[string name]{get{IBind bind=GetBind(name);if(bind==null)throw new Exception($"Bind: {name} was not found in bind group {Name}.");else return bind;}}public string Name=>_instance.GetOrSetGroupMemberFunc(Index,null,(int)BindGroupAccessors.Name)as string;public int Index{get;}public object ID=>_instance.GetOrSetGroupMemberFunc(Index,null,(int)BindGroupAccessors.ID);public BindGroup(int index):base(x=>new Bind(new Vector2I(index,x)),()=>_instance.GetBindCountFunc(index)){Index=index;}public bool DoesBindExist(string name)=>(bool)_instance.GetOrSetGroupMemberFunc(Index,name,(int)BindGroupAccessors.DoesBindExist);public bool DoesComboConflict(IReadOnlyList<IControl>newCombo,IBind exception=null){var indices=new int[newCombo.Count];for(int n=0;n<newCombo.Count;n++)indices[n]=newCombo[n].Index;var data=new MyTuple<IReadOnlyList<int>,int>(indices,exception?.Index??-1);return(bool)_instance.GetOrSetGroupMemberFunc(Index,data,(int)BindGroupAccessors.DoesComboConflict);}public bool DoesComboConflict(IReadOnlyList<int>newCombo,int exception=-1){var data=new MyTuple<IReadOnlyList<int>,int>(newCombo,exception);return(bool)_instance.GetOrSetGroupMemberFunc(Index,data,(int)BindGroupAccessors.DoesComboConflict);}public bool TryLoadBindData(IReadOnlyList<BindDefinitionData>bindData)=>(bool)_instance.GetOrSetGroupMemberFunc(Index,bindData,(int)BindGroupAccessors.TryLoadBindData);public bool TryLoadBindData(IReadOnlyList<BindDefinition>bindData){var defData=new BindDefinitionData[bindData.Count];for(int n=0;n<bindData.Count;n++)defData[n]=new BindDefinitionData(bindData[n].name,bindData[n].controlNames);return(bool)_instance.GetOrSetGroupMemberFunc(Index,defData,(int)BindGroupAccessors.TryLoadBindData);}public void RegisterBinds(IReadOnlyList<string>bindNames)=>_instance.GetOrSetGroupMemberFunc(Index,bindNames,(int)BindGroupAccessors.RegisterBindNames);public void RegisterBinds(BindGroupInitializer bindData){foreach(var bind in bindData)_instance.GetOrSetGroupMemberFunc(Index,bind,(int)BindGroupAccessors.AddBindWithIndices);}public void RegisterBinds(IReadOnlyList<MyTuple<string,IReadOnlyList<int>>>bindData)=>_instance.GetOrSetGroupMemberFunc(Index,bindData,(int)BindGroupAccessors.RegisterBindIndices);public void RegisterBinds(IReadOnlyList<BindDefinition>bindData){var defData=new BindDefinitionData[bindData.Count];for(int n=0;n<bindData.Count;n++)defData[n]=new BindDefinitionData(bindData[n].name,bindData[n].controlNames);_instance.GetOrSetGroupMemberFunc(Index,defData,(int)BindGroupAccessors.RegisterBindDefinitions);}public void RegisterBinds(IReadOnlyList<BindDefinitionData>bindData)=>_instance.GetOrSetGroupMemberFunc(Index,bindData,(int)BindGroupAccessors.RegisterBindDefinitions);public IBind GetBind(string name){var index=(Vector2I)_instance.GetOrSetGroupMemberFunc(Index,name,(int)BindGroupAccessors.GetBindFromName);return index.Y!=-1?this[index.Y]:null;}public IBind AddBind(string bindName,IReadOnlyList<int>combo){var index=(Vector2I)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,combo),(int)BindGroupAccessors.AddBindWithIndices);return this[index.Y];}public IBind AddBind(string bindName,IReadOnlyList<string>combo){var index=(Vector2I)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<string>>(bindName,combo),(int)BindGroupAccessors.AddBindWithNames);return this[index.Y];}public IBind AddBind(string bindName,IReadOnlyList<ControlData>combo=null){var indices=new int[combo.Count];for(int n=0;n<combo.Count;n++)indices[n]=combo[n].index;var index=(Vector2I)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,indices),(int)BindGroupAccessors.AddBindWithIndices);return this[index.Y];}public IBind AddBind(string bindName,IReadOnlyList<IControl>combo=null){var indices=new int[combo.Count];for(int n=0;n<combo.Count;n++)indices[n]=combo[n].Index;var index=(Vector2I)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,indices),(int)BindGroupAccessors.AddBindWithIndices);return this[index.Y];}public bool TryRegisterBind(string bindName,out IBind newBind){int index=(int)_instance.GetOrSetGroupMemberFunc(Index,bindName,(int)BindGroupAccessors.TryRegisterBindName);if(index!=-1){newBind=this[index];return true;}else{newBind=null;return false;}}public bool TryRegisterBind(string bindName,IReadOnlyList<int>combo,out IBind newBind){int index=(int)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,combo),(int)BindGroupAccessors.TryRegisterBindWithIndices);if(index!=-1){newBind=this[index];return true;}else{newBind=null;return false;}}public bool TryRegisterBind(string bindName,out IBind newBind,IReadOnlyList<int>combo){int index=(int)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,combo),(int)BindGroupAccessors.TryRegisterBindWithIndices);if(index!=-1){newBind=this[index];return true;}else{newBind=null;return false;}}public bool TryRegisterBind(string bindName,out IBind bind,IReadOnlyList<string>combo){int index=(int)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<string>>(bindName,combo),(int)BindGroupAccessors.TryRegisterBindWithNames);if(index!=-1){bind=this[index];return true;}else{bind=null;return false;}}public bool TryRegisterBind(string bindName,out IBind newBind,IReadOnlyList<IControl>combo){var indices=new int[combo.Count];for(int n=0;n<combo.Count;n++)indices[n]=combo[n].Index;int index=(int)_instance.GetOrSetGroupMemberFunc(Index,new MyTuple<string,IReadOnlyList<int>>(bindName,indices),(int)BindGroupAccessors.TryRegisterBindWithIndices);if(index!=-1){newBind=this[index];return true;}else{newBind=null;return false;}}public BindDefinition[]GetBindDefinitions(){var bindData=_instance.GetOrSetGroupMemberFunc(Index,null,(int)BindGroupAccessors.GetBindData)as BindDefinitionData[];var definitions=new BindDefinition[bindData.Length];for(int n=0;n<bindData.Length;n++)definitions[n]=new BindDefinition(bindData[n].Item1,bindData[n].Item2);return definitions;}public BindDefinitionData[]GetBindData()=>_instance.GetOrSetGroupMemberFunc(Index,null,(int)BindGroupAccessors.GetBindData)as BindDefinitionData[];public void ClearSubscribers()=>_instance.GetOrSetGroupMemberFunc(Index,null,(int)BindGroupAccessors.ClearSubscribers);public override bool Equals(object obj){return Index.Equals(obj);}public override int GetHashCode(){return Index.GetHashCode();}}}}}﻿using System;using System.Collections.Generic;using VRage;using VRage.Input;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using Client;namespace UI.Client{using BindClientMembers=MyTuple<ApiMemberAccessor,MyTuple<Func<int,object,int,object>,Func<int>>,MyTuple<Func<Vector2I,object,int,object>,Func<int,int>>,Func<Vector2I,int,bool>,MyTuple<Func<int,int,object>,Func<int>>,Action>;public sealed partial class BindManager:RichHudClient.ApiModule<BindClientMembers>{public static IReadOnlyList<IBindGroup>Groups=>Instance.groups;public static IReadOnlyList<IControl>Controls=>Instance.controls;public static SeBlacklistModes BlacklistMode{get{if(_instance==null)Init();return(SeBlacklistModes)_instance.GetOrSetMemberFunc(null,(int)BindClientAccessors.RequestBlacklistMode);}set{if(_instance==null)Init();lastBlacklist=value;_instance.GetOrSetMemberFunc(value,(int)BindClientAccessors.RequestBlacklistMode);}}public static bool IsChatOpen=>(bool)_instance.GetOrSetMemberFunc(null,(int)BindClientAccessors.IsChatOpen);private static BindManager Instance{get{Init();return _instance;}}private static BindManager _instance;private readonly Func<int,object,int,object>GetOrSetGroupMemberFunc;private readonly Func<int>GetGroupCountFunc;private readonly Func<Vector2I,object,int,object>GetOrSetBindMemberFunc;private readonly Func<Vector2I,int,bool>IsBindPressedFunc;private readonly Func<int,int>GetBindCountFunc;private readonly Func<int,int,object>GetControlMember;private readonly Func<int>GetControlCountFunc;private readonly ApiMemberAccessor GetOrSetMemberFunc;private readonly Action UnloadAction;private readonly ReadOnlyApiCollection<IBindGroup>groups;private readonly ReadOnlyApiCollection<IControl>controls;private static SeBlacklistModes lastBlacklist,tmpBlacklist;private BindManager():base(ApiModuleTypes.BindManager,false,true){var clientData=GetApiData();GetOrSetMemberFunc=clientData.Item1;UnloadAction=clientData.Item6;GetOrSetGroupMemberFunc=clientData.Item2.Item1;GetGroupCountFunc=clientData.Item2.Item2;IsBindPressedFunc=clientData.Item4;GetOrSetBindMemberFunc=clientData.Item3.Item1;GetBindCountFunc=clientData.Item3.Item2;GetControlMember=clientData.Item5.Item1;GetControlCountFunc=clientData.Item5.Item2;groups=new ReadOnlyApiCollection<IBindGroup>(x=>new BindGroup(x),GetGroupCountFunc);controls=new ReadOnlyApiCollection<IControl>(x=>new Control(x),GetControlCountFunc);}public static void Init(){if(_instance==null){_instance=new BindManager();}}public override void Close(){UnloadAction?.Invoke();_instance=null;}public static void RequestTempBlacklist(SeBlacklistModes mode){tmpBlacklist|=mode;}public override void Draw(){GetOrSetMemberFunc(lastBlacklist|tmpBlacklist,(int)BindClientAccessors.RequestBlacklistMode);tmpBlacklist=SeBlacklistModes.None;}public static IBindGroup GetOrCreateGroup(string name){var index=(int)Instance.GetOrSetMemberFunc(name,(int)BindClientAccessors.GetOrCreateGroup);return index!=-1?Groups[index]:null;}public static IBindGroup GetBindGroup(string name){var index=(int)Instance.GetOrSetMemberFunc(name,(int)BindClientAccessors.GetBindGroup);return index!=-1?Groups[index]:null;}public static IControl GetControl(string name){var index=(int)Instance.GetOrSetMemberFunc(name,(int)BindClientAccessors.GetControlByName);return index!=-1?Controls[index]:null;}public static IControl[]GetCombo(IList<string>names){IControl[]combo=new IControl[names.Count];for(int n=0;n<names.Count;n++)combo[n]=GetControl(names[n]);return combo;}public static IControl[]GetCombo(IList<ControlData>indices){IControl[]combo=new IControl[indices.Count];for(int n=0;n<indices.Count;n++)combo[n]=Controls[indices[n].index];return combo;}public static IControl[]GetCombo(IList<int>indices){IControl[]combo=new IControl[indices.Count];for(int n=0;n<indices.Count;n++)combo[n]=Controls[indices[n]];return combo;}public static int[]GetComboIndices(IList<string>controlNames)=>Instance.GetOrSetMemberFunc(controlNames,(int)BindClientAccessors.GetComboIndices)as int[];public static IControl GetControl(MyKeys seKey)=>Controls[(int)seKey];public static IControl GetControl(RichHudControls rhdKey)=>Controls[(int)rhdKey];public static int[]GetComboIndices(IList<IControl>controls){int[]indices=new int[controls.Count];for(int n=0;n<controls.Count;n++)indices[n]=controls[n].Index;return indices;}public static int[]GetComboIndices(IList<ControlData>controls){int[]indices=new int[controls.Count];for(int n=0;n<controls.Count;n++)indices[n]=controls[n].index;return indices;}}}}﻿namespace RichHudFramework{namespace UI.Client{public sealed partial class BindManager{private class Control:IControl{public string Name=>_instance.GetControlMember(Index,(int)ControlAccessors.Name)as string;public string DisplayName=>_instance.GetControlMember(Index,(int)ControlAccessors.DisplayName)as string;public int Index{get;}public bool IsPressed=>(bool)(_instance.GetControlMember(Index,(int)ControlAccessors.IsPressed)??false);public bool IsNewPressed=>(bool)(_instance.GetControlMember(Index,(int)ControlAccessors.IsNewPressed)??false);public bool IsReleased=>(bool)(_instance.GetControlMember(Index,(int)ControlAccessors.IsReleased)??false);public bool Analog{get;}public Control(int index){this.Index=index;}public override bool Equals(object obj){return(obj as Control).Index==Index;}public override int GetHashCode(){return Index.GetHashCode();}}}}}﻿using System;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using HudSpaceDelegate=System.Func<VRage.MyTuple<bool,float,VRageMath.MatrixD>>;namespace RichHudFramework{using CursorMembers=MyTuple<Func<HudSpaceDelegate,bool>,Func<float,HudSpaceDelegate,bool>,Func<ApiMemberAccessor,bool>,Func<ApiMemberAccessor,bool>,Func<ApiMemberAccessor,bool>,ApiMemberAccessor>;namespace UI.Client{public sealed partial class HudMain{private class HudCursor:ICursor{public bool Visible{get;private set;}public bool IsCaptured=>(bool)GetOrSetMemberFunc(null,(int)HudCursorAccessors.IsCaptured);public bool IsToolTipRegistered{get;private set;}public Vector2 ScreenPos{get;private set;}public Vector3D WorldPos{get;private set;}public LineD WorldLine{get;private set;}private readonly Func<HudSpaceDelegate,bool>IsCapturingSpaceFunc;private readonly Func<float,HudSpaceDelegate,bool>TryCaptureHudSpaceFunc;private readonly Func<ApiMemberAccessor,bool>IsCapturingFunc;private readonly Func<ApiMemberAccessor,bool>TryCaptureFunc;private readonly Func<ApiMemberAccessor,bool>TryReleaseFunc;private readonly ApiMemberAccessor GetOrSetMemberFunc;public HudCursor(CursorMembers members){IsCapturingSpaceFunc=members.Item1;TryCaptureHudSpaceFunc=members.Item2;IsCapturingFunc=members.Item3;TryCaptureFunc=members.Item4;TryReleaseFunc=members.Item5;GetOrSetMemberFunc=members.Item6;}public void Update(){Visible=(bool)GetOrSetMemberFunc(null,(int)HudCursorAccessors.Visible);ScreenPos=(Vector2)GetOrSetMemberFunc(null,(int)HudCursorAccessors.ScreenPos);WorldPos=(Vector3D)GetOrSetMemberFunc(null,(int)HudCursorAccessors.WorldPos);WorldLine=(LineD)GetOrSetMemberFunc(null,(int)HudCursorAccessors.WorldLine);IsToolTipRegistered=(bool)GetOrSetMemberFunc(null,(int)HudCursorAccessors.IsToolTipRegistered);}public bool IsCapturingSpace(HudSpaceDelegate GetHudSpaceFunc)=>IsCapturingSpaceFunc(GetHudSpaceFunc);public bool TryCaptureHudSpace(float depthSquared,HudSpaceDelegate GetHudSpaceFunc)=>TryCaptureHudSpaceFunc(depthSquared,GetHudSpaceFunc);public void CaptureHudSpace(float depthSquared,HudSpaceDelegate GetHudSpaceFunc)=>TryCaptureHudSpaceFunc(depthSquared,GetHudSpaceFunc);public void Capture(ApiMemberAccessor capturedElement)=>TryCaptureFunc(capturedElement);public bool IsCapturing(ApiMemberAccessor capturedElement)=>IsCapturingFunc(capturedElement);public bool TryCapture(ApiMemberAccessor capturedElement)=>TryCaptureFunc(capturedElement);public bool TryRelease(ApiMemberAccessor capturedElement)=>TryReleaseFunc(capturedElement);public void RegisterToolTip(ToolTip toolTip)=>GetOrSetMemberFunc(toolTip.GetToolTipFunc,(int)HudCursorAccessors.RegisterToolTip);}}}}﻿using RichHudFramework.UI.Rendering;using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using FloatProp=VRage.MyTuple<System.Func<float>,System.Action<float>>;using HudSpaceDelegate=System.Func<VRage.MyTuple<bool,float,VRageMath.MatrixD>>;using RichStringMembers=VRage.MyTuple<System.Text.StringBuilder,VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>>;using Vec2Prop=VRage.MyTuple<System.Func<VRageMath.Vector2>,System.Action<VRageMath.Vector2>>;namespace RichHudFramework{using Client;using Internal;using CursorMembers=MyTuple<Func<HudSpaceDelegate,bool>,Func<float,HudSpaceDelegate,bool>,Func<ApiMemberAccessor,bool>,Func<ApiMemberAccessor,bool>,Func<ApiMemberAccessor,bool>,ApiMemberAccessor>;using TextBuilderMembers=MyTuple<MyTuple<Func<int,int,object>,Func<int>>,Func<Vector2I,int,object>,ApiMemberAccessor,Action<IList<RichStringMembers>,Vector2I>,Action<IList<RichStringMembers>>,Action>;namespace UI{using TextBoardMembers=MyTuple<TextBuilderMembers,FloatProp,Func<Vector2>,Func<Vector2>,Vec2Prop,Action<BoundingBox2,BoundingBox2,MatrixD[]>>;namespace Client{using HudClientMembers=MyTuple<CursorMembers,Func<TextBoardMembers>,ApiMemberAccessor,Action>;using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;public sealed partial class HudMain:RichHudClient.ApiModule<HudClientMembers>{public static HudParentBase Root{get{if(_instance==null)Init();return _instance.root;}}public static HudParentBase HighDpiRoot{get{if(_instance==null)Init();return _instance.highDpiRoot;}}public static ICursor Cursor{get{if(_instance==null)Init();return _instance.cursor;}}public static RichText ClipBoard{get{object value=Instance.GetOrSetMemberFunc(null,(int)HudMainAccessors.ClipBoard);if(value!=null)return new RichText(value as List<RichStringMembers>);else return default(RichText);}set{Instance.GetOrSetMemberFunc(value.apiData,(int)HudMainAccessors.ClipBoard);}}public static float ResScale{get;private set;}public static MatrixD PixelToWorld=>PixelToWorldRef[0];public static MatrixD[]PixelToWorldRef{get;private set;}public static float ScreenWidth{get;private set;}public static float ScreenHeight{get;private set;}public static float AspectRatio{get;private set;}public static float Fov{get;private set;}public static float FovScale{get;private set;}public static float UiBkOpacity{get;private set;}public static bool EnableCursor{get;set;}public static HudInputMode InputMode{get;private set;}private static HudMain Instance{get{Init();return _instance;}set{_instance=value;}}private static HudMain _instance;private readonly HudClientRoot root;private readonly ScaledSpaceNode highDpiRoot;private readonly HudCursor cursor;private bool enableCursorLast;private readonly Func<TextBoardMembers>GetTextBoardDataFunc;private readonly ApiMemberAccessor GetOrSetMemberFunc;private readonly Action UnregisterAction;private HudMain():base(ApiModuleTypes.HudMain,false,true){if(_instance!=null)throw new Exception("Only one instance of HudMain can exist at any give time!");_instance=this;var members=GetApiData();cursor=new HudCursor(members.Item1);GetTextBoardDataFunc=members.Item2;GetOrSetMemberFunc=members.Item3;UnregisterAction=members.Item4;PixelToWorldRef=new MatrixD[1];root=new HudClientRoot();highDpiRoot=new ScaledSpaceNode(root){UpdateScaleFunc=()=>ResScale};Action<List<HudUpdateAccessors>,byte>rootDelegate=root.GetUpdateAccessors,safeAccessor=(List<HudUpdateAccessors>list,byte depth)=>{ExceptionHandler.Run(()=>rootDelegate(list,depth));};GetOrSetMemberFunc(safeAccessor,(int)HudMainAccessors.GetUpdateAccessors);GetOrSetMemberFunc(new Action(()=>ExceptionHandler.Run(BeforeMasterDraw)),(int)HudMainAccessors.SetBeforeDrawCallback);GetOrSetMemberFunc(new Action(()=>ExceptionHandler.Run(AfterMasterDraw)),(int)HudMainAccessors.SetAfterDrawCallback);UpdateCache();}private static void Init(){BillBoardUtils.Init();if(_instance==null)new HudMain();}private void BeforeMasterDraw(){UpdateCache();cursor.Update();BillBoardUtils.BeginDraw();}private void AfterMasterDraw(){BillBoardUtils.FinishDraw();}public override void Close(){UnregisterAction?.Invoke();_instance=null;}private void UpdateCache(){ScreenWidth=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.ScreenWidth);ScreenHeight=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.ScreenHeight);AspectRatio=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.AspectRatio);ResScale=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.ResScale);Fov=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.Fov);FovScale=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.FovScale);PixelToWorldRef[0]=(MatrixD)GetOrSetMemberFunc(null,(int)HudMainAccessors.PixelToWorldTransform);UiBkOpacity=(float)GetOrSetMemberFunc(null,(int)HudMainAccessors.UiBkOpacity);InputMode=(HudInputMode)GetOrSetMemberFunc(null,(int)HudMainAccessors.InputMode);if(EnableCursor!=enableCursorLast)GetOrSetMemberFunc(EnableCursor,(int)HudMainAccessors.EnableCursor);else EnableCursor=(bool)GetOrSetMemberFunc(null,(int)HudMainAccessors.EnableCursor);enableCursorLast=EnableCursor;}public static byte GetFocusOffset(Action<byte>LoseFocusCallback)=>(byte)Instance.GetOrSetMemberFunc(LoseFocusCallback,(int)HudMainAccessors.GetFocusOffset);public static void GetInputFocus(Action LoseFocusCallback)=>Instance.GetOrSetMemberFunc(LoseFocusCallback,(int)HudMainAccessors.GetInputFocus);public static TextBoardMembers GetTextBoardData()=>Instance.GetTextBoardDataFunc();public static Vector2 GetPixelVector(Vector2 scaledVec){if(_instance==null)Init();return new Vector2((int)(scaledVec.X*ScreenWidth),(int)(scaledVec.Y*ScreenHeight));}public static Vector2 GetAbsoluteVector(Vector2 pixelVec){if(_instance==null)Init();return new Vector2(pixelVec.X/ScreenWidth,pixelVec.Y/ScreenHeight);}private class HudClientRoot:HudParentBase,IReadOnlyHudSpaceNode{public override bool Visible=>true;public bool DrawCursorInHudSpace{get;}public Vector3 CursorPos{get;private set;}public HudSpaceDelegate GetHudSpaceFunc{get;}public MatrixD PlaneToWorld=>PlaneToWorldRef[0];public MatrixD[]PlaneToWorldRef{get;}public Func<MatrixD>UpdateMatrixFunc{get;}public Func<Vector3D>GetNodeOriginFunc{get;}public bool IsInFront{get;}public bool IsFacingCamera{get;}public HudClientRoot(){accessorDelegates.Item2=new MyTuple<Func<ushort>,Func<Vector3D>>(()=>0,null);State|=HudElementStates.CanUseCursor;DrawCursorInHudSpace=true;HudSpace=this;IsInFront=true;IsFacingCamera=true;PlaneToWorldRef=new MatrixD[1];GetHudSpaceFunc=_instance.GetOrSetMemberFunc(null,(int)HudMainAccessors.GetPixelSpaceFunc)as HudSpaceDelegate;GetNodeOriginFunc=_instance.GetOrSetMemberFunc(null,(int)HudMainAccessors.GetPixelSpaceOriginFunc)as Func<Vector3D>;}protected override void Layout(){PlaneToWorldRef[0]=PixelToWorldRef[0];CursorPos=new Vector3(Cursor.ScreenPos.X,Cursor.ScreenPos.Y,0f);}}}}}namespace UI.Server{}}﻿using RichHudFramework.Client;using RichHudFramework.Internal;using System;using System.Collections.Generic;using VRage;using VRage.Utils;using VRageMath;using VRageRender;using BlendTypeEnum=VRageRender.MyBillboard.BlendTypeEnum;namespace RichHudFramework{namespace UI{using ApiMemberAccessor=System.Func<object,int,object>;using FlatTriangleBillboardData=MyTuple<BlendTypeEnum,Vector2I,MyStringId,MyTuple<Vector4,BoundingBox2?>,MyTuple<Vector2,Vector2,Vector2>,MyTuple<Vector2,Vector2,Vector2>>;using TriangleBillboardData=MyTuple<BlendTypeEnum,Vector2I,MyStringId,Vector4,MyTuple<Vector2,Vector2,Vector2>,MyTuple<Vector3D,Vector3D,Vector3D>>;namespace Rendering{using BbUtilData=MyTuple<ApiMemberAccessor,List<TriangleBillboardData>,List<FlatTriangleBillboardData>,List<MatrixD>,Dictionary<MatrixD[],int>>;public sealed partial class BillBoardUtils:RichHudClient.ApiModule<BbUtilData>{private static BillBoardUtils instance;private readonly List<MyTriangleBillboard>bbBuf;private List<MyTriangleBillboard>bbPoolBack;private readonly ApiMemberAccessor GetOrSetMember;private readonly List<TriangleBillboardData>triangleList;private readonly List<FlatTriangleBillboardData>flatTriangleList;private readonly List<MatrixD>matrixBuf;private readonly Dictionary<MatrixD[],int>matrixTable;private BillBoardUtils():base(ApiModuleTypes.BillBoardUtils,false,true){if(instance!=null)throw new Exception($"Only one instance of {GetType().Name} can exist at once.");bbBuf=new List<MyTriangleBillboard>(1000);var data=GetApiData();GetOrSetMember=data.Item1;triangleList=data.Item2;flatTriangleList=data.Item3;matrixBuf=data.Item4;matrixTable=data.Item5;}public static void Init(){if(instance==null){instance=new BillBoardUtils();}}public override void Close(){if(ExceptionHandler.Unloading){instance=null;}}public static void BeginDraw(){if(instance!=null){instance.bbPoolBack=instance.GetOrSetMember(null,(int)BillBoardUtilAccessors.GetPoolBack)as List<MyTriangleBillboard>;}}public static void FinishDraw(){}}}}}﻿using System;using System.Collections.Generic;using System.Text;using VRage;using VRageMath;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework{using FloatProp=MyTuple<Func<float>,Action<float>>;using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;using Vec2Prop=MyTuple<Func<Vector2>,Action<Vector2>>;namespace UI{using UI.Client;using TextBuilderMembers=MyTuple<MyTuple<Func<int,int,object>,Func<int>>,Func<Vector2I,int,object>,Func<object,int,object>,Action<IList<RichStringMembers>,Vector2I>,Action<IList<RichStringMembers>>,Action>;namespace Rendering.Client{using TextBoardMembers=MyTuple<TextBuilderMembers,FloatProp,Func<Vector2>,Func<Vector2>,Vec2Prop,Action<BoundingBox2,BoundingBox2,MatrixD[]>>;public class TextBoard:TextBuilder,ITextBoard{public event Action TextChanged{add{var args=new MyTuple<bool,Action>(true,value);GetOrSetMemberFunc(args,(int)TextBoardAccessors.OnTextChanged);}remove{var args=new MyTuple<bool,Action>(false,value);GetOrSetMemberFunc(args,(int)TextBoardAccessors.OnTextChanged);}}public float Scale{get{return GetScaleFunc();}set{SetScaleAction(value);}}public Vector2 Size=>GetSizeFunc();public Vector2 TextSize=>GetTextSizeFunc();public Vector2 TextOffset{get{return(Vector2)GetOrSetMemberFunc(null,(int)TextBoardAccessors.TextOffset);}set{GetOrSetMemberFunc(value,(int)TextBoardAccessors.TextOffset);}}public Vector2I VisibleLineRange=>(Vector2I)GetOrSetMemberFunc(null,(int)TextBoardAccessors.VisibleLineRange);public Vector2 FixedSize{get{return GetFixedSizeFunc();}set{SetFixedSizeAction(value);}}public bool AutoResize{get{return(bool)GetOrSetMemberFunc(null,(int)TextBoardAccessors.AutoResize);}set{GetOrSetMemberFunc(value,(int)TextBoardAccessors.AutoResize);}}public bool VertCenterText{get{return(bool)GetOrSetMemberFunc(null,(int)TextBoardAccessors.VertAlign);}set{GetOrSetMemberFunc(value,(int)TextBoardAccessors.VertAlign);}}private readonly Func<float>GetScaleFunc;private readonly Action<float>SetScaleAction;private readonly Func<Vector2>GetSizeFunc;private readonly Func<Vector2>GetTextSizeFunc;private readonly Func<Vector2>GetFixedSizeFunc;private readonly Action<Vector2>SetFixedSizeAction;private readonly Action<BoundingBox2,BoundingBox2,MatrixD[]>DrawAction;private readonly MatrixD[]matRef;public TextBoard():this(HudMain.GetTextBoardData()){}private TextBoard(TextBoardMembers members):base(members.Item1){Format=GlyphFormat.Black;GetScaleFunc=members.Item2.Item1;SetScaleAction=members.Item2.Item2;GetSizeFunc=members.Item3;GetTextSizeFunc=members.Item4;GetFixedSizeFunc=members.Item5.Item1;SetFixedSizeAction=members.Item5.Item2;DrawAction=members.Item6;matRef=new MatrixD[1];}public void Draw(Vector2 origin){Vector2 halfSize=GetSizeFunc()*.5f;BoundingBox2 box=new BoundingBox2(origin-halfSize,origin+halfSize);DrawAction(box,CroppedBox.defaultMask,HudMain.PixelToWorldRef);}public void Draw(Vector2 origin,MatrixD matrix){Vector2 halfSize=GetSizeFunc()*.5f;BoundingBox2 box=new BoundingBox2(origin-halfSize,origin+halfSize);matRef[0]=matrix;DrawAction(box,CroppedBox.defaultMask,matRef);}public void Draw(BoundingBox2 box,BoundingBox2 mask,MatrixD[]matrix)=>DrawAction(box,mask,matrix);public void MoveToChar(Vector2I index)=>GetOrSetMemberFunc(index,(int)TextBoardAccessors.MoveToChar);public Vector2I GetCharAtOffset(Vector2 offset)=>(Vector2I)GetOrSetMemberFunc(offset,(int)TextBoardAccessors.GetCharAtOffset);}}namespace Rendering.Server{}}}﻿using System;using System.Collections.Generic;using System.Text;using VRage;using VRageMath;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework{using RangeData=MyTuple<Vector2I,Vector2I>;using RangeFormatData=MyTuple<Vector2I,Vector2I,GlyphFormatMembers>;using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;namespace UI{using TextBuilderMembers=MyTuple<MyTuple<Func<int,int,object>,Func<int>>,Func<Vector2I,int,object>,Func<object,int,object>,Action<IList<RichStringMembers>,Vector2I>,Action<IList<RichStringMembers>>,Action>;namespace Rendering.Client{public abstract class TextBuilder:ITextBuilder{public IRichChar this[Vector2I index]=>lines[index.X][index.Y];public ILine this[int index]=>lines[index];public int Count=>GetLineCountFunc();public GlyphFormat Format{get{return new GlyphFormat((GlyphFormatMembers)GetOrSetMemberFunc(null,(int)TextBuilderAccessors.Format));}set{GetOrSetMemberFunc(value.Data,(int)TextBuilderAccessors.Format);}}public float LineWrapWidth{get{return(float)GetOrSetMemberFunc(null,(int)TextBuilderAccessors.LineWrapWidth);}set{GetOrSetMemberFunc(value,(int)TextBuilderAccessors.LineWrapWidth);}}public TextBuilderModes BuilderMode{get{return(TextBuilderModes)GetOrSetMemberFunc(null,(int)TextBuilderAccessors.BuilderMode);}set{GetOrSetMemberFunc(value,(int)TextBuilderAccessors.BuilderMode);}}protected readonly Func<object,int,object>GetOrSetMemberFunc;private readonly Func<int,int,object>GetLineMemberFunc;private readonly Func<int>GetLineCountFunc;private readonly Func<Vector2I,int,object>GetCharMemberFunc;private readonly Action<IList<RichStringMembers>,Vector2I>InsertTextAction;private readonly Action<IList<RichStringMembers>>SetTextAction;private readonly Action ClearAction;private readonly ReadOnlyApiCollection<ILine>lines;private RichText lastText;public TextBuilder(TextBuilderMembers data){GetLineMemberFunc=data.Item1.Item1;GetLineCountFunc=data.Item1.Item2;GetCharMemberFunc=data.Item2;GetOrSetMemberFunc=data.Item3;InsertTextAction=data.Item4;SetTextAction=data.Item5;ClearAction=data.Item6;lines=new ReadOnlyApiCollection<ILine>(x=>new LineData(this,x),GetLineCountFunc);}public void SetText(RichText text){SetTextAction(text.apiData);lastText=text;}public void SetText(StringBuilder text,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);SetTextAction(lastText.apiData);}public void SetText(string text,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);SetTextAction(lastText.apiData);}public void Append(RichText text){InsertTextAction(text.apiData,GetLastIndex());}public void Append(StringBuilder text,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);InsertTextAction(lastText.apiData,GetLastIndex());}public void Append(string text,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);InsertTextAction(lastText.apiData,GetLastIndex());}public void Append(char ch,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(ch,format??Format);InsertTextAction(lastText.apiData,GetLastIndex());}public void Insert(RichText text,Vector2I start){InsertTextAction(text.apiData,start);}public void Insert(StringBuilder text,Vector2I start,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);InsertTextAction(lastText.apiData,start);}public void Insert(string text,Vector2I start,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(text,format??Format);InsertTextAction(lastText.apiData,start);}public void Insert(char ch,Vector2I start,GlyphFormat?format=null){if(lastText==null)lastText=new RichText();lastText.Clear();lastText.Add(ch,format??Format);InsertTextAction(lastText.apiData,start);}public RichText GetText()=>GetTextRange(Vector2I.Zero,GetLastIndex()-new Vector2I(0,1));public RichText GetTextRange(Vector2I start,Vector2I end){var textData=GetOrSetMemberFunc(new RangeData(start,end),(int)TextBuilderAccessors.GetRange)as List<RichStringMembers>;if(lastText==null||lastText.apiData!=textData)lastText=new RichText(textData);return lastText;}public void SetFormatting(GlyphFormat format){GetOrSetMemberFunc(format.Data,(int)TextBuilderAccessors.Format);GetOrSetMemberFunc(new RangeFormatData(Vector2I.Zero,GetLastIndex()-new Vector2I(0,1),format.Data),(int)TextBuilderAccessors.SetFormatting);}public void SetFormatting(Vector2I start,Vector2I end,GlyphFormat format)=>GetOrSetMemberFunc(new RangeFormatData(start,end,format.Data),(int)TextBuilderAccessors.SetFormatting);public void RemoveAt(Vector2I index)=>GetOrSetMemberFunc(new RangeData(index,index),(int)TextBuilderAccessors.RemoveRange);public void RemoveRange(Vector2I start,Vector2I end)=>GetOrSetMemberFunc(new RangeData(start,end),(int)TextBuilderAccessors.RemoveRange);public void Clear()=>ClearAction();public override string ToString()=>GetOrSetMemberFunc(null,(int)TextBuilderAccessors.ToString)as string;protected Vector2I GetLastIndex(){int lineCount=GetLineCountFunc();Vector2I start=new Vector2I(Math.Max(0,lineCount-1),0);if(lineCount>0)start.Y=Math.Max(0,lines[start.X].Count);return start;}protected class LineData:ILine{public IRichChar this[int ch]=>characters[ch];public int Count=>(int)parent.GetLineMemberFunc(index,(int)LineAccessors.Count);public Vector2 Size=>(Vector2)parent.GetLineMemberFunc(index,(int)LineAccessors.Size);public float VerticalOffset=>(float)parent.GetLineMemberFunc(index,(int)LineAccessors.VerticalOffset);private readonly TextBuilder parent;private readonly int index;private readonly ReadOnlyApiCollection<IRichChar>characters;public LineData(TextBuilder parent,int index){this.parent=parent;this.index=index;characters=new ReadOnlyApiCollection<IRichChar>(x=>new RichCharData(parent,new Vector2I(index,x)),()=>(int)parent.GetLineMemberFunc(index,(int)LineAccessors.Count));}}protected class RichCharData:IRichChar{public char Ch=>(char)parent.GetCharMemberFunc(index,(int)RichCharAccessors.Ch);public GlyphFormat Format=>new GlyphFormat((GlyphFormatMembers)parent.GetCharMemberFunc(index,(int)RichCharAccessors.Format));public Vector2 Size=>(Vector2)parent.GetCharMemberFunc(index,(int)RichCharAccessors.Size);public Vector2 Offset=>(Vector2)parent.GetCharMemberFunc(index,(int)RichCharAccessors.Offset);private readonly TextBuilder parent;private readonly Vector2I index;public RichCharData(TextBuilder parent,Vector2I index){this.parent=parent;this.index=index;}}}}}}﻿using System;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using FontMembers=MyTuple<string,int,float,float,Func<int,bool>,ApiMemberAccessor>;namespace UI{namespace Rendering.Client{public sealed partial class FontManager{private class FontData:IFontMin{public string Name{get;}public int Index{get;}public float PtSize{get;}public float BaseScale{get;}public Vector2I Regular=>new Vector2I(Index,0);public Vector2I Bold=>new Vector2I(Index,1);public Vector2I Italic=>new Vector2I(Index,2);public Vector2I BoldItalic=>new Vector2I(Index,3);private readonly Func<int,bool>IsFontDefinedFunc;public FontData(FontMembers members){Name=members.Item1;Index=members.Item2;PtSize=members.Item3;BaseScale=members.Item4;IsFontDefinedFunc=members.Item5;}public bool IsStyleDefined(FontStyles styleEnum)=>IsFontDefinedFunc((int)styleEnum);public bool IsStyleDefined(int style)=>IsFontDefinedFunc(style);public Vector2I GetStyleIndex(int style)=>new Vector2I(Index,style);public Vector2I GetStyleIndex(FontStyles style)=>new Vector2I(Index,(int)style);public override int GetHashCode(){return Index.GetHashCode();}public override bool Equals(object obj){var font=obj as FontData;return font!=null&&font.Index==Index;}}}}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using AtlasMembers=VRage.MyTuple<string,VRageMath.Vector2>;using GlyphMembers=VRage.MyTuple<int,VRageMath.Vector2,VRageMath.Vector2,float,float>;namespace RichHudFramework{using Client;using FontMembers=MyTuple<string,int,float,float,Func<int,bool>,ApiMemberAccessor>;using FontStyleDefinition=MyTuple<int,float,float,AtlasMembers[],KeyValuePair<char,GlyphMembers>[],KeyValuePair<uint,float>[]>;namespace UI{using FontDefinition=MyTuple<string,float,FontStyleDefinition[]>;namespace Rendering.Client{using FontManagerMembers=MyTuple<MyTuple<Func<int,FontMembers>,Func<int>>,Func<FontDefinition,FontMembers?>,Func<string,FontMembers?>,ApiMemberAccessor>;public sealed partial class FontManager:RichHudClient.ApiModule<FontManagerMembers>{public static Vector2I Default=>Vector2I.Zero;public static IReadOnlyList<IFontMin>Fonts=>Instance.fonts;private static FontManager Instance{get{Init();return instance;}set{instance=value;}}private static FontManager instance;private readonly ReadOnlyApiCollection<IFontMin>fonts;private readonly Func<FontDefinition,FontMembers?>TryAddFontFunc;private readonly Func<string,FontMembers?>GetFontFunc;private FontManager():base(ApiModuleTypes.FontManager,false,true){var members=GetApiData();Func<int,IFontMin>fontGetter=x=>new FontData(members.Item1.Item1(x));fonts=new ReadOnlyApiCollection<IFontMin>(fontGetter,members.Item1.Item2);TryAddFontFunc=members.Item2;GetFontFunc=members.Item3;}private static void Init(){if(instance==null)instance=new FontManager();}public override void Close(){instance=null;}public static bool TryAddFont(FontDefinition fontData)=>Instance.TryAddFontFunc(fontData)!=null;public static bool TryAddFont(FontDefinition fontData,out IFontMin font){FontMembers?members=Instance.TryAddFontFunc(fontData);if(members!=null){font=new FontData(members.Value);return true;}else{font=null;return false;}}public static IFontMin GetFont(string name){FontMembers?members=Instance.GetFontFunc(name);IFontMin font=null;if(members!=null)font=new FontData(members.Value);return font;}public static IFontMin GetFont(int index)=>Instance.fonts[index];public static Vector2I GetStyleIndex(string name,FontStyles style=FontStyles.Regular){IFontMin font=GetFont(name);return new Vector2I(font.Index,(int)style);}}}}}﻿using System;using System.Collections;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;namespace UI.Client{public class ControlCategory:IControlCategory{public string HeaderText{get{return GetOrSetMemberFunc(null,(int)ControlCatAccessors.HeaderText)as string;}set{GetOrSetMemberFunc(value,(int)ControlCatAccessors.HeaderText);}}public string SubheaderText{get{return GetOrSetMemberFunc(null,(int)ControlCatAccessors.SubheaderText)as string;}set{GetOrSetMemberFunc(value,(int)ControlCatAccessors.SubheaderText);}}public IReadOnlyList<ControlTile>Tiles{get;}public IControlCategory TileContainer=>this;public object ID=>data.Item3;public bool Enabled{get{return(bool)GetOrSetMemberFunc(null,(int)ControlCatAccessors.Enabled);}set{GetOrSetMemberFunc(value,(int)ControlCatAccessors.Enabled);}}private ApiMemberAccessor GetOrSetMemberFunc=>data.Item1;private readonly ControlContainerMembers data;public ControlCategory():this(RichHudTerminal.GetNewMenuCategory()){}public ControlCategory(ControlContainerMembers data){this.data=data;var GetTileDataFunc=data.Item2.Item1 as Func<int,ControlContainerMembers>;Func<int,ControlTile>GetTileFunc=x=>new ControlTile(GetTileDataFunc(x));Tiles=new ReadOnlyApiCollection<ControlTile>(GetTileFunc,data.Item2.Item2);}IEnumerator<ControlTile>IEnumerable<ControlTile>.GetEnumerator()=>Tiles.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>Tiles.GetEnumerator();public void Add(ControlTile tile)=>GetOrSetMemberFunc(tile.ID,(int)ControlCatAccessors.AddMember);public ControlContainerMembers GetApiData()=>data;}}}﻿using System;using System.Collections;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework.UI.Client{using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;using ControlMembers=MyTuple<ApiMemberAccessor,object>;public class ControlTile:IControlTile{public IReadOnlyList<TerminalControlBase>Controls{get;}public IControlTile ControlContainer=>this;public bool Enabled{get{return(bool)GetOrSetMemberFunc(null,(int)ControlTileAccessors.Enabled);}set{GetOrSetMemberFunc(value,(int)ControlTileAccessors.Enabled);}}public object ID=>tileMembers.Item3;private ApiMemberAccessor GetOrSetMemberFunc=>tileMembers.Item1;private readonly ControlContainerMembers tileMembers;public ControlTile():this(RichHudTerminal.GetNewMenuTile()){}public ControlTile(ControlContainerMembers data){tileMembers=data;var GetControlDataFunc=data.Item2.Item1 as Func<int,ControlMembers>;Func<int,TerminalControlBase>GetControlFunc=(x=>new TerminalControl(GetControlDataFunc(x)));Controls=new ReadOnlyApiCollection<TerminalControlBase>(GetControlFunc,data.Item2.Item2);}IEnumerator<ITerminalControl>IEnumerable<ITerminalControl>.GetEnumerator()=>Controls.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>Controls.GetEnumerator();public void Add(TerminalControlBase control)=>GetOrSetMemberFunc(control.ID,(int)ControlTileAccessors.AddControl);public ControlContainerMembers GetApiData()=>tileMembers;private class TerminalControl:TerminalControlBase{public TerminalControl(ControlMembers data):base(data){}}}}﻿using System;using System.Collections.Generic;using System.Text;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework.UI{using CollectionData=MyTuple<Func<int,ApiMemberAccessor>,Func<int>>;using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;public class ListBoxData<T>:ReadOnlyApiCollection<EntryData<T>>{public EntryData<T>Selection{get{var index=(int)GetOrSetMemberFunc(null,(int)ListBoxAccessors.SelectionIndex);return(index!=-1)?this[index]:null;}}public int SelectionIndex{get{return(int)GetOrSetMemberFunc(null,(int)ListBoxAccessors.SelectionIndex);}}private readonly ApiMemberAccessor GetOrSetMemberFunc;public ListBoxData(ApiMemberAccessor GetOrSetMemberFunc):base(GetListData(GetOrSetMemberFunc)){this.GetOrSetMemberFunc=GetOrSetMemberFunc;}private static MyTuple<Func<int,EntryData<T>>,Func<int>>GetListData(ApiMemberAccessor GetOrSetMemberFunc){var listData=(CollectionData)GetOrSetMemberFunc(null,(int)ListBoxAccessors.ListMembers);Func<int,EntryData<T>>GetEntryFunc=x=>new EntryData<T>(listData.Item1(x));return new MyTuple<Func<int,EntryData<T>>,Func<int>>(){Item1=GetEntryFunc,Item2=listData.Item2};}public void Add(RichText text,T assocObject){var data=new MyTuple<List<RichStringMembers>,object>(){Item1=text.apiData,Item2=assocObject};GetOrSetMemberFunc(data,(int)ListBoxAccessors.Add);}public void Insert(int index,RichText text,T assocObject){var data=new MyTuple<int,List<RichStringMembers>,object>(){Item1=index,Item2=text.apiData,Item3=assocObject};GetOrSetMemberFunc(data,(int)ListBoxAccessors.Insert);}public bool Remove(EntryData<T>entry)=>(bool)GetOrSetMemberFunc(entry.ID,(int)ListBoxAccessors.Remove);public void RemoveAt(int index)=>GetOrSetMemberFunc(index,(int)ListBoxAccessors.RemoveAt);public void SetSelection(EntryData<T>entry)=>GetOrSetMemberFunc(entry.ID,(int)ListBoxAccessors.Selection);public void SetSelection(T assocMember)=>GetOrSetMemberFunc(assocMember,(int)ListBoxAccessors.SetSelectionAtData);public void SetSelection(int index)=>GetOrSetMemberFunc(index,(int)ListBoxAccessors.SelectionIndex);}public class EntryData<T>{public RichText Text{get{return new RichText(GetOrSetMemberFunc(null,(int)ListBoxEntryAccessors.Name)as List<RichStringMembers>);}set{GetOrSetMemberFunc(value.apiData,(int)ListBoxEntryAccessors.Name);}}public bool Enabled{get{return(bool)GetOrSetMemberFunc(null,(int)ListBoxEntryAccessors.Enabled);}set{GetOrSetMemberFunc(value,(int)ListBoxEntryAccessors.Enabled);}}public T AssocObject{get{return(T)GetOrSetMemberFunc(null,(int)ListBoxEntryAccessors.AssocObject);}set{GetOrSetMemberFunc(value,(int)ListBoxEntryAccessors.AssocObject);}}public object ID=>GetOrSetMemberFunc(null,(int)ListBoxEntryAccessors.ID);private readonly ApiMemberAccessor GetOrSetMemberFunc;public EntryData(ApiMemberAccessor GetOrSetMemberFunc){this.GetOrSetMemberFunc=GetOrSetMemberFunc;}}}﻿using System;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;namespace UI.Client{public sealed partial class RichHudTerminal{private class ModControlRoot:TerminalPageCategoryBase,IModControlRoot{public IReadOnlyList<TerminalPageCategoryBase>Subcategories{get;}public event EventHandler SelectionChanged;public ModControlRoot(ControlContainerMembers data):base(data){GetOrSetMemberFunc(new Action(ModRootCallback),(int)ModControlRootAccessors.GetOrSetCallback);var GetCategoryDataFunc=GetOrSetMemberFunc(null,(int)ModControlRootAccessors.GetCategoryAccessors)as Func<int,ControlContainerMembers>;Func<int,TerminalPageCategoryBase>GetPageFunc=(x=>new TerminalPageCategoryWrapper(GetCategoryDataFunc(x)));Subcategories=new ReadOnlyApiCollection<TerminalPageCategoryBase>(GetPageFunc,data.Item2.Item2);}protected void ModRootCallback(){SelectionChanged?.Invoke(this,EventArgs.Empty);}public void Add(TerminalPageCategoryBase subcategory)=>GetOrSetMemberFunc(subcategory.ID,(int)ModControlRootAccessors.AddSubcategory);public void AddRange(IReadOnlyList<IModRootMember>members){foreach(IModRootMember member in members){if(member is TerminalPageBase)GetOrSetMemberFunc(member.ID,(int)TerminalPageCategoryAccessors.AddPage);else GetOrSetMemberFunc(member.ID,(int)ModControlRootAccessors.AddSubcategory);}}private class TerminalPageCategoryWrapper:TerminalPageCategoryBase{public TerminalPageCategoryWrapper(ControlContainerMembers data):base(data){}}}}}}﻿using System;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using Client;using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;using ControlMembers=MyTuple<ApiMemberAccessor,object>;namespace UI.Client{using SettingsMenuMembers=MyTuple<ApiMemberAccessor,ControlContainerMembers,Func<int,ControlMembers>,Func<int,ControlContainerMembers>,Func<int,ControlMembers>>;public sealed partial class RichHudTerminal:RichHudClient.ApiModule<SettingsMenuMembers>{public static IModControlRoot Root=>Instance.menuRoot;public static bool Open=>(bool)Instance.GetOrSetMembersFunc(null,(int)TerminalAccessors.GetMenuOpen);private static RichHudTerminal Instance{get{Init();return _instance;}set{_instance=value;}}private static RichHudTerminal _instance;private readonly ModControlRoot menuRoot;private readonly ApiMemberAccessor GetOrSetMembersFunc;private readonly Func<int,ControlMembers>GetNewControlFunc;private readonly Func<int,ControlContainerMembers>GetNewContainerFunc;private readonly Func<int,ControlMembers>GetNewPageFunc;private readonly Func<ControlContainerMembers>GetNewPageCategoryFunc;private RichHudTerminal():base(ApiModuleTypes.SettingsMenu,false,true){var data=GetApiData();GetOrSetMembersFunc=data.Item1;GetNewControlFunc=data.Item3;GetNewContainerFunc=data.Item4;GetNewPageFunc=data.Item5;GetNewPageCategoryFunc=GetOrSetMembersFunc(null,(int)TerminalAccessors.GetNewPageCategoryFunc)as Func<ControlContainerMembers>;menuRoot=new ModControlRoot(data.Item2);}public static void Init(){if(_instance==null){_instance=new RichHudTerminal();}}public static void ToggleMenu(){if(_instance==null)Init();_instance.GetOrSetMembersFunc(null,(int)TerminalAccessors.ToggleMenu);}public static void OpenMenu(){if(_instance==null)Init();_instance.GetOrSetMembersFunc(null,(int)TerminalAccessors.OpenMenu);}public static void CloseMenu(){if(_instance==null)Init();_instance.GetOrSetMembersFunc(null,(int)TerminalAccessors.CloseMenu);}public static void OpenToPage(TerminalPageBase newPage){_instance.GetOrSetMembersFunc(new MyTuple<object,object>(_instance.menuRoot.ID,newPage.ID),(int)TerminalAccessors.OpenToPage);}public static void SetPage(TerminalPageBase newPage){_instance.GetOrSetMembersFunc(new MyTuple<object,object>(_instance.menuRoot.ID,newPage.ID),(int)TerminalAccessors.SetPage);}public override void Close(){_instance=null;}public static ControlMembers GetNewMenuControl(MenuControls controlEnum)=>Instance.GetNewControlFunc((int)controlEnum);public static ControlContainerMembers GetNewMenuTile()=>Instance.GetNewContainerFunc((int)ControlContainers.Tile);public static ControlContainerMembers GetNewMenuCategory()=>Instance.GetNewContainerFunc((int)ControlContainers.Category);public static ControlMembers GetNewMenuPage(ModPages pageEnum)=>Instance.GetNewPageFunc((int)pageEnum);public static ControlContainerMembers GetNewPageCategory()=>Instance.GetNewPageCategoryFunc();}}}﻿using System;using System.Collections;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;using ControlMembers=MyTuple<ApiMemberAccessor,object>;namespace UI.Client{public class TerminalPageCategory:TerminalPageCategoryBase{public TerminalPageCategory():base(RichHudTerminal.GetNewPageCategory()){}}public abstract class TerminalPageCategoryBase:ITerminalPageCategory{public string Name{get{return GetOrSetMemberFunc(null,(int)TerminalPageCategoryAccessors.Name)as string;}set{GetOrSetMemberFunc(value,(int)TerminalPageCategoryAccessors.Name);}}public IReadOnlyList<TerminalPageBase>Pages{get;}public ITerminalPageCategory PageContainer=>this;public object ID=>data.Item3;public TerminalPageBase SelectedPage{get{object id=GetOrSetMemberFunc(null,(int)TerminalPageCategoryAccessors.Selection);if(id!=null){for(int n=0;n<Pages.Count;n++){if(id==Pages[n].ID)return Pages[n];}}return null;}}public bool Enabled{get{return(bool)GetOrSetMemberFunc(null,(int)TerminalPageCategoryAccessors.Enabled);}set{GetOrSetMemberFunc(value,(int)TerminalPageCategoryAccessors.Enabled);}}protected ApiMemberAccessor GetOrSetMemberFunc=>data.Item1;protected readonly ControlContainerMembers data;public TerminalPageCategoryBase(ControlContainerMembers data){this.data=data;var GetPageDataFunc=data.Item2.Item1 as Func<int,ControlMembers>;Func<int,TerminalPageBase>GetPageFunc=(x=>new TerminalPage(GetPageDataFunc(x)));Pages=new ReadOnlyApiCollection<TerminalPageBase>(GetPageFunc,data.Item2.Item2);}public void Add(TerminalPageBase page)=>GetOrSetMemberFunc(page.ID,(int)TerminalPageCategoryAccessors.AddPage);public void AddRange(IReadOnlyList<TerminalPageBase>pages){foreach(TerminalPageBase page in pages)GetOrSetMemberFunc(page.ID,(int)TerminalPageCategoryAccessors.AddPage);}public ControlContainerMembers GetApiData()=>data;public IEnumerator<TerminalPageBase>GetEnumerator()=>Pages.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>Pages.GetEnumerator();protected class TerminalPage:TerminalPageBase{public TerminalPage(ControlMembers data):base(data){}}}}}﻿namespace RichHudFramework.UI.Client{public class TerminalButton:TerminalControlBase{public TerminalButton():base(MenuControls.TerminalButton){}}}﻿namespace RichHudFramework.UI.Client{public class TerminalCheckbox:TerminalValue<bool>{public TerminalCheckbox():base(MenuControls.Checkbox){}}}﻿using VRageMath;namespace RichHudFramework.UI.Client{public class TerminalColorPicker:TerminalValue<Color>{public TerminalColorPicker():base(MenuControls.ColorPicker){}}}﻿using System;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework.UI.Client{using ControlMembers=MyTuple<ApiMemberAccessor,object>;public abstract class TerminalControlBase:ITerminalControl{public event EventHandler ControlChanged;public string Name{get{return GetOrSetMember(null,(int)TerminalControlAccessors.Name)as string;}set{GetOrSetMember(value,(int)TerminalControlAccessors.Name);}}public bool Enabled{get{return(bool)GetOrSetMember(null,(int)TerminalControlAccessors.Enabled);}set{GetOrSetMember(value,(int)TerminalControlAccessors.Enabled);}}public ToolTip ToolTip{get{return _toolTip;}set{_toolTip=value;GetOrSetMember(value.GetToolTipFunc,(int)TerminalControlAccessors.ToolTip);}}public object ID{get;}public EventHandler ControlChangedHandler{get;set;}protected readonly ApiMemberAccessor GetOrSetMember;protected ToolTip _toolTip;public TerminalControlBase(MenuControls controlEnum):this(RichHudTerminal.GetNewMenuControl(controlEnum)){GetOrSetMember(new Action(ControlChangedCallback),(int)TerminalControlAccessors.GetOrSetControlCallback);}protected virtual void ControlChangedCallback(){Internal.ExceptionHandler.Run(()=>{ControlChanged?.Invoke(this,EventArgs.Empty);ControlChangedHandler?.Invoke(this,EventArgs.Empty);});}public TerminalControlBase(ControlMembers data){GetOrSetMember=data.Item1;ID=data.Item2;}public ControlMembers GetApiData(){return new ControlMembers(){Item1=GetOrSetMember,Item2=ID};}}public abstract class TerminalValue<TValue>:TerminalControlBase,ITerminalValue<TValue>{public virtual TValue Value{get{return(TValue)GetOrSetMember(null,(int)TerminalControlAccessors.Value);}set{GetOrSetMember(value,(int)TerminalControlAccessors.Value);}}public Func<TValue>CustomValueGetter{get{return GetOrSetMember(null,(int)TerminalControlAccessors.ValueGetter)as Func<TValue>;}set{GetOrSetMember(value,(int)TerminalControlAccessors.ValueGetter);}}public TerminalValue(MenuControls controlEnum):base(controlEnum){}}}﻿using VRageMath;namespace RichHudFramework.UI.Client{public enum DragBoxAccessors:int{BoxSize=16,AlignToEdge=17,}public class TerminalDragBox:TerminalValue<Vector2>{public Vector2 BoxSize{get{return(Vector2)GetOrSetMember(null,(int)DragBoxAccessors.BoxSize);}set{GetOrSetMember(value,(int)DragBoxAccessors.BoxSize);}}public bool AlignToEdge{get{return(bool)GetOrSetMember(null,(int)DragBoxAccessors.AlignToEdge);}set{GetOrSetMember(value,(int)DragBoxAccessors.AlignToEdge);}}public TerminalDragBox():base(MenuControls.DragBox){}}}﻿using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework.UI.Client{public class TerminalDropdown<T>:TerminalValue<EntryData<T>>{public override EntryData<T>Value{get{return List.Selection;}set{List.SetSelection(value);}}public ListBoxData<T>List{get;}public TerminalDropdown():base(MenuControls.DropdownControl){var listData=GetOrSetMember(null,(int)ListControlAccessors.ListAccessors)as ApiMemberAccessor;List=new ListBoxData<T>(listData);}}}﻿using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework.UI.Client{public enum ListControlAccessors:int{ListAccessors=16,}public class TerminalList<T>:TerminalValue<EntryData<T>>{public override EntryData<T>Value{get{return List.Selection;}set{List.SetSelection(value);}}public ListBoxData<T>List{get;}public TerminalList():base(MenuControls.ListControl){var listData=GetOrSetMember(null,(int)ListControlAccessors.ListAccessors)as ApiMemberAccessor;List=new ListBoxData<T>(listData);}}}﻿namespace RichHudFramework.UI.Client{public class TerminalOnOffButton:TerminalValue<bool>{public TerminalOnOffButton():base(MenuControls.OnOffButton){}}}﻿namespace RichHudFramework.UI.Client{public enum SliderSettingsAccessors:int{Min=16,Max=17,Percent=18,ValueText=19,}public class TerminalSlider:TerminalValue<float>{public float Min{get{return(float)GetOrSetMember(null,(int)SliderSettingsAccessors.Min);}set{GetOrSetMember(value,(int)SliderSettingsAccessors.Min);}}public float Max{get{return(float)GetOrSetMember(null,(int)SliderSettingsAccessors.Max);}set{GetOrSetMember(value,(int)SliderSettingsAccessors.Max);}}public float Percent{get{return(float)GetOrSetMember(null,(int)SliderSettingsAccessors.Percent);}set{GetOrSetMember(value,(int)SliderSettingsAccessors.Percent);}}public string ValueText{get{return GetOrSetMember(null,(int)SliderSettingsAccessors.ValueText)as string;}set{GetOrSetMember(value,(int)SliderSettingsAccessors.ValueText);}}public TerminalSlider():base(MenuControls.SliderSetting){}}}﻿using System;namespace RichHudFramework.UI.Client{public enum TextFieldAccessors:int{CharFilterFunc=16,}public class TerminalTextField:TerminalValue<string>{public Func<char,bool>CharFilterFunc{get{return GetOrSetMember(null,(int)TextFieldAccessors.CharFilterFunc)as Func<char,bool>;}set{GetOrSetMember(value,(int)TextFieldAccessors.CharFilterFunc);}}public TerminalTextField():base(MenuControls.TextField){}}}﻿using System;using System.Collections;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;namespace UI.Client{public class ControlPage:TerminalPageBase,IControlPage{public IReadOnlyList<ControlCategory>Categories{get;}public IControlPage<ControlCategory,ControlTile>CategoryContainer=>this;public ControlPage():base(ModPages.ControlPage){var catData=(MyTuple<object,Func<int>>)GetOrSetMemberFunc(null,(int)ControlPageAccessors.CategoryData);var GetCatDataFunc=catData.Item1 as Func<int,ControlContainerMembers>;Func<int,ControlCategory>GetCatFunc=(x=>new ControlCategory(GetCatDataFunc(x)));Categories=new ReadOnlyApiCollection<ControlCategory>(GetCatFunc,catData.Item2);}IEnumerator<ControlCategory>IEnumerable<ControlCategory>.GetEnumerator()=>Categories.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>Categories.GetEnumerator();public void Add(ControlCategory category)=>GetOrSetMemberFunc(category.ID,(int)ControlPageAccessors.AddCategory);}}}﻿using System.Collections;using System.Collections.Generic;using VRage;using BindDefinitionData=VRage.MyTuple<string,string[]>;namespace RichHudFramework{namespace UI.Client{public class RebindPage:TerminalPageBase,IRebindPage{public IReadOnlyList<IBindGroup>BindGroups=>bindGroups;public RebindPage GroupContainer=>this;private readonly List<IBindGroup>bindGroups;public RebindPage():base(ModPages.RebindPage){bindGroups=new List<IBindGroup>();}public void Add(IBindGroup bindGroup){GetOrSetMemberFunc(bindGroup.ID,(int)RebindPageAccessors.Add);bindGroups.Add(bindGroup);}public void Add(IBindGroup bindGroup,BindDefinition[]defaultBinds){BindDefinitionData[]data=new BindDefinitionData[defaultBinds.Length];for(int n=0;n<defaultBinds.Length;n++)data[n]=defaultBinds[n];GetOrSetMemberFunc(new MyTuple<object,BindDefinitionData[]>(bindGroup.ID,data),(int)RebindPageAccessors.Add);bindGroups.Add(bindGroup);}public IEnumerator<IBindGroup>GetEnumerator()=>bindGroups.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>bindGroups.GetEnumerator();}}}﻿using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlMembers=MyTuple<ApiMemberAccessor,object>;namespace UI.Client{public abstract class TerminalPageBase:ITerminalPage{public string Name{get{return GetOrSetMemberFunc(null,(int)TerminalPageAccessors.Name)as string;}set{GetOrSetMemberFunc(value,(int)TerminalPageAccessors.Name);}}public object ID=>data.Item2;public bool Enabled{get{return(bool)GetOrSetMemberFunc(null,(int)TerminalPageAccessors.Enabled);}set{GetOrSetMemberFunc(value,(int)TerminalPageAccessors.Enabled);}}protected ApiMemberAccessor GetOrSetMemberFunc=>data.Item1;protected readonly ControlMembers data;public TerminalPageBase(ModPages pageEnum){data=RichHudTerminal.GetNewMenuPage(pageEnum);}public TerminalPageBase(ControlMembers data){this.data=data;}public ControlMembers GetApiData()=>data;}}}﻿using RichHudFramework.UI.Rendering;using RichHudFramework.UI.Rendering.Client;using System;using System.Collections.Generic;using System.Text;using VRage;using VRageMath;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework{using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;namespace UI.Client{using TextBuilderMembers=MyTuple<MyTuple<Func<int,int,object>,Func<int>>,Func<Vector2I,int,object>,Func<object,int,object>,Action<IList<RichStringMembers>,Vector2I>,Action<IList<RichStringMembers>>,Action>;public class TextPage:TerminalPageBase,ITextPage{public RichText HeaderText{get{return new RichText(GetOrSetMemberFunc(null,(int)TextPageAccessors.GetOrSetHeader)as List<RichStringMembers>);}set{GetOrSetMemberFunc(value.apiData,(int)TextPageAccessors.GetOrSetHeader);}}public RichText SubHeaderText{get{return new RichText(GetOrSetMemberFunc(null,(int)TextPageAccessors.GetOrSetSubheader)as List<RichStringMembers>);}set{GetOrSetMemberFunc(value.apiData,(int)TextPageAccessors.GetOrSetSubheader);}}public RichText Text{get{return new RichText(GetOrSetMemberFunc(null,(int)TextPageAccessors.GetOrSetText)as List<RichStringMembers>);}set{GetOrSetMemberFunc(value.apiData,(int)TextPageAccessors.GetOrSetText);}}public ITextBuilder TextBuilder{get;}public TextPage():base(ModPages.TextPage){TextBuilder=new BasicTextBuilder((TextBuilderMembers)GetOrSetMemberFunc(null,(int)TextPageAccessors.GetTextBuilder));}private class BasicTextBuilder:TextBuilder{public BasicTextBuilder(TextBuilderMembers members):base(members){}}}}}﻿namespace RichHudFramework{public enum MsgTypes:int{RegistrationRequest=1,RegistrationSuccessful=2,RegistrationFailed=3,}public enum ApiModuleTypes:int{BindManager=1,HudMain=2,FontManager=3,SettingsMenu=4,BillBoardUtils=5}public enum ClientDataAccessors:int{GetVersionID=1,GetSubtype=2}public enum ClientSubtypes:int{Full=1,NoLib=2,Terminal=3,FontManager=4,BindManager=5}}﻿using System;using System.Collections;using System.Collections.Generic;using VRage;namespace RichHudFramework{public class ReadOnlyApiCollection<TValue>:IReadOnlyList<TValue>,IIndexedCollection<TValue>{public virtual TValue this[int index]{get{int count=GetCountFunc();if(index>=count)throw new Exception($"Index ({index}) was out of Range. Must be non-negative and less than {count}.");while(wrapperList.Count<count){for(int n=wrapperList.Count;wrapperList.Count<count;n++)wrapperList.Add(GetNewWrapperFunc(n));}if(count>9&&wrapperList.Count>count*3){wrapperList.RemoveRange(count,wrapperList.Count-count);wrapperList.TrimExcess();}return wrapperList[index];}}public virtual int Count=>GetCountFunc();protected readonly Func<int,TValue>GetNewWrapperFunc;protected readonly Func<int>GetCountFunc;protected readonly List<TValue>wrapperList;protected readonly CollectionDataEnumerator<TValue>enumerator;public ReadOnlyApiCollection(Func<int,TValue>GetNewWrapper,Func<int>GetCount){this.GetNewWrapperFunc=GetNewWrapper;this.GetCountFunc=GetCount;wrapperList=new List<TValue>();enumerator=new CollectionDataEnumerator<TValue>(x=>this[x],GetCount);}public ReadOnlyApiCollection(MyTuple<Func<int,TValue>,Func<int>>tuple):this(tuple.Item1,tuple.Item2){}public virtual IEnumerator<TValue>GetEnumerator()=>enumerator;IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();}public class ReadOnlyCollectionData<TValue>:IReadOnlyList<TValue>,IIndexedCollection<TValue>{public virtual TValue this[int index]=>Getter(index);public virtual int Count=>GetCountFunc();protected readonly Func<int,TValue>Getter;protected readonly Func<int>GetCountFunc;protected readonly CollectionDataEnumerator<TValue>enumerator;public ReadOnlyCollectionData(Func<int,TValue>Getter,Func<int>GetCount){this.Getter=Getter;this.GetCountFunc=GetCount;enumerator=new CollectionDataEnumerator<TValue>(x=>this[x],GetCount);}public ReadOnlyCollectionData(MyTuple<Func<int,TValue>,Func<int>>tuple):this(tuple.Item1,tuple.Item2){}public virtual IEnumerator<TValue>GetEnumerator()=>enumerator;IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();}}﻿using System;using System.Collections;using System.Collections.Generic;namespace RichHudFramework{public interface IIndexedCollection<T>{T this[int index]{get;}int Count{get;}}public class CollectionDataEnumerator<T>:IEnumerator<T>{object IEnumerator.Current=>Current;public T Current=>Getter(index);protected readonly Func<int,T>Getter;protected readonly Func<int>CountFunc;protected int index;public CollectionDataEnumerator(Func<int,T>Getter,Func<int>CountFunc){this.Getter=Getter;this.CountFunc=CountFunc;index=-1;}public void Dispose(){}public bool MoveNext(){index++;return index<CountFunc();}public void Reset(){index=-1;}}}﻿using System;using System.Collections.Generic;using VRage;namespace RichHudFramework{public interface IPooledObjectPolicy<T>{T GetNewObject();void ResetObject(T obj);void ResetRange(IReadOnlyList<T>objects,int index,int count);void ResetRange<T2>(IReadOnlyList<MyTuple<T,T2>>objects,int index,int count);}public class PooledObjectPolicy<T>:IPooledObjectPolicy<T>{private readonly Func<T>GetNewObjectFunc;private readonly Action<T>ResetObjectAction;public PooledObjectPolicy(Func<T>GetNewObjectFunc,Action<T>ResetObjectAction){if(GetNewObjectFunc==null||ResetObjectAction==null)throw new Exception("Neither GetNewObjectFunc nor ResetObjectAction can be null.");this.GetNewObjectFunc=GetNewObjectFunc;this.ResetObjectAction=ResetObjectAction;}public T GetNewObject(){return GetNewObjectFunc();}public void ResetObject(T obj){ResetObjectAction(obj);}public void ResetRange(IReadOnlyList<T>objects,int index,int count){for(int n=0;(n<count&&(index+n)<objects.Count);n++)ResetObjectAction(objects[index+n]);}public void ResetRange<T2>(IReadOnlyList<MyTuple<T,T2>>objects,int index,int count){for(int n=0;(n<count&&(index+n)<objects.Count);n++)ResetObjectAction(objects[index+n].Item1);}}public class ObjectPool<T>{public int Count=>pooledObjects.Count;public int Capacity=>pooledObjects.Capacity;protected readonly List<T>pooledObjects;protected readonly IPooledObjectPolicy<T>objectPolicy;public ObjectPool(IPooledObjectPolicy<T>objectPolicy){if(objectPolicy==null)throw new Exception("Pooled object policy cannot be null.");pooledObjects=new List<T>();this.objectPolicy=objectPolicy;}public ObjectPool(Func<T>GetNewObjectFunc,Action<T>ResetObjectAction){if(GetNewObjectFunc==null||ResetObjectAction==null)throw new Exception("Neither GetNewObjectFunc nor ResetObjectAction can be null.");this.pooledObjects=new List<T>();this.objectPolicy=new PooledObjectPolicy<T>(GetNewObjectFunc,ResetObjectAction);}public T Get(){T obj;if(pooledObjects.Count>0){int last=pooledObjects.Count-1;obj=pooledObjects[last];pooledObjects.RemoveAt(last);}else{obj=objectPolicy.GetNewObject();}return obj;}public void Return(T obj){objectPolicy.ResetObject(obj);pooledObjects.EnsureCapacity(Capacity);pooledObjects.Add(obj);}public void ReturnRange(IReadOnlyList<T>objects,int index=-1,int count=-1){if(index==-1)index=0;if(count==-1)count=objects.Count;objectPolicy.ResetRange(objects,index,count);pooledObjects.EnsureCapacity(Capacity);for(int n=0;(n<count&&(index+n)<objects.Count);n++)pooledObjects.Add(objects[index+n]);}public void ReturnRange<T2>(IReadOnlyList<MyTuple<T,T2>>objects,int index=-1,int count=-1){if(index==-1)index=0;if(count==-1)count=objects.Count;objectPolicy.ResetRange(objects,index,count);pooledObjects.EnsureCapacity(Capacity);for(int n=0;(n<count&&(index+n)<objects.Count);n++)pooledObjects.Add(objects[index+n].Item1);}public void TrimExcess(){pooledObjects.TrimExcess();}public void Clear(){pooledObjects.Clear();}}}﻿using ParallelTasks;using RichHudFramework.Internal;using Sandbox.ModAPI;using System;using System.Collections.Concurrent;using System.Collections.Generic;using System.Text;using VRageMath;namespace RichHudFramework{public class AggregateException:Exception{public AggregateException(string aggregatedMsg):base(aggregatedMsg){}public AggregateException(IReadOnlyList<Exception>exceptions):base(GetExceptionMessages(exceptions)){}public AggregateException(IReadOnlyList<AggregateException>exceptions):base(GetExceptionMessages(exceptions)){}private static string GetExceptionMessages<T>(IReadOnlyList<T>exceptions)where T:Exception{StringBuilder sb=new StringBuilder(exceptions[0].Message.Length*exceptions.Count);for(int n=0;n<exceptions.Count;n++)if(n!=exceptions.Count-1)sb.Append(exceptions[n].ToString()+"\n");else sb.Append(exceptions[n].ToString());return sb.ToString();}}public class KnownException:Exception{public KnownException():base(){}public KnownException(string message):base(message){}public KnownException(string message,Exception innerException):base(message,innerException){}}public class TaskPool:RichHudComponentBase{public static int MaxTasksRunning{get{return maxTasksRunning;}set{maxTasksRunning=MathHelper.Clamp(value,1,10);}}private static int maxTasksRunning=1,tasksRunningCount=0;private readonly List<Task>tasksRunning;private readonly Queue<Action>tasksWaiting;private readonly ConcurrentQueue<Action>actions;private readonly Action<List<KnownException>,AggregateException>errorCallback;public TaskPool(Action<List<KnownException>,AggregateException>errorCallback):base(true,true){this.errorCallback=errorCallback;tasksRunning=new List<Task>();actions=new ConcurrentQueue<Action>();tasksWaiting=new Queue<Action>();}public override void Close(){tasksRunningCount=0;}public override void Draw(){TryStartWaitingTasks();UpdateRunningTasks();RunTaskActions();}public void EnqueueTask(Action action){if(Parent==null&&RichHudCore.Instance!=null)RegisterComponent(RichHudCore.Instance);else if(ExceptionHandler.Unloading)throw new Exception("New tasks cannot be started while the mod is being unloaded.");tasksWaiting.Enqueue(action);}public void EnqueueAction(Action action){if(Parent==null&&RichHudCore.Instance!=null)RegisterComponent(RichHudCore.Instance);else if(ExceptionHandler.Unloading)throw new Exception("New tasks cannot be started while the mod is being unloaded.");actions.Enqueue(action);}private void TryStartWaitingTasks(){Action action;while(tasksRunningCount<maxTasksRunning&&(tasksWaiting.Count>0)&&tasksWaiting.TryDequeue(out action)){tasksRunning.Add(MyAPIGateway.Parallel.Start(action));tasksRunningCount++;}}private void UpdateRunningTasks(){List<KnownException>knownExceptions=new List<KnownException>();List<Exception>otherExceptions=new List<Exception>();AggregateException unknownExceptions=null;for(int n=0;n<tasksRunning.Count;n++){Task task=tasksRunning[n];if(task.Exceptions!=null&&task.Exceptions.Length>0){foreach(Exception exception in task.Exceptions){if(exception is KnownException)knownExceptions.Add((KnownException)exception);else otherExceptions.Add(exception);}}if(!task.valid||task.IsComplete||(task.Exceptions!=null&&task.Exceptions.Length>0)){tasksRunning.Remove(task);tasksRunningCount--;}}if(otherExceptions.Count>0)unknownExceptions=new AggregateException(otherExceptions);errorCallback(knownExceptions,unknownExceptions);}private void RunTaskActions(){Action action;while(actions.Count>0)if(actions.TryDequeue(out action))action();}}}﻿using System.Collections.Generic;using VRageMath;namespace RichHudFramework{public static class CollectionExtensions{public static T[]GetSubarray<T>(this T[]arr,int start){T[]trimmed=new T[arr.Length-start];for(int n=start;n<arr.Length;n++)trimmed[n-start]=arr[n];return trimmed;}public static T[]GetSubarray<T>(this T[]arr,int start,int end){T[]trimmed;end=MathHelper.Clamp(end,0,arr.Length);trimmed=new T[end-start];for(int n=start;n<end;n++)trimmed[n-start]=arr[n];return trimmed;}public static T[]GetUnique<T>(this IReadOnlyList<T>original){var unique=new List<T>(original.Count);foreach(T item in original){if(!unique.Contains(item))unique.Add(item);}return unique.ToArray();}}}﻿using System;namespace RichHudFramework{public static class MathExtensions{public static double Round(this double value,int digits=0)=>Math.Round(value,digits);public static float Round(this float value,int digits=0)=>(float)Math.Round(value,digits);public static float Abs(this float value)=>Math.Abs(value);public static float RadiansToDegrees(this float value)=>(value/(float)Math.PI)*180f;public static float DegreesToRadians(this float value)=>(value*(float)Math.PI)/180f;}}﻿using VRageMath;namespace RichHudFramework{public static class VectorExtensions{public static Vector2D ToDouble(this Vector2 vec)=>new Vector2D(vec.X,vec.Y);public static Vector2 ToSingle(this Vector2D vec)=>new Vector2((float)vec.X,(float)vec.Y);public static Color SetAlphaPct(this Color color,float alphaPercent)=>new Color(color.R,color.G,color.B,(byte)(alphaPercent*255f));public static byte GetChannel(this Color color,int channel){switch(channel){case 0:return color.R;case 1:return color.G;case 2:return color.B;case 3:return color.A;}return 0;}public static Color SetChannel(this Color color,int channel,byte value){switch(channel){case 0:color.R=value;break;case 1:color.G=value;break;case 2:color.B=value;break;case 3:color.A=value;break;}return color;}}}﻿using System.Collections.Generic;using VRage;namespace RichHudFramework{public class ListPoolPolicy<T>:IPooledObjectPolicy<List<T>>{public List<T>GetNewObject(){return new List<T>();}public void ResetObject(List<T>list){list.Clear();}public void ResetRange(IReadOnlyList<List<T>>lists,int index,int count){for(int i=0;(i<count&&(index+i)<lists.Count);i++)lists[index+i].Clear();}public void ResetRange<T2>(IReadOnlyList<MyTuple<List<T>,T2>>lists,int index,int count){for(int i=0;(i<count&&(index+i)<lists.Count);i++)lists[index+i].Item1.Clear();}public static ObjectPool<List<T>>GetNewPool(){return new ObjectPool<List<T>>(new ListPoolPolicy<T>());}}}﻿using System.Collections.Generic;using System.Text;using VRage;namespace RichHudFramework{public class StringBuilderPoolPolicy:IPooledObjectPolicy<StringBuilder>{public StringBuilder GetNewObject(){return new StringBuilder();}public void ResetObject(StringBuilder obj){obj.Clear();}public void ResetRange(IReadOnlyList<StringBuilder>objects,int index,int count){for(int n=0;(n<count&&(index+n)<objects.Count);n++){objects[index+n].Clear();}}public void ResetRange<T2>(IReadOnlyList<MyTuple<StringBuilder,T2>>objects,int index,int count){for(int n=0;(n<count&&(index+n)<objects.Count);n++){objects[index+n].Item1.Clear();}}public static ObjectPool<StringBuilder>GetNewPool(){return new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());}}}﻿using System;using System.Text.RegularExpressions;namespace RichHudFramework{public static partial class Utils{public static class Color{private static readonly Regex colorParser=new Regex(@"(\s*,?(\d{1,3})\s*,?){3,4}");public static bool CanParseColor(string colorData){Match match=colorParser.Match(colorData);CaptureCollection captures=match.Groups[2].Captures;byte r,g,b,a;if(captures.Count>2){if(!byte.TryParse(captures[0].Value,out r))return false;if(!byte.TryParse(captures[1].Value,out g))return false;if(!byte.TryParse(captures[2].Value,out b))return false;if(captures.Count>3){if(!byte.TryParse(captures[3].Value,out a))return false;}return true;}else return false;}public static bool TryParseColor(string colorData,out VRageMath.Color value,bool ignoreAlpha=false){bool successful;try{value=ParseColor(colorData,ignoreAlpha);successful=true;}catch{value=VRageMath.Color.White;successful=false;}return successful;}public static VRageMath.Color ParseColor(string colorData,bool ignoreAlpha=false){Match match=colorParser.Match(colorData);CaptureCollection captures=match.Groups[2].Captures;VRageMath.Color value=new VRageMath.Color();if(captures.Count>2){value.R=byte.Parse(captures[0].Value);value.G=byte.Parse(captures[1].Value);value.B=byte.Parse(captures[2].Value);if(captures.Count>3||ignoreAlpha)value.A=byte.Parse(captures[3].Value);else value.A=255;return value;}else throw new Exception("Color string must contain at least 3 values.");}public static string GetColorString(VRageMath.Color color,bool includeAlpha=true){if(includeAlpha)return$"{color.R},{color.G},{color.B},{color.A}";else return$"{color.R},{color.G},{color.B}";}}}}﻿using System;namespace RichHudFramework{public static partial class Utils{public static class Debug{public static void AssertNotNull<T>(T obj,string message=""){Assert(obj!=null,$"Object of type {typeof(T).ToString()} is null. "+message);}public static void Assert(bool condition,string message=""){if(!condition)throw new Exception("Assertion failed. "+message);}}}}﻿using Sandbox.ModAPI;using System;namespace RichHudFramework{public static partial class Utils{public static class ProtoBuf{public static KnownException TrySerialize<T>(T obj,out byte[]dataOut){KnownException exception=null;dataOut=null;try{dataOut=MyAPIGateway.Utilities.SerializeToBinary(obj);}catch(Exception e){exception=new KnownException($"IO Error. Failed to generate binary from {typeof(T).Name}.",e);}return exception;}public static KnownException TryDeserialize<T>(byte[]dataIn,out T obj){KnownException exception=null;obj=default(T);try{obj=MyAPIGateway.Utilities.SerializeFromBinary<T>(dataIn);}catch(Exception e){exception=new KnownException($"IO Error. Failed to deserialize to {typeof(T).Name}.",e);}return exception;}}}}﻿using Sandbox.ModAPI;using System;namespace RichHudFramework{public static partial class Utils{public static class Xml{public static KnownException TrySerialize<T>(T obj,out string xmlOut){KnownException exception=null;xmlOut=null;try{xmlOut=MyAPIGateway.Utilities.SerializeToXML(obj);}catch(Exception e){exception=new KnownException("IO Error. Failed to generate XML.",e);}return exception;}public static KnownException TryDeserialize<T>(string xmlIn,out T obj){KnownException exception=null;obj=default(T);try{obj=MyAPIGateway.Utilities.SerializeFromXML<T>(xmlIn);}catch(Exception e){exception=new KnownException("IO Error. Unable to interpret XML.",e);}return exception;}}}}﻿using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Diagnostics;using System.Text;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.Utils;namespace RichHudFramework.Internal{[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate)]public sealed class ExceptionHandler:MySessionComponentBase{public static string ModName{get;set;}public static int RecoveryLimit{get;set;}public static int RecoveryAttempts{get;private set;}public static bool PromptForReload{get;set;}public static bool Reloading{get;private set;}public static bool Unloading{get;private set;}public static bool IsClient{get;private set;}public static bool IsServer{get;private set;}public static bool IsDedicated{get;private set;}public static bool ClientsPaused{get;private set;}public static bool DebugLogging{get;set;}private static ExceptionHandler instance;private const long exceptionReportInterval=100,exceptionLoopTime=50;private const int exceptionLoopCount=10;private int exceptionCount;private readonly List<ModBase>clients;private readonly List<string>exceptionMessages;private readonly Stopwatch errorTimer;private Action lastMissionScreen;public ExceptionHandler(){if(instance==null)instance=this;else throw new Exception("Only one instance of ExceptionHandler can exist at any given time.");ModName=DebugName;RecoveryLimit=1;exceptionMessages=new List<string>();errorTimer=new Stopwatch();clients=new List<ModBase>();}public override void LoadData(){IsDedicated=MyAPIGateway.Utilities.IsDedicated;IsServer=MyAPIGateway.Session.OnlineMode==MyOnlineModeEnum.OFFLINE||MyAPIGateway.Multiplayer.IsServer||IsDedicated;IsClient=!IsDedicated;WriteToLogAndConsole($"Exception Handler Init. Dedicated: {IsDedicated}, IsServer: {IsServer}, IsClient: {IsClient}",true);}public static void RegisterClient(ModBase client){if(!instance.clients.Contains(client)){instance.clients.Add(client);WriteToLog($"[{client.GetType().Name}] Session component registered.",true);}}public override void Draw(){if(errorTimer.ElapsedMilliseconds>exceptionReportInterval)HandleExceptions();if(lastMissionScreen!=null&&!MyAPIGateway.Gui.ChatEntryVisible){lastMissionScreen();lastMissionScreen=null;}if(Reloading)FinishReload();}public static void Run(Action Action){try{Action();}catch(Exception e){if(instance!=null)instance.ReportExceptionInternal(e);else WriteToLog("Mod encountered an unhandled exception.\n"+e.ToString()+'\n');}}public static TResult Run<TResult>(Func<TResult>Func){TResult value=default(TResult);try{value=Func();}catch(Exception e){if(instance!=null)instance.ReportExceptionInternal(e);else WriteToLog("Mod encountered an unhandled exception.\n"+e.ToString()+'\n');}return value;}public static void ReportException(Exception e)=>instance.ReportExceptionInternal(e);private void ReportExceptionInternal(Exception e){if(e==null)e=new Exception("Null exception reported.");lock(exceptionMessages){string message=e.ToString();if(!exceptionMessages.Contains(message))exceptionMessages.Add(message);if(exceptionCount==0)errorTimer.Restart();exceptionCount++;if(exceptionCount>exceptionLoopCount&&errorTimer.ElapsedMilliseconds<exceptionLoopTime)PauseClients();}}private void HandleExceptions(){if(exceptionCount>0){string exceptionText=GetExceptionText();exceptionCount=0;WriteToLog("Mod encountered an unhandled exception.\n"+exceptionText+'\n');exceptionMessages.Clear();if(!Unloading&&!Reloading){if(IsClient&&PromptForReload){if(RecoveryAttempts<RecoveryLimit){PauseClients();ShowErrorPrompt(exceptionText,true);}else{UnloadClients();ShowErrorPrompt(exceptionText,false);}}else{if(RecoveryAttempts<RecoveryLimit)StartReload();else UnloadClients();}RecoveryAttempts++;}}}private string GetExceptionText(){StringBuilder errorMessage=new StringBuilder();if(exceptionCount>exceptionLoopCount&&errorTimer.ElapsedMilliseconds<exceptionLoopTime)errorMessage.AppendLine($"[Exception Loop Detected] {exceptionCount} exceptions were reported within a span of {errorTimer.ElapsedMilliseconds}ms.");for(int n=0;n<exceptionMessages.Count-1;n++)errorMessage.AppendLine(exceptionMessages[n]);errorMessage.Append(exceptionMessages[exceptionMessages.Count-1]);errorMessage.Replace("--->","\n   --->");return errorMessage.ToString();}private void ShowErrorPrompt(string errorMessage,bool canReload){if(canReload){ShowMissionScreen("Debug",$"{ModName} has encountered a problem and will need to reload. Press the X in the upper right hand corner "+"to cancel.\n\n"+"Error Details:\n"+errorMessage,AllowReload,"Reload");}else{ShowMissionScreen("Debug",$"{ModName} has encountered an error and was unable to recover.\n\n"+"Error Details:\n"+errorMessage,null,"Close");SendChatMessage($"{ModName} has encountered an error and was unable to recover. See log for details.");}}private void AllowReload(ResultEnum response){if(response==ResultEnum.OK)StartReload();else UnloadClients();}public static void ReloadClients()=>instance.StartReload();public static void ShowMissionScreen(string subHeading=null,string message=null,Action<ResultEnum>callback=null,string okButtonCaption=null){Action messageAction=()=>MyAPIGateway.Utilities.ShowMissionScreen(ModName,subHeading,null,message,callback,okButtonCaption);instance.lastMissionScreen=messageAction;}public static void ShowMessageScreen(string subHeading,string message)=>ShowMissionScreen(subHeading,message,null,"Close");public static void SendChatMessage(string message){if(!IsDedicated){try{MyAPIGateway.Utilities.ShowMessage(ModName,message);}catch{}}}public static void WriteToLog(string message,bool debugOnly=false){if(!(debugOnly&&!DebugLogging)){try{MyLog.Default.WriteLine($"[{ModName}] {message}");}catch{}}}public static void WriteToConsole(string message,bool debugOnly=false){if(!(debugOnly&&!DebugLogging)){try{MyLog.Default.WriteLineToConsole($"[{ModName}] {message}");}catch{}}}public static void WriteToLogAndConsole(string message,bool debugOnly=false){if(!(debugOnly&&!DebugLogging)){try{MyLog.Default.WriteLineAndConsole($"[{ModName}] {message}");}catch{}}}private void PauseClients(){for(int n=0;n<clients.Count;n++)clients[n].CanUpdate=false;ClientsPaused=true;}private void UnpauseClients(){for(int n=0;n<clients.Count;n++)clients[n].CanUpdate=true;ClientsPaused=false;}private void StartReload(){if(!Reloading){WriteToLog("Reloading mod...");Reloading=true;CloseClients();}}private void FinishReload(){if(Reloading){for(int n=0;n<clients.Count;n++){bool success=true;string typeName=clients[n].GetType().Name;Run(()=>{WriteToLog($"[{typeName}] Restarting session component...",true);clients[n].ManualStart();success=clients[n].Loaded;});if(success)WriteToLog($"[{typeName}] Session component started.",true);else WriteToLog($"[{typeName}] Failed to start session component.");}Reloading=false;ClientsPaused=false;WriteToLog("Mod reloaded.");}}private void UnloadClients(){if(!Unloading){WriteToLog("Unloading mod...");Unloading=true;Reloading=false;CloseClients();}WriteToLog("Mod unloaded.");}private void CloseClients(){for(int n=0;n<clients.Count;n++){bool success=false;string typeName=clients[n].GetType().Name;WriteToLog($"[{typeName}] Stopping session component...",true);Run(()=>{if(clients[n].CanUpdate)clients[n].BeforeClose();success=true;});clients[n].CanUpdate=false;if(success)WriteToLog($"[{typeName}] Session component stopped.",true);else WriteToLog($"[{typeName}] Failed to stop session component.");}ClientsPaused=true;for(int n=0;n<clients.Count;n++){bool success=false;string typeName=clients[n].GetType().Name;WriteToLog($"[{typeName}] Closing session component...",true);Run(()=>{clients[n].Close();success=true;});if(success)WriteToLog($"[{typeName}] Session component closed.",true);else WriteToLog($"[{typeName}] Failed to close session component.");}}protected override void UnloadData(){UnloadClients();HandleExceptions();instance=null;WriteToLog("Exception Handler unloaded.",true);}}}﻿using System;using System.Collections.Generic;using VRage.Game;using VRage.Game.Components;namespace RichHudFramework.Internal{public abstract partial class ModBase:MySessionComponentBase{public bool RunOnServer{get;}public bool RunOnClient{get;}public new bool Loaded{get;private set;}public bool CanUpdate{get{return _canUpdate&&((RunOnClient&&ExceptionHandler.IsClient)||(RunOnServer&&ExceptionHandler.IsDedicated));}set{_canUpdate=value;}}private readonly List<ModuleBase>modules;private bool _canUpdate,closing;protected ModBase(bool runOnServer,bool runOnClient){modules=new List<ModuleBase>();RunOnServer=runOnServer;RunOnClient=runOnClient;}public sealed override void LoadData(){if(!Loaded&&!ExceptionHandler.Unloading&&!closing){CanUpdate=true;ExceptionHandler.RegisterClient(this);if(CanUpdate)AfterLoadData();}}protected new virtual void AfterLoadData(){}public sealed override void Init(MyObjectBuilder_SessionComponent sessionComponent){if(!Loaded&&!ExceptionHandler.Unloading&&!closing){if(CanUpdate)AfterInit();Loaded=true;}}protected virtual void AfterInit(){}public void ManualStart(){if(!Loaded&&!ExceptionHandler.Unloading&&!closing){LoadData();Init(null);}}public override void Draw(){if(Loaded&&CanUpdate){ExceptionHandler.Run(()=>{for(int n=0;n<modules.Count;n++){bool updateClient=modules[n].runOnClient&&ExceptionHandler.IsClient,updateServer=modules[n].runOnServer&&ExceptionHandler.IsDedicated;if(updateClient||updateServer)modules[n].Draw();}});}}public override void HandleInput(){if(Loaded&&CanUpdate){ExceptionHandler.Run(()=>{for(int n=0;n<modules.Count;n++){bool updateClient=modules[n].runOnClient&&ExceptionHandler.IsClient,updateServer=modules[n].runOnServer&&ExceptionHandler.IsDedicated;if(updateClient||updateServer)modules[n].HandleInput();}});}}public sealed override void UpdateBeforeSimulation()=>BeforeUpdate();public sealed override void Simulate()=>BeforeUpdate();public sealed override void UpdateAfterSimulation()=>BeforeUpdate();protected virtual void BeforeUpdate(){if(Loaded&&CanUpdate){ExceptionHandler.Run(()=>{for(int n=0;n<modules.Count;n++){bool updateClient=modules[n].runOnClient&&ExceptionHandler.IsClient,updateServer=modules[n].runOnServer&&ExceptionHandler.IsDedicated;if(updateClient||updateServer)modules[n].Update();}Update();});}}protected virtual void Update(){}public virtual void BeforeClose(){}public virtual void Close(){if(!closing){Loaded=false;CanUpdate=false;closing=true;CloseModules();modules.Clear();closing=false;}}private void CloseModules(){string typeName=GetType().Name;for(int n=modules.Count-1;n>=0;n--){var module=modules[n];bool success=false;ExceptionHandler.Run(()=>{ExceptionHandler.WriteToLog($"[{typeName}] Closing {module.GetType().Name} module...",true);module.Close();success=true;});if(success)ExceptionHandler.WriteToLog($"[{typeName}] Closed {module.GetType().Name} module.",true);else ExceptionHandler.WriteToLog($"[{typeName}] Failed to close {module.GetType().Name} module.");module.UnregisterComponent(n);}}protected override void UnloadData(){}public abstract class ModuleBase{protected ModBase Parent{get;private set;}public readonly bool runOnServer,runOnClient;protected ModuleBase(bool runOnServer,bool runOnClient,ModBase parent){this.runOnServer=runOnServer;this.runOnClient=runOnClient;RegisterComponent(parent);}public void RegisterComponent(ModBase parent){if(Parent==null){parent.modules.Add(this);Parent=parent;ExceptionHandler.WriteToLog($"[{Parent.GetType().Name}] Registered {GetType().Name} module.",true);}}public void UnregisterComponent(){if(Parent!=null){Parent.modules.Remove(this);ExceptionHandler.WriteToLog($"[{Parent.GetType().Name}] Unregistered {GetType().Name} module.",true);Parent=null;}}public void UnregisterComponent(int index){if(Parent!=null&&index<Parent.modules.Count&&Parent.modules[index]==this){Parent.modules.RemoveAt(index);ExceptionHandler.WriteToLog($"[{Parent.GetType().Name}] Unregistered {GetType().Name} module.",true);Parent=null;}}public virtual void Draw(){}public virtual void HandleInput(){}public virtual void Update(){}public virtual void Close(){}}public abstract class ParallelModuleBase:ModuleBase{private readonly TaskPool taskPool;protected ParallelModuleBase(bool runOnServer,bool runOnClient,ModBase parent):base(runOnServer,runOnClient,parent){taskPool=new TaskPool(ErrorCallback);}protected virtual void ErrorCallback(List<KnownException>knownExceptions,AggregateException aggregate){if(knownExceptions.Count>0)ExceptionHandler.ReportException(new AggregateException(knownExceptions));if(aggregate!=null)ExceptionHandler.ReportException(aggregate);}protected void EnqueueTask(Action action)=>taskPool.EnqueueTask(action);protected void EnqueueAction(Action action)=>taskPool.EnqueueAction(action);}}}﻿using Sandbox.ModAPI;using System;using System.Diagnostics;using VRage.Game.Components;using VRage.Game.ModAPI;namespace RichHudFramework.Internal{[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate)]public sealed class RichHudCore:ModBase{public static RichHudCore Instance{get;private set;}public static event MessageEnteredDel LateMessageEntered;private readonly Stopwatch handlerRegTimer;public RichHudCore():base(false,true){if(Instance==null)Instance=this;else throw new Exception("Only one instance of RichHudCore can exist at any given time.");handlerRegTimer=new Stopwatch();}public override void BeforeStart(){handlerRegTimer.Start();}private void MessageHandler(string message,ref bool sendToOthers){LateMessageEntered?.Invoke(message,ref sendToOthers);}public override void Draw(){BeforeUpdate();base.Draw();if(handlerRegTimer.IsRunning&&handlerRegTimer.ElapsedMilliseconds>10000){MyAPIGateway.Utilities.MessageEntered+=MessageHandler;handlerRegTimer.Stop();}}public override void Close(){base.Close();if(ExceptionHandler.Unloading){MyAPIGateway.Utilities.MessageEntered-=MessageHandler;Instance=null;}}protected override void UnloadData(){LateMessageEntered=null;}}public abstract class RichHudComponentBase:ModBase.ModuleBase{public RichHudComponentBase(bool runOnServer,bool runOnClient):base(runOnServer,runOnClient,RichHudCore.Instance){}}public abstract class RichHudParallelComponentBase:ModBase.ParallelModuleBase{public RichHudParallelComponentBase(bool runOnServer,bool runOnClient):base(runOnServer,runOnClient,RichHudCore.Instance){}}}﻿using Sandbox.ModAPI;using System;using System.IO;namespace RichHudFramework.IO{public class LocalFileIO{public bool FileExists=>MyAPIGateway.Utilities.FileExistsInLocalStorage(file,typeof(LocalFileIO));public readonly string file;private readonly object fileLock;public LocalFileIO(string file){this.file=file;fileLock=new object();}public KnownException TryDuplicate(string newName){string data;KnownException exception=TryRead(out data);LocalFileIO newFile;if(exception==null&&data!=null){newFile=new LocalFileIO(newName);exception=newFile.TryWrite(data);}return exception;}public KnownException TryAppend(string data){string current;KnownException exception=TryRead(out current);if(exception==null&&current!=null){current+=data;exception=TryWrite(current);}else exception=TryWrite(data);return exception;}public KnownException TryRead(out byte[]stream){KnownException exception=null;BinaryReader reader=null;lock(fileLock){try{reader=MyAPIGateway.Utilities.ReadBinaryFileInLocalStorage(file,typeof(LocalFileIO));stream=reader.ReadBytes(reader.ReadInt32());}catch(Exception e){stream=null;exception=new KnownException($"IO Error. Unable to read from {file}.",e);}finally{if(reader!=null)reader.Close();}}return exception;}public KnownException TryRead(out string data){KnownException exception=null;TextReader reader=null;data=null;lock(fileLock){try{reader=MyAPIGateway.Utilities.ReadFileInLocalStorage(file,typeof(LocalFileIO));data=reader.ReadToEnd();}catch(Exception e){data=null;exception=new KnownException($"IO Error. Unable to read from {file}.",e);}finally{if(reader!=null)reader.Close();}}return exception;}public KnownException TryWrite(byte[]stream){KnownException exception=null;BinaryWriter writer=null;lock(fileLock){try{writer=MyAPIGateway.Utilities.WriteBinaryFileInLocalStorage(file,typeof(LocalFileIO));writer.Write(stream.Length);writer.Write(stream);writer.Flush();}catch(Exception e){exception=new KnownException($"IO Error. Unable to write to {file}.",e);}finally{if(writer!=null)writer.Close();}}return exception;}public KnownException TryWrite(string data){KnownException exception=null;TextWriter writer=null;lock(fileLock){try{writer=MyAPIGateway.Utilities.WriteFileInLocalStorage(file,typeof(LocalFileIO));writer.Write(data);writer.Flush();}catch(Exception e){exception=new KnownException($"IO Error. Unable to write to {file}.",e);}finally{if(writer!=null)writer.Close();}}return exception;}}}﻿using RichHudFramework.Internal;using System;using System.Collections.Generic;namespace RichHudFramework.IO{public sealed class LogIO:RichHudParallelComponentBase{public static bool Accessible=>Instance.accessible;public static string FileName{get{return _fileName;}set{if(value!=_fileName)Instance.logFile=new LocalFileIO(value);_fileName=value;}}private static LogIO Instance{get{if(_instance==null)_instance=new LogIO();else if(_instance.Parent==null&&RichHudCore.Instance!=null)_instance.RegisterComponent(RichHudCore.Instance);return _instance;}set{_instance=value;}}private static LogIO _instance;private static string _fileName;public bool accessible;private LocalFileIO logFile;private LogIO():base(true,true){accessible=true;_fileName="modLog.txt";logFile=new LocalFileIO(_fileName);}protected override void ErrorCallback(List<KnownException>known,AggregateException unknown){if((known!=null&&known.Count>0)||unknown!=null){WriteToLogFinish(false);if(known!=null&&known.Count>0)foreach(Exception e in known)ExceptionHandler.SendChatMessage(e.Message);if(unknown!=null)throw unknown;}}public static bool TryWriteToLog(string message)=>Instance.TryWriteToLogInternal(message);public static void WriteToLogStart(string message)=>Instance.WriteToLogStartInternal(message);public bool TryWriteToLogInternal(string message){if(accessible){message=$"[{DateTime.UtcNow.ToString("MM/dd/yyyy HH:mm:ss:ms")}] {message}";KnownException exception=logFile.TryAppend(message);if(exception!=null){ExceptionHandler.SendChatMessage("Unable to update log; please check your file access permissions.");accessible=false;throw exception;}else{ExceptionHandler.SendChatMessage("Log updated.");accessible=true;return true;}}else return false;}public void WriteToLogStartInternal(string message){if(accessible){message=$"[{DateTime.UtcNow.ToString("MM/dd/yyyy HH:mm:ss:ms")}] {message}";EnqueueTask(()=>{KnownException exception=logFile.TryAppend(message);if(exception!=null){EnqueueAction(()=>WriteToLogFinish(false));throw exception;}else EnqueueAction(()=>WriteToLogFinish(true));});}}private void WriteToLogFinish(bool success){if(!success){if(accessible)ExceptionHandler.SendChatMessage("Unable to update log; please check your file access permissions.");accessible=false;}else{if(accessible)ExceptionHandler.SendChatMessage("Log updated.");accessible=true;}}}}﻿using RichHudFramework.Internal;using System;using System.Collections;using System.Collections.Generic;using System.Text.RegularExpressions;using VRage;using VRage.Game.Components;namespace RichHudFramework.UI{public interface ICommandGroup:IIndexedCollection<IChatCommand>{string Prefix{get;}bool TryAdd(string name,Action<string[]>callback=null,int argsRequired=0);void AddCommands(CmdGroupInitializer newCommands);}public interface IChatCommand{event Action<string[]>CommandInvoked;string CmdName{get;}int ArgsRequired{get;}}public class CmdGroupInitializer:IReadOnlyList<MyTuple<string,Action<string[]>,int>>{public MyTuple<string,Action<string[]>,int>this[int index]=>data[index];public int Count=>data.Count;private readonly List<MyTuple<string,Action<string[]>,int>>data;public CmdGroupInitializer(int capacity=0){data=new List<MyTuple<string,Action<string[]>,int>>(capacity);}public void Add(string cmdName,Action<string[]>callback=null,int argsRequrired=0){data.Add(new MyTuple<string,Action<string[]>,int>(cmdName,callback,argsRequrired));}public IEnumerator<MyTuple<string,Action<string[]>,int>>GetEnumerator()=>data.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>data.GetEnumerator();}[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate,0)]public sealed class CmdManager:MySessionComponentBase{public static IReadOnlyList<ICommandGroup>CommandGroups=>instance?.commandGroups;private static CmdManager instance;private readonly Regex cmdParser;private readonly List<CommandGroup>commandGroups;private readonly Dictionary<string,Command>commands;public CmdManager(){if(instance==null)instance=this;else throw new Exception("Only one instance of CmdManager can exist at any given time.");commandGroups=new List<CommandGroup>();commands=new Dictionary<string,Command>();cmdParser=new Regex(@"((\s*?[\s,;|]\s*?)((\w+)|("".+"")))+");RichHudCore.LateMessageEntered+=MessageHandler;}protected override void UnloadData(){RichHudCore.LateMessageEntered-=MessageHandler;instance=null;}public static ICommandGroup GetOrCreateGroup(string prefix,CmdGroupInitializer groupInitializer=null){prefix=prefix.ToLower();CommandGroup group=instance.commandGroups.Find(x=>x.Prefix==prefix);if(group==null){group=new CommandGroup(prefix);instance.commandGroups.Add(group);group.AddCommands(groupInitializer);}return group;}private void MessageHandler(string message,ref bool sendToOthers){message=message.ToLower();CommandGroup group=commandGroups.Find(x=>message.StartsWith(x.Prefix));if(group!=null){sendToOthers=false;ExceptionHandler.Run(()=>group.TryRunCommand(message));}}public static bool TryParseCommand(string cmd,out string[]matches){Match match=instance.cmdParser.Match(cmd);CaptureCollection captures=match.Groups[3].Captures;matches=new string[captures.Count];for(int n=0;n<captures.Count;n++){matches[n]=captures[n].Value;if(matches[n][0]=='"'&&matches[n][matches[n].Length-1]=='"')matches[n]=matches[n].Substring(1,matches[n].Length-2);}return matches.Length>0;}private class CommandGroup:ICommandGroup{public IChatCommand this[int index]=>commands[index];public int Count=>commands.Count;public ICommandGroup Commands=>this;public string Prefix{get;}private readonly List<Command>commands;public CommandGroup(string prefix){commands=new List<Command>();this.Prefix=prefix;}public bool TryRunCommand(string message){bool cmdFound=false,success=false;string[]matches;if(TryParseCommand(message,out matches)){string cmdName=matches[0];Command command;if(instance.commands.TryGetValue($"{Prefix}.{cmdName}",out command)){string[]args=matches.GetSubarray(1);cmdFound=true;if(args.Length>=command.ArgsRequired){command.InvokeCommand(args);success=true;}else ExceptionHandler.SendChatMessage($"Error: {cmdName} command requires at least {command.ArgsRequired} argument(s).");}}if(!cmdFound)ExceptionHandler.SendChatMessage("Command not recognised.");return success;}public bool TryAdd(string name,Action<string[]>callback=null,int argsRequired=0){name=name.ToLower();string key=$"{Prefix}.{name}";if(instance!=null&&!instance.commands.ContainsKey(key)){Command command=new Command(name,argsRequired);commands.Add(command);instance.commands.Add(key,command);if(callback!=null)command.CommandInvoked+=callback;return true;}else return false;}public void AddCommands(CmdGroupInitializer newCommands){for(int n=0;n<newCommands.Count;n++){var cmd=newCommands[n];TryAdd(cmd.Item1,cmd.Item2,cmd.Item3);}}}private class Command:IChatCommand{public event Action<string[]>CommandInvoked;public string CmdName{get;}public int ArgsRequired{get;}public Command(string cmdName,int argsRequired){CmdName=cmdName.ToLower();ArgsRequired=argsRequired;}public void InvokeCommand(string[]args)=>CommandInvoked?.Invoke(args);}}}﻿using RichHudFramework.Internal;using VRage.Input;namespace RichHudFramework.UI{using Client;public sealed class SharedBinds:RichHudComponentBase{public static IBind LeftButton{get{return Instance.sharedMain[0];}}public static IBind RightButton{get{return Instance.sharedMain[1];}}public static IBind MousewheelUp{get{return Instance.sharedMain[2];}}public static IBind MousewheelDown{get{return Instance.sharedMain[3];}}public static IBind Enter{get{return Instance.sharedMain[4];}}public static IBind Back{get{return Instance.sharedMain[5];}}public static IBind Delete{get{return Instance.sharedMain[6];}}public static IBind Escape{get{return Instance.sharedMain[7];}}public static IBind SelectAll{get{return Instance.sharedMain[8];}}public static IBind Copy{get{return Instance.sharedMain[9];}}public static IBind Cut{get{return Instance.sharedMain[10];}}public static IBind Paste{get{return Instance.sharedMain[11];}}public static IBind UpArrow{get{return Instance.sharedMain[12];}}public static IBind DownArrow{get{return Instance.sharedMain[13];}}public static IBind LeftArrow{get{return Instance.sharedMain[14];}}public static IBind RightArrow{get{return Instance.sharedMain[15];}}public static IBind PageUp{get{return Instance.sharedMain[16];}}public static IBind PageDown{get{return Instance.sharedMain[17];}}public static IBind Space{get{return Instance.sharedMain[18];}}public static IBind Control{get{return Instance.sharedModifiers[0];}}public static IBind Shift{get{return Instance.sharedModifiers[1];}}public static IBind Alt{get{return Instance.sharedModifiers[2];}}private static SharedBinds Instance{get{Init();return instance;}set{instance=value;}}private static SharedBinds instance;private readonly IBindGroup sharedMain,sharedModifiers;private SharedBinds():base(false,true){sharedMain=BindManager.GetOrCreateGroup("SharedBinds");sharedMain.RegisterBinds(new BindGroupInitializer{{"leftbutton",MyKeys.LeftButton},{"rightbutton",MyKeys.RightButton},{"mousewheelup",RichHudControls.MousewheelUp},{"mousewheeldown",RichHudControls.MousewheelDown},{"enter",MyKeys.Enter},{"back",MyKeys.Back},{"delete",MyKeys.Delete},{"escape",MyKeys.Escape},{"selectall",MyKeys.Control,MyKeys.A},{"copy",MyKeys.Control,MyKeys.C},{"cut",MyKeys.Control,MyKeys.X},{"paste",MyKeys.Control,MyKeys.V},{"uparrow",MyKeys.Up},{"downarrow",MyKeys.Down},{"leftarrow",MyKeys.Left},{"rightarrow",MyKeys.Right},{"pageup",MyKeys.PageUp},{"pagedown",MyKeys.PageDown},{"space",MyKeys.Space},});sharedModifiers=BindManager.GetOrCreateGroup("SharedModifiers");sharedModifiers.RegisterBinds(new BindGroupInitializer{{"shift",MyKeys.Shift},{"control",MyKeys.Control},{"alt",MyKeys.Alt},});}private static void Init(){if(instance==null)instance=new SharedBinds();}public override void Close(){Instance=null;}}}﻿using Sandbox.ModAPI;using System;using VRage.Collections;namespace RichHudFramework.UI{public class TextInput{public Func<char,bool>IsCharAllowedFunc;private readonly Action<char>OnAppendAction;private readonly Action OnBackspaceAction;public TextInput(Action<char>OnAppendAction,Action OnBackspaceAction,Func<char,bool>IsCharAllowedFunc=null){this.OnAppendAction=OnAppendAction;this.OnBackspaceAction=OnBackspaceAction;this.IsCharAllowedFunc=IsCharAllowedFunc;}private void Backspace(){OnBackspaceAction?.Invoke();}public void HandleInput(){ListReader<char>input=MyAPIGateway.Input.TextInput;if(SharedBinds.Back.IsPressedAndHeld||SharedBinds.Back.IsNewPressed)Backspace();for(int n=0;n<input.Count;n++){if(input[n]!='\b'&&(IsCharAllowedFunc==null||IsCharAllowedFunc(input[n]))){OnAppendAction?.Invoke(input[n]);}}}}}﻿using System;namespace RichHudFramework.UI{[Flags]public enum SeBlacklistModes:int{None=0x0,Mouse=0x1,AllKeys=0x2|Mouse,CameraRot=0x4,MouseAndCam=Mouse|CameraRot,Full=AllKeys|CameraRot}public enum BindClientAccessors:int{GetOrCreateGroup=1,GetBindGroup=2,GetComboIndices=3,GetControlByName=4,ClearBindGroups=5,Unload=6,RequestBlacklistMode=7,IsChatOpen=8,}}﻿using System.Xml.Serialization;using VRage;using BindDefinitionData=VRage.MyTuple<string,string[]>;namespace RichHudFramework{namespace UI{[XmlType(TypeName="Bind")]public struct BindDefinition{[XmlAttribute]public string name;[XmlArray("Controls")]public string[]controlNames;public BindDefinition(string name,string[]controlNames){this.name=name;this.controlNames=controlNames;}public static implicit operator BindDefinition(BindDefinitionData value){return new BindDefinition(value.Item1,value.Item2);}public static implicit operator MyTuple<string,string[]>(BindDefinition value){return new BindDefinitionData(value.name,value.controlNames);}}}}﻿using System.Collections.Generic;using VRage;using VRage.Input;namespace RichHudFramework{namespace UI{using Client;using System.Collections;public class BindGroupInitializer:IReadOnlyList<MyTuple<string,IReadOnlyList<int>>>{public MyTuple<string,IReadOnlyList<int>>this[int index]=>bindData[index];public int Count=>bindData.Count;private readonly List<MyTuple<string,IReadOnlyList<int>>>bindData;public BindGroupInitializer(){bindData=new List<MyTuple<string,IReadOnlyList<int>>>();}public IEnumerator<MyTuple<string,IReadOnlyList<int>>>GetEnumerator()=>bindData.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();public void Add(string bindName,string con1,string con2=null,string con3=null){var names=new List<string>();if(con1!=null)names.Add(con1);if(con2!=null)names.Add(con2);if(con3!=null)names.Add(con3);bindData.Add(new MyTuple<string,IReadOnlyList<int>>(bindName,BindManager.GetComboIndices(names)));}public void Add(string bindName,int con1,int con2=-1,int con3=-1){var indices=new List<int>();if(con1!=-1)indices.Add(con1);if(con2!=-1)indices.Add(con2);if(con3!=-1)indices.Add(con3);bindData.Add(new MyTuple<string,IReadOnlyList<int>>(bindName,indices));}public void Add(string bindName,ControlData con1=null,ControlData con2=null,ControlData con3=null){var indices=new List<int>();if(con1!=null)indices.Add(con1);if(con2!=null)indices.Add(con2);if(con3!=null)indices.Add(con3);bindData.Add(new MyTuple<string,IReadOnlyList<int>>(bindName,indices));}public BindDefinition[]GetBindDefinitions(){var definitions=new BindDefinition[bindData.Count];for(int a=0;a<definitions.Length;a++){var controlNames=new string[bindData[a].Item2.Count];for(int b=0;b<controlNames.Length;b++)controlNames[b]=BindManager.Controls[bindData[a].Item2[b]].Name;definitions[a]=new BindDefinition(bindData[a].Item1,controlNames);}return definitions;}}public class ControlData{public readonly int index;public ControlData(MyKeys key){index=BindManager.GetControl(key).Index;}public ControlData(RichHudControls key){index=BindManager.GetControl(key).Index;}public static implicit operator int(ControlData control)=>control.index;public static implicit operator ControlData(MyKeys key)=>new ControlData(key);public static implicit operator ControlData(RichHudControls key)=>new ControlData(key);}}}﻿namespace RichHudFramework{namespace UI{public enum RichHudControls:int{MousewheelUp=256,MousewheelDown=257,}}}﻿using System.Collections.Generic;namespace RichHudFramework{namespace UI{public interface IBind{string Name{get;}int Index{get;}bool Analog{get;}bool IsNewPressed{get;}bool IsPressed{get;}bool IsPressedAndHeld{get;}bool IsReleased{get;}event EventHandler NewPressed;event EventHandler PressedAndHeld;event EventHandler Released;List<IControl>GetCombo();List<int>GetComboIndices();bool TrySetCombo(IReadOnlyList<IControl>combo,bool strict=true,bool silent=true);bool TrySetCombo(IReadOnlyList<int>combo,bool strict=true,bool silent=true);bool TrySetCombo(IReadOnlyList<string>combo,bool strict=true,bool silent=true);void ClearCombo();void ClearSubscribers();}public enum BindAccesssors:int{Name=1,Analog=2,Index=3,IsPressed=4,IsNewPressed=5,IsPressedAndHeld=6,IsReleased=7,OnNewPress=8,OnPressAndHold=9,OnRelease=10,GetCombo=11,TrySetComboWithIndices=12,TrySetComboWithNames=13,ClearCombo=14,ClearSubscribers=15,}}}﻿using System.Collections.Generic;using VRage;using BindDefinitionData=VRage.MyTuple<string,string[]>;namespace RichHudFramework{namespace UI{public interface IBindGroup:IReadOnlyList<IBind>{IBind this[string name]{get;}string Name{get;}int Index{get;}object ID{get;}bool DoesBindExist(string name);bool DoesComboConflict(IReadOnlyList<IControl>newCombo,IBind exception=null);bool DoesComboConflict(IReadOnlyList<int>newCombo,int exception=-1);bool TryLoadBindData(IReadOnlyList<BindDefinitionData>bindData);bool TryLoadBindData(IReadOnlyList<BindDefinition>bindData);void RegisterBinds(BindGroupInitializer bindData);void RegisterBinds(IReadOnlyList<MyTuple<string,IReadOnlyList<int>>>bindData);void RegisterBinds(IReadOnlyList<string>bindNames);void RegisterBinds(IReadOnlyList<BindDefinition>bindData);void RegisterBinds(IReadOnlyList<BindDefinitionData>bindData);IBind GetBind(string name);IBind AddBind(string bindName,IReadOnlyList<string>combo);IBind AddBind(string bindName,IReadOnlyList<ControlData>combo=null);IBind AddBind(string bindName,IReadOnlyList<int>combo);IBind AddBind(string bindName,IReadOnlyList<IControl>combo=null);bool TryRegisterBind(string bindName,out IBind newBind);bool TryRegisterBind(string bindName,IReadOnlyList<int>combo,out IBind newBind);bool TryRegisterBind(string bindName,out IBind newBind,IReadOnlyList<int>combo);bool TryRegisterBind(string bindName,out IBind bind,IReadOnlyList<string>combo);bool TryRegisterBind(string bindName,out IBind newBind,IReadOnlyList<IControl>combo);BindDefinition[]GetBindDefinitions();BindDefinitionData[]GetBindData();void ClearSubscribers();}public enum BindGroupAccessors:int{Name=1,ID=2,DoesComboConflict=3,TryRegisterBindName=4,TryRegisterBindWithIndices=5,TryRegisterBindWithNames=6,TryLoadBindData=7,GetBindData=8,DoesBindExist=9,GetBindFromName=10,RegisterBindNames=11,RegisterBindIndices=12,RegisterBindDefinitions=13,AddBindWithIndices=14,AddBindWithNames=15,ClearSubscribers=16,}}}﻿namespace RichHudFramework{namespace UI{public interface IControl{string Name{get;}string DisplayName{get;}int Index{get;}bool IsPressed{get;}bool IsNewPressed{get;}bool IsReleased{get;}bool Analog{get;}}public enum ControlAccessors:int{Name=1,DisplayName=2,Index=3,IsPressed=4,Analog=5,IsNewPressed=6,IsReleased=7}}}﻿using System;namespace RichHudFramework{namespace UI{[Flags]public enum DimAlignments:byte{None=0x0,Width=0x1,Height=0x2,Both=Width|Height,IgnorePadding=0x4,}[Flags]public enum ParentAlignments:byte{Center=0x0,Left=0x1,Top=0x2,Right=0x4,Bottom=0x8,InnerH=0x10,InnerV=0x20,Inner=InnerH|InnerV,UsePadding=0x40,}}}﻿using System;namespace RichHudFramework{public delegate void EventHandler(object sender,EventArgs e);namespace UI{public enum HudMainAccessors:int{ScreenWidth=1,ScreenHeight=2,AspectRatio=3,ResScale=4,Fov=5,FovScale=6,PixelToWorldTransform=7,ClipBoard=8,UiBkOpacity=9,EnableCursor=10,RefreshDrawList=11,GetUpdateAccessors=12,GetFocusOffset=13,GetPixelSpaceFunc=14,GetPixelSpaceOriginFunc=15,GetInputFocus=16,TreeRefreshRate=17,InputMode=18,SetBeforeDrawCallback=19,SetAfterDrawCallback=20,SetBeforeInputCallback=21,SetAfterInputCallback=22,}public enum HudInputMode:int{NoInput=0,CursorOnly=1,Full=2}public enum ListBoxEntryAccessors:int{Name=1,Enabled=2,AssocObject=3,ID=4,}public enum ListBoxAccessors:int{ListMembers=1,Add=2,Selection=3,SelectionIndex=4,SetSelectionAtData=5,Insert=6,Remove=7,RemoveAt=8,ClearEntries=9}}}namespace RichHudFramework.UI.Server{}namespace RichHudFramework.UI.Rendering.Server{}﻿using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using HudSpaceDelegate=System.Func<VRage.MyTuple<bool,float,VRageMath.MatrixD>>;namespace RichHudFramework{namespace UI{public enum HudCursorAccessors:int{Visible=0,IsCaptured=1,ScreenPos=2,WorldPos=3,WorldLine=4,RegisterToolTip=5,IsToolTipRegistered=6,}public interface ICursor{bool Visible{get;}bool IsCaptured{get;}bool IsToolTipRegistered{get;}Vector2 ScreenPos{get;}Vector3D WorldPos{get;}LineD WorldLine{get;}bool IsCapturingSpace(HudSpaceDelegate GetHudSpaceFunc);bool TryCaptureHudSpace(float depthSquared,HudSpaceDelegate GetHudSpaceFunc);void CaptureHudSpace(float depthSquared,HudSpaceDelegate GetHudSpaceFunc);void Capture(ApiMemberAccessor capturedElement);bool IsCapturing(ApiMemberAccessor capturedElement);bool TryCapture(ApiMemberAccessor capturedElement);bool TryRelease(ApiMemberAccessor capturedElement);void RegisterToolTip(ToolTip toolTip);}}}﻿using VRageMath;namespace RichHudFramework.UI{public static class TerminalFormatting{public static readonly GlyphFormat HeaderFormat=new GlyphFormat(Color.White,TextAlignment.Center,1.15f);public static readonly GlyphFormat ControlFormat=GlyphFormat.Blueish.WithSize(1.08f);public static readonly GlyphFormat InvControlFormat=ControlFormat.WithColor(Charcoal);public static readonly GlyphFormat WarningFormat=new GlyphFormat(new Color(200,55,55));public static readonly Color OuterSpace=new Color(42,55,62);public static readonly Color DarkSlateGrey=new Color(41,54,62);public static readonly Color Gunmetal=new Color(39,50,57);public static readonly Color Dark=new Color(32,39,45);public static readonly Color LimedSpruce=new Color(61,70,78);public static readonly Color Atomic=new Color(60,76,82);public static readonly Color MistBlue=new Color(103,109,123);public static readonly Color StormGrey=new Color(114,121,136);public static readonly Color MidGrey=new Color(86,93,104);public static readonly Color EbonyClay=new Color(34,44,53);public static readonly Color Mercury=new Color(225,230,236);public static readonly Color BlackPerl=new Color(29,37,40);public static readonly Color Cinder=new Color(33,41,45);public static readonly Color Charcoal=new Color(39,49,55);public static readonly Color Mint=new Color(142,188,206);public static readonly Color DullMint=new Color(91,115,123);}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using RichStringMembers=VRage.MyTuple<System.Text.StringBuilder,VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>>;namespace RichHudFramework{namespace UI{using ToolTipMembers=MyTuple<List<RichStringMembers>,Color?>;public class ToolTip{public static readonly GlyphFormat DefaultText=GlyphFormat.Blueish.WithSize(.75f);public static readonly Color DefaultBG=new Color(73,86,95),orangeWarningBG=new Color(180,110,0),redWarningBG=new Color(126,39,44);public RichText text;public Color?bgColor;public readonly Func<ToolTipMembers>GetToolTipFunc;public ToolTip(){bgColor=DefaultBG;GetToolTipFunc=()=>new ToolTipMembers(){Item1=text?.apiData,Item2=bgColor,};}public ToolTip(Func<ToolTipMembers>GetToolTipFunc){bgColor=DefaultBG;this.GetToolTipFunc=GetToolTipFunc;}public static implicit operator ToolTip(RichText text)=>new ToolTip(){text=text};public static implicit operator ToolTip(string text)=>new ToolTip(){text=new RichText(text,DefaultText)};}}}﻿using System;using VRageMath;namespace RichHudFramework{namespace UI{using Client;using Internal;public abstract class HudElementBase:HudNodeBase,IReadOnlyHudElement{protected const float minMouseBounds=8f;protected const HudElementStates elementNotVisible=~(HudElementStates.IsVisible|HudElementStates.IsMousedOver|HudElementStates.IsMouseInBounds);public override bool Visible{set{if(value)State|=HudElementStates.IsVisible;else State&=elementNotVisible;}}public sealed override HudParentBase Parent{protected set{_parent=value;_parentFull=value as HudElementBase;}}public Vector2 Size{get{return new Vector2(Width,Height);}set{Width=value.X;Height=value.Y;}}public virtual float Width{get{return _size.X+Padding.X;}set{if(value>Padding.X)value-=Padding.X;_size.X=value;}}public virtual float Height{get{return _size.Y+Padding.Y;}set{if(value>Padding.Y)value-=Padding.Y;_size.Y=value;}}public virtual Vector2 Padding{get{return _padding;}set{_padding=value;}}public Vector2 Origin=>(_parentFull==null)?Vector2.Zero:_parentFull.cachedPosition+originAlignment;public Vector2 Offset{get;set;}public Vector2 Position=>Origin+Offset;public ParentAlignments ParentAlignment{get;set;}public DimAlignments DimAlignment{get;set;}public bool UseCursor{get{return(State&HudElementStates.CanUseCursor)>0;}set{if(value)State|=HudElementStates.CanUseCursor;else State&=~HudElementStates.CanUseCursor;}}public bool ShareCursor{get{return(State&HudElementStates.CanShareCursor)>0;}set{if(value)State|=HudElementStates.CanShareCursor;else State&=~HudElementStates.CanShareCursor;}}public bool IsMasking{get{return(State&HudElementStates.IsMasking)>0;}set{if(value)State|=HudElementStates.IsMasking;else State&=~HudElementStates.IsMasking;}}public bool IsSelectivelyMasked{get{return(State&HudElementStates.IsSelectivelyMasked)>0;}set{if(value)State|=HudElementStates.IsSelectivelyMasked;else State&=~HudElementStates.IsSelectivelyMasked;}}public bool CanIgnoreMasking{get{return(State&HudElementStates.CanIgnoreMasking)>0;}set{if(value)State|=HudElementStates.CanIgnoreMasking;else State&=~HudElementStates.CanIgnoreMasking;}}public virtual bool IsMousedOver=>(State&HudElementStates.IsMousedOver)>0;protected Vector2 _size;protected Vector2 _padding;protected Vector2 cachedOrigin,cachedPosition,cachedSize,cachedPadding;protected BoundingBox2?maskingBox;protected HudElementBase _parentFull;private Vector2 originAlignment;public HudElementBase(HudParentBase parent):base(parent){DimAlignment=DimAlignments.None;ParentAlignment=ParentAlignments.Center;}protected override void InputDepth(){State&=~HudElementStates.IsMouseInBounds;if(HudMain.InputMode!=HudInputMode.NoInput&&(HudSpace?.IsFacingCamera??false)){Vector3 cursorPos=HudSpace.CursorPos;Vector2 halfSize=Vector2.Max(cachedSize,new Vector2(minMouseBounds))*.5f;BoundingBox2 box=new BoundingBox2(cachedPosition-halfSize,cachedPosition+halfSize);bool mouseInBounds;if(maskingBox==null)mouseInBounds=box.Contains(new Vector2(cursorPos.X,cursorPos.Y))==ContainmentType.Contains;else mouseInBounds=box.Intersect(maskingBox.Value).Contains(new Vector2(cursorPos.X,cursorPos.Y))==ContainmentType.Contains;if(mouseInBounds){State|=HudElementStates.IsMouseInBounds;HudMain.Cursor.TryCaptureHudSpace(cursorPos.Z,HudSpace.GetHudSpaceFunc);}}}public override void BeginInput(){if(!ExceptionHandler.ClientsPaused){try{State&=~(HudElementStates.IsMousedOver|HudElementStates.WasParentInputEnabled);if(_parent!=null)State|=_parent.InputEnabled?HudElementStates.WasParentInputEnabled:HudElementStates.None;if(Visible&&InputEnabled){Vector3 cursorPos=HudSpace.CursorPos;bool mouseInBounds=(State&HudElementStates.IsMouseInBounds)>0;if(UseCursor&&mouseInBounds&&!HudMain.Cursor.IsCaptured&&HudMain.Cursor.IsCapturingSpace(HudSpace.GetHudSpaceFunc)){bool isMousedOver=mouseInBounds;if(isMousedOver)State|=HudElementStates.IsMousedOver;HandleInput(new Vector2(cursorPos.X,cursorPos.Y));if(!ShareCursor)HudMain.Cursor.Capture(accessorDelegates.Item1);}else{HandleInput(new Vector2(cursorPos.X,cursorPos.Y));}}}catch(Exception e){ExceptionHandler.ReportException(e);}}}public override void BeginLayout(bool refresh){if(!ExceptionHandler.ClientsPaused){try{layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData,_parent);if(_parent==null){ParentVisible=false;}else{ParentVisible=_parent.Visible;}if(Visible||refresh){UpdateCache();Layout();cachedPadding=Padding;cachedSize=new Vector2(Width,Height);cachedPosition=cachedOrigin+Offset;UpdateMasking();}}catch(Exception e){ExceptionHandler.ReportException(e);}}}public override void BeginDraw(){if(!ExceptionHandler.ClientsPaused){try{if(Visible){UpdateCache();Draw();}}catch(Exception e){ExceptionHandler.ReportException(e);}}}protected void UpdateCache(){cachedPadding=Padding;if(_parentFull!=null){GetDimAlignment();originAlignment=GetParentAlignment();cachedOrigin=_parentFull.cachedPosition+originAlignment;cachedPosition=cachedOrigin+Offset;}else{cachedSize=new Vector2(Width,Height);cachedOrigin=Vector2.Zero;cachedPosition=cachedOrigin+Offset;}}private void UpdateMasking(){if(_parentFull!=null&&(_parentFull.State&HudElementStates.IsMasked)>0&&(State&HudElementStates.CanIgnoreMasking)==0)State|=HudElementStates.IsMasked;else State&=~HudElementStates.IsMasked;if((State&HudElementStates.IsMasking)>0||(_parentFull!=null&&(State&HudElementStates.IsSelectivelyMasked)>0)){State|=HudElementStates.IsMasked;BoundingBox2?parentBox,box=null;if((State&HudElementStates.CanIgnoreMasking)>0){parentBox=null;}else if(_parentFull!=null&&(State&HudElementStates.IsSelectivelyMasked)>0){Vector2 halfParent=.5f*_parentFull.cachedSize;parentBox=new BoundingBox2(-halfParent+_parentFull.cachedPosition,halfParent+_parentFull.cachedPosition);if(_parentFull.maskingBox!=null)parentBox=parentBox.Value.Intersect(_parentFull.maskingBox.Value);}else parentBox=_parentFull?.maskingBox;if((State&HudElementStates.IsMasking)>0){Vector2 halfSize=.5f*cachedSize;box=new BoundingBox2(-halfSize+cachedPosition,halfSize+cachedPosition);}if(parentBox!=null&&box!=null)box=box.Value.Intersect(parentBox.Value);else if(box==null)box=parentBox;maskingBox=box;}else if((State&HudElementStates.IsMasked)>0){maskingBox=_parentFull?.maskingBox;}else{maskingBox=null;}}private void GetDimAlignment(){float width=Width,height=Height;if(DimAlignment!=DimAlignments.None){float parentWidth=_parentFull.cachedSize.X,parentHeight=_parentFull.cachedSize.Y;if((DimAlignment&DimAlignments.IgnorePadding)==DimAlignments.IgnorePadding){Vector2 parentPadding=_parentFull.cachedPadding;if((DimAlignment&DimAlignments.Width)==DimAlignments.Width)width=parentWidth-parentPadding.X;if((DimAlignment&DimAlignments.Height)==DimAlignments.Height)height=parentHeight-parentPadding.Y;}else{if((DimAlignment&DimAlignments.Width)==DimAlignments.Width)width=parentWidth;if((DimAlignment&DimAlignments.Height)==DimAlignments.Height)height=parentHeight;}Width=width;Height=height;}cachedSize=new Vector2(width,height);}private Vector2 GetParentAlignment(){Vector2 alignment=Vector2.Zero,max=(_parentFull.cachedSize+cachedSize)*.5f,min=-max;if((ParentAlignment&ParentAlignments.UsePadding)==ParentAlignments.UsePadding){min+=_parentFull.cachedPadding*.5f;max-=_parentFull.cachedPadding*.5f;}if((ParentAlignment&ParentAlignments.InnerV)==ParentAlignments.InnerV){min.Y+=cachedSize.Y;max.Y-=cachedSize.Y;}if((ParentAlignment&ParentAlignments.InnerH)==ParentAlignments.InnerH){min.X+=cachedSize.X;max.X-=cachedSize.X;}if((ParentAlignment&ParentAlignments.Bottom)==ParentAlignments.Bottom)alignment.Y=min.Y;else if((ParentAlignment&ParentAlignments.Top)==ParentAlignments.Top)alignment.Y=max.Y;if((ParentAlignment&ParentAlignments.Left)==ParentAlignments.Left)alignment.X=min.X;else if((ParentAlignment&ParentAlignments.Right)==ParentAlignments.Right)alignment.X=max.X;return alignment;}protected override object GetOrSetApiMember(object data,int memberEnum){switch((HudElementAccessors)memberEnum){case HudElementAccessors.Position:return Position;case HudElementAccessors.Size:return Size;}return base.GetOrSetApiMember(data,memberEnum);}}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using Internal;using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;public abstract partial class HudNodeBase:HudParentBase,IReadOnlyHudNode{protected const HudElementStates nodeVisible=HudElementStates.IsVisible|HudElementStates.WasParentVisible|HudElementStates.IsRegistered,nodeInputEnabled=HudElementStates.IsInputEnabled|HudElementStates.WasParentInputEnabled;protected const int maxPreloadDepth=5;IReadOnlyHudParent IReadOnlyHudNode.Parent=>_parent;public virtual HudParentBase Parent{get{return _parent;}protected set{_parent=value;}}public override bool Visible=>(State&nodeVisible)==nodeVisible;public override bool InputEnabled=>(State&nodeInputEnabled)==nodeInputEnabled;public bool Registered=>(State&HudElementStates.IsRegistered)>0;protected bool ParentVisible{get{return(State&HudElementStates.WasParentVisible)>0;}set{if(value)State|=HudElementStates.WasParentVisible;else State&=~HudElementStates.WasParentVisible;}}protected HudParentBase _parent;public HudNodeBase(HudParentBase parent){State&=~HudElementStates.IsRegistered;ParentVisible=true;Register(parent);}public override void BeginInput(){if(!ExceptionHandler.ClientsPaused){try{State&=~HudElementStates.WasParentInputEnabled;if(_parent!=null)State|=_parent.InputEnabled?HudElementStates.WasParentInputEnabled:HudElementStates.None;if(Visible&&InputEnabled){Vector3 cursorPos=HudSpace.CursorPos;HandleInput(new Vector2(cursorPos.X,cursorPos.Y));}}catch(Exception e){ExceptionHandler.ReportException(e);}}}public override void BeginLayout(bool refresh){if(!ExceptionHandler.ClientsPaused){try{layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData,_parent);if(_parent==null){ParentVisible=false;}else{ParentVisible=_parent.Visible;}if(Visible||refresh)Layout();}catch(Exception e){ExceptionHandler.ReportException(e);}}}public override void GetUpdateAccessors(List<HudUpdateAccessors>UpdateActions,byte preloadDepth){bool wasSetVisible=(State&HudElementStates.IsVisible)>0;State|=HudElementStates.WasParentVisible;if(!wasSetVisible&&(State&HudElementStates.CanPreload)>0)preloadDepth++;if(preloadDepth<maxPreloadDepth&&(State&HudElementStates.CanPreload)>0)State|=HudElementStates.IsVisible;if(Visible){HudSpace=_parent?.HudSpace;layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData,_parent);UpdateActions.EnsureCapacity(UpdateActions.Count+children.Count+1);accessorDelegates.Item2.Item2=HudSpace.GetNodeOriginFunc;UpdateActions.Add(accessorDelegates);;for(int n=0;n<children.Count;n++)children[n].GetUpdateAccessors(UpdateActions,preloadDepth);}if(!wasSetVisible)State&=~HudElementStates.IsVisible;}public virtual bool Register(HudParentBase newParent,bool canPreload=false){if(newParent==this)throw new Exception("Types of HudNodeBase cannot be parented to themselves!");if(newParent!=null){Parent=newParent;if(_parent.RegisterChild(this))State|=HudElementStates.IsRegistered;else State&=~HudElementStates.IsRegistered;}if((State&HudElementStates.IsRegistered)>0){if(canPreload)State|=HudElementStates.CanPreload;else State&=~HudElementStates.CanPreload;return true;}else return false;}public virtual bool Unregister(){if(Parent!=null){HudParentBase lastParent=Parent;Parent=null;lastParent.RemoveChild(this);State&=~(HudElementStates.IsRegistered|HudElementStates.WasParentVisible);}return!((State&HudElementStates.IsRegistered)>0);}}}}using RichHudFramework.Internal;using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;public abstract partial class HudParentBase:IReadOnlyHudParent{public virtual IReadOnlyHudSpaceNode HudSpace{get;protected set;}public virtual bool Visible{get{return(State&HudElementStates.IsVisible)>0;}set{if(value)State|=HudElementStates.IsVisible;else State&=~HudElementStates.IsVisible;}}public virtual bool InputEnabled{get{return(State&HudElementStates.IsInputEnabled)>0;}set{if(value)State|=HudElementStates.IsInputEnabled;else State&=~HudElementStates.IsInputEnabled;}}public sbyte ZOffset{get{return layerData.zOffset;}set{layerData.zOffset=value;}}public HudElementStates State{get;protected set;}protected HudLayerData layerData;protected readonly List<HudNodeBase>children;protected HudUpdateAccessors accessorDelegates;public HudParentBase(){State|=HudElementStates.IsRegistered;InputEnabled=true;Visible=true;children=new List<HudNodeBase>();accessorDelegates=new HudUpdateAccessors(){Item1=GetOrSetApiMember,Item2=new MyTuple<Func<ushort>,Func<Vector3D>>(()=>layerData.fullZOffset,null),Item3=BeginInputDepth,Item4=BeginInput,Item5=BeginLayout,Item6=BeginDraw};}public virtual void BeginInputDepth(){if(!ExceptionHandler.ClientsPaused){try{if((State&HudElementStates.CanUseCursor)>0&&Visible&&InputEnabled)InputDepth();}catch(Exception e){ExceptionHandler.ReportException(e);}}}public virtual void BeginInput(){if(!ExceptionHandler.ClientsPaused){try{if(Visible&&InputEnabled){Vector3 cursorPos=HudSpace.CursorPos;HandleInput(new Vector2(cursorPos.X,cursorPos.Y));}}catch(Exception e){ExceptionHandler.ReportException(e);}}}public virtual void BeginLayout(bool refresh){if(!ExceptionHandler.ClientsPaused){try{layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData);if(Visible||refresh)Layout();}catch(Exception e){ExceptionHandler.ReportException(e);}}}public virtual void BeginDraw(){if(!ExceptionHandler.ClientsPaused){try{if(Visible)Draw();}catch(Exception e){ExceptionHandler.ReportException(e);}}}protected virtual void InputDepth(){}protected virtual void HandleInput(Vector2 cursorPos){}protected virtual void Layout(){}protected virtual void Draw(){}public virtual void GetUpdateAccessors(List<HudUpdateAccessors>UpdateActions,byte preloadDepth){if(Visible){layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData);UpdateActions.EnsureCapacity(UpdateActions.Count+children.Count+1);accessorDelegates.Item2.Item2=HudSpace.GetNodeOriginFunc;UpdateActions.Add(accessorDelegates);for(int n=0;n<children.Count;n++)children[n].GetUpdateAccessors(UpdateActions,preloadDepth);}}public virtual bool RegisterChild(HudNodeBase child){if(child.Parent==this&&!child.Registered){children.Add(child);return true;}else if(child.Parent==null)return child.Register(this);else return false;}public virtual bool RemoveChild(HudNodeBase child){if(child.Parent==this)return child.Unregister();else if(child.Parent==null)return children.Remove(child);else return false;}protected virtual object GetOrSetApiMember(object data,int memberEnum){switch((HudElementAccessors)memberEnum){case HudElementAccessors.GetType:return GetType();case HudElementAccessors.ZOffset:return ZOffset;case HudElementAccessors.FullZOffset:return layerData.fullZOffset;case HudElementAccessors.Position:return Vector2.Zero;case HudElementAccessors.Size:return Vector2.Zero;case HudElementAccessors.GetHudSpaceFunc:return HudSpace?.GetHudSpaceFunc;case HudElementAccessors.ModName:return ExceptionHandler.ModName;case HudElementAccessors.LocalCursorPos:return HudSpace?.CursorPos??Vector3.Zero;case HudElementAccessors.PlaneToWorld:return HudSpace?.PlaneToWorldRef[0]??default(MatrixD);case HudElementAccessors.IsInFront:return HudSpace?.IsInFront??false;case HudElementAccessors.IsFacingCamera:return HudSpace?.IsFacingCamera??false;case HudElementAccessors.NodeOrigin:return HudSpace?.PlaneToWorldRef[0].Translation??Vector3D.Zero;}return null;}}}}﻿using Sandbox.ModAPI;using System;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using HudSpaceDelegate=System.Func<VRage.MyTuple<bool,float,VRageMath.MatrixD>>;namespace RichHudFramework{namespace UI{using Client;using System.Collections.Generic;using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;public abstract class HudSpaceNodeBase:HudNodeBase,IReadOnlyHudSpaceNode{protected const HudElementStates spaceNodeVisible=HudElementStates.IsVisible|HudElementStates.WasParentVisible;public override IReadOnlyHudSpaceNode HudSpace=>this;public override bool Visible=>(State&spaceNodeVisible)==spaceNodeVisible;public MatrixD PlaneToWorld=>PlaneToWorldRef[0];public MatrixD[]PlaneToWorldRef{get;}public Vector3 CursorPos{get;protected set;}public HudSpaceDelegate GetHudSpaceFunc{get;protected set;}public Func<Vector3D>GetNodeOriginFunc{get;protected set;}public bool IsInFront{get;protected set;}public bool IsFacingCamera{get;protected set;}public HudSpaceNodeBase(HudParentBase parent=null):base(parent){GetHudSpaceFunc=()=>new MyTuple<bool,float,MatrixD>(false,1f,PlaneToWorldRef[0]);GetNodeOriginFunc=()=>PlaneToWorldRef[0].Translation;PlaneToWorldRef=new MatrixD[1];}protected override void Layout(){MatrixD camMatrix=MyAPIGateway.Session.Camera.WorldMatrix;Vector3D camOrigin=camMatrix.Translation,camForward=camMatrix.Forward,nodeOrigin=PlaneToWorldRef[0].Translation,nodeForward=PlaneToWorldRef[0].Forward;IsInFront=Vector3D.Dot((nodeOrigin-camOrigin),camForward)>0;IsFacingCamera=IsInFront&&Vector3D.Dot(nodeForward,camForward)>0;MatrixD worldToPlane;MatrixD.Invert(ref PlaneToWorldRef[0],out worldToPlane);LineD cursorLine=HudMain.Cursor.WorldLine;PlaneD plane=new PlaneD(PlaneToWorldRef[0].Translation,PlaneToWorldRef[0].Forward);Vector3D worldPos=plane.Intersection(ref cursorLine.From,ref cursorLine.Direction);Vector3D planePos;Vector3D.TransformNoProjection(ref worldPos,ref worldToPlane,out planePos);CursorPos=new Vector3(){X=(float)planePos.X,Y=(float)planePos.Y,Z=(float)Math.Round(Vector3D.DistanceSquared(worldPos,cursorLine.From),6)};}public override void GetUpdateAccessors(List<HudUpdateAccessors>UpdateActions,byte preloadDepth){layerData.fullZOffset=ParentUtils.GetFullZOffset(layerData,_parent);UpdateActions.EnsureCapacity(UpdateActions.Count+children.Count+1);accessorDelegates.Item2.Item2=GetNodeOriginFunc;UpdateActions.Add(accessorDelegates);if(Visible&&IsInFront){for(int n=0;n<children.Count;n++)children[n].GetUpdateAccessors(UpdateActions,preloadDepth);}}}}}﻿using VRageMath;namespace RichHudFramework{namespace UI{public abstract class LabelBoxBase:HudElementBase{public abstract Vector2 TextSize{get;set;}public abstract Vector2 TextPadding{get;set;}public abstract bool AutoResize{get;set;}public bool FitToTextElement{get;set;}public virtual Color Color{get{return background.Color;}set{background.Color=value;}}public readonly TexturedBox background;public override float Width{get{return FitToTextElement?TextSize.X+Padding.X:(_size.X+Padding.X);}set{if(!FitToTextElement)value=MathHelper.Max(TextSize.X,value);if(value>Padding.X)value-=Padding.X;if(FitToTextElement)TextSize=new Vector2(value,TextSize.Y);else base.Width=value;}}public override float Height{get{return FitToTextElement?TextSize.Y+Padding.Y:(_size.Y+Padding.Y);}set{if(!FitToTextElement)value=MathHelper.Max(TextSize.Y,value);if(value>Padding.Y)value-=Padding.Y;if(FitToTextElement)TextSize=new Vector2(TextSize.X,value);else base.Height=value;}}public LabelBoxBase(HudParentBase parent):base(parent){background=new TexturedBox(this){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};FitToTextElement=true;Color=Color.Gray;}protected override void Layout(){if(!FitToTextElement){_size=Vector2.Max(TextSize,_size);}}}}}﻿using RichHudFramework.UI.Rendering;namespace RichHudFramework{namespace UI{public abstract class LabelElementBase:HudElementBase,IMinLabelElement{public abstract ITextBoard TextBoard{get;}public LabelElementBase(HudParentBase parent=null):base(parent){}}}}﻿using System;using System.Collections.Generic;namespace RichHudFramework{namespace UI{public abstract partial class HudNodeBase{protected static class NodeUtils{public static void RegisterNodes(HudParentBase newParent,List<HudNodeBase>children,IReadOnlyList<HudNodeBase>nodes,bool canPreload){children.EnsureCapacity(children.Count+nodes.Count);for(int n=0;n<nodes.Count;n++){HudNodeBase node=nodes[n];node.Parent=newParent;node.State|=HudElementStates.IsRegistered;node.ParentVisible=newParent.Visible;children.Add(node);if(canPreload)node.State|=HudElementStates.CanPreload;else node.State&=~HudElementStates.CanPreload;}}public static void RegisterNodes<TCon,TNode>(HudParentBase newParent,List<HudNodeBase>children,IReadOnlyList<TCon>nodes,bool canPreload)where TCon:IHudElementContainer<TNode>,new()where TNode:HudNodeBase{children.EnsureCapacity(children.Count+nodes.Count);for(int n=0;n<nodes.Count;n++){HudNodeBase node=nodes[n].Element;node.Parent=newParent;node.State|=HudElementStates.IsRegistered;node.ParentVisible=newParent.Visible;children.Add(node);if(canPreload)node.State|=HudElementStates.CanPreload;else node.State&=~HudElementStates.CanPreload;}}public static void UnregisterNodes(HudParentBase parent,List<HudNodeBase>children,IReadOnlyList<HudNodeBase>nodes,int index,int count){if(count>0){int conEnd=index+count-1;if(!(index>=0&&index<nodes.Count&&conEnd<=nodes.Count))throw new Exception("Specified indices are out of range.");if(parent==null)throw new Exception("Parent cannot be null");for(int i=index;i<=conEnd;i++){int start=0;while(start<children.Count&&children[start]!=nodes[i])start++;if(children[start]==nodes[i]){int j=start,end=start;while(j<children.Count&&i<=conEnd&&children[j]==nodes[i]){end=j;i++;j++;}children.RemoveRange(start,end-start+1);}}for(int n=index;n<count;n++){HudNodeBase node=nodes[n];HudParentBase nodeParent=node._parent;if(nodeParent!=parent)throw new Exception("The child node specified is not registered to the parent given.");node.Parent=null;node.State&=~(HudElementStates.IsRegistered|HudElementStates.WasParentVisible);node.ParentVisible=false;}}}public static void UnregisterNodes<TCon,TNode>(HudParentBase parent,List<HudNodeBase>children,IReadOnlyList<TCon>nodes,int index,int count)where TCon:IHudElementContainer<TNode>,new()where TNode:HudNodeBase{if(count>0){int conEnd=index+count-1;if(!(index>=0&&index<nodes.Count&&conEnd<=nodes.Count))throw new Exception("Specified indices are out of range.");if(parent==null)throw new Exception("Parent cannot be null");for(int i=index;i<=conEnd;i++){int start=0;while(start<children.Count&&children[start]!=nodes[i].Element)start++;if(children[start]==nodes[i].Element){int j=start,end=start;while(j<children.Count&&i<=conEnd&&children[j]==nodes[i].Element){end=j;i++;j++;}children.RemoveRange(start,end-start+1);}}for(int n=index;n<count;n++){HudNodeBase node=nodes[n].Element;HudParentBase nodeParent=node._parent;if(nodeParent!=parent)throw new Exception("The child node specified is not registered to the parent given.");node.Parent=null;node.State&=~(HudElementStates.IsRegistered|HudElementStates.WasParentVisible);}}}public static void SetNodesState(HudElementStates state,bool mask,IReadOnlyList<HudNodeBase>nodes,int index,int count){if(count>0){int end=index+count-1;Utils.Debug.Assert(index>=0&&end<nodes.Count,$"Range out of bounds. Index: {index}, End: {end}");if(mask){for(int i=index;i<=end;i++)nodes[i].State&=~state;}else{for(int i=index;i<=end;i++)nodes[i].State|=state;}}}public static void SetNodesState<TCon,TNode>(HudElementStates state,bool mask,IReadOnlyList<TCon>nodes,int index,int count)where TCon:IHudElementContainer<TNode>,new()where TNode:HudNodeBase{if(count>0){int end=index+count-1;Utils.Debug.Assert(index>=0&&end<nodes.Count,$"Range out of bounds. Index: {index}, End: {end}");if(mask){for(int i=index;i<=end;i++)nodes[i].Element.State&=~state;}else{for(int i=index;i<=end;i++)nodes[i].Element.State|=state;}}}}}}}﻿namespace RichHudFramework{namespace UI{public abstract partial class HudParentBase{protected static class ParentUtils{public static ushort GetFullZOffset(HudLayerData nodeData,HudParentBase parent=null){byte outerOffset=(byte)(nodeData.zOffset-sbyte.MinValue);ushort innerOffset=(ushort)(nodeData.zOffsetInner<<8);if(parent!=null){ushort parentFull=parent.layerData.fullZOffset;outerOffset+=(byte)((parentFull&0x00FF)+sbyte.MinValue);innerOffset+=(ushort)(parentFull&0xFF00);}return(ushort)(innerOffset|outerOffset);}}}}}﻿using RichHudFramework.UI.Rendering;using System;using VRageMath;namespace RichHudFramework.UI{using Client;public abstract class WindowBase:HudElementBase,IClickableElement{public RichText HeaderText{get{return HeaderBuilder.GetText();}set{HeaderBuilder.SetText(value);}}public ITextBuilder HeaderBuilder=>header.TextBoard;public virtual Color BorderColor{get{return header.Color;}set{header.Color=value;border.Color=value;}}public virtual Color BodyColor{get{return bodyBg.Color;}set{bodyBg.Color=value;}}public Vector2 MinimumSize{get{return minimumSize;}set{minimumSize=value;}}public bool AllowResizing{get;set;}public bool CanDrag{get;set;}public bool WindowActive{get;protected set;}public override bool IsMousedOver=>resizeInput.IsMousedOver;public IMouseInput MouseInput=>resizeInput;public readonly LabelBoxButton header;public readonly HudElementBase body;public readonly BorderBox border;protected readonly MouseInputElement inputInner,resizeInput;protected readonly TexturedBox bodyBg;protected readonly Action<byte>LoseFocusCallback;protected float cornerSize=16f;protected bool canMoveWindow,canResize;protected int resizeDir;protected Vector2 cursorOffset,minimumSize;public WindowBase(HudParentBase parent):base(parent){header=new LabelBoxButton(this){DimAlignment=DimAlignments.Width,Height=32f,ParentAlignment=ParentAlignments.Top|ParentAlignments.Inner,ZOffset=1,Format=GlyphFormat.White.WithAlignment(TextAlignment.Center),HighlightEnabled=false,AutoResize=false,};body=new EmptyHudElement(header){DimAlignment=DimAlignments.Width,ParentAlignment=ParentAlignments.Bottom,};bodyBg=new TexturedBox(body){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,ZOffset=-2,};border=new BorderBox(this){ZOffset=1,Thickness=1f,DimAlignment=DimAlignments.Both,};resizeInput=new MouseInputElement(this){ZOffset=sbyte.MaxValue,Padding=new Vector2(16f),DimAlignment=DimAlignments.Both,CanIgnoreMasking=true};inputInner=new MouseInputElement(resizeInput){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};AllowResizing=true;CanDrag=true;UseCursor=true;ShareCursor=false;IsMasking=true;MinimumSize=new Vector2(200f,200f);LoseFocusCallback=LoseFocus;GetFocus();}protected override void Layout(){body.Height=Height-header.Height;if(Visible&&WindowActive){if(canMoveWindow){Vector3 cursorPos=HudSpace.CursorPos;Offset=new Vector2(cursorPos.X,cursorPos.Y)+cursorOffset-Origin;}if(canResize)Resize();}else{canMoveWindow=false;canResize=false;}}protected void Resize(){Vector3 cursorPos=HudSpace.CursorPos;Vector2 center=Origin+Offset,newOffset=Offset;float newWidth,newHeight;if(resizeDir==1||resizeDir==3){newWidth=Math.Abs(newOffset.X-cursorPos.X)+Width*.5f;if(newWidth>=MinimumSize.X){Width=newWidth;if(cursorPos.X>center.X)newOffset.X=cursorPos.X-Width*.5f;else newOffset.X=cursorPos.X+Width*.5f;}}if(resizeDir==2||resizeDir==3){newHeight=Math.Abs(newOffset.Y-cursorPos.Y)+Height*.5f;if(newHeight>=MinimumSize.Y){Height=newHeight;if(cursorPos.Y>center.Y)newOffset.Y=cursorPos.Y-Height*.5f;else newOffset.Y=cursorPos.Y+Height*.5f;}}Offset=newOffset;}protected override void HandleInput(Vector2 cursorPos){if(IsMousedOver){if(SharedBinds.LeftButton.IsNewPressed&&!WindowActive)GetFocus();}if(AllowResizing&&resizeInput.IsNewLeftClicked&&!inputInner.IsMousedOver){Vector2 pos=Origin+Offset;canResize=true;resizeDir=0;if(Width-(2f)*Math.Abs(pos.X-cursorPos.X)<=cornerSize)resizeDir+=1;if(Height-(2f)*Math.Abs(pos.Y-cursorPos.Y)<=cornerSize)resizeDir+=2;}else if(CanDrag&&header.MouseInput.IsNewLeftClicked){canMoveWindow=true;cursorOffset=(Origin+Offset)-cursorPos;}if(canResize||canMoveWindow){if(!SharedBinds.LeftButton.IsPressed){canMoveWindow=false;canResize=false;}}}public virtual void GetFocus(){layerData.zOffsetInner=HudMain.GetFocusOffset(LoseFocusCallback);WindowActive=true;}protected virtual void LoseFocus(byte newOffset){layerData.zOffsetInner=newOffset;WindowActive=false;}}}﻿namespace RichHudFramework{namespace UI{public interface IMouseInput{event EventHandler CursorEntered;event EventHandler CursorExited;event EventHandler LeftClicked;event EventHandler LeftReleased;event EventHandler RightClicked;event EventHandler RightReleased;event EventHandler GainedInputFocus;event EventHandler LostInputFocus;bool InputEnabled{get;set;}bool IsLeftClicked{get;}bool IsRightClicked{get;}bool IsNewLeftClicked{get;}bool IsNewRightClicked{get;}bool IsLeftReleased{get;}bool IsRightReleased{get;}bool HasFocus{get;}bool IsMousedOver{get;}void GetInputFocus();void ClearSubscribers();}public interface IClickableElement:IReadOnlyHudElement{IMouseInput MouseInput{get;}}}}﻿using System.Collections.Generic;namespace RichHudFramework.UI{public interface IEntryBox<TContainer,TElement>:IEnumerable<TContainer>,IReadOnlyHudElement where TContainer:IScrollBoxEntry<TElement>,new()where TElement:HudElementBase,IMinLabelElement{event EventHandler SelectionChanged;IReadOnlyList<TContainer>EntryList{get;}TContainer Selection{get;}}public interface IEntryBox<TValue>:IEntryBox<ListBoxEntry<TValue>,Label>{}}﻿using System;using System.Collections.Generic;namespace RichHudFramework{namespace UI{public interface IReadOnlyHudCollection<TElementContainer,TElement>:IReadOnlyList<TElementContainer>where TElementContainer:IHudElementContainer<TElement>,new()where TElement:HudNodeBase{IReadOnlyList<TElementContainer>Collection{get;}TElementContainer Find(Func<TElementContainer,bool>predicate);int FindIndex(Func<TElementContainer,bool>predicate);}public interface IReadOnlyHudCollection<TElementContainer>:IReadOnlyHudCollection<TElementContainer,HudElementBase>where TElementContainer:IHudElementContainer<HudElementBase>,new(){}public interface IReadOnlyHudCollection:IReadOnlyHudCollection<HudElementContainer<HudElementBase>,HudElementBase>{}public interface IHudCollection<TElementContainer,TElement>:IReadOnlyHudCollection<TElementContainer,TElement>where TElementContainer:IHudElementContainer<TElement>,new()where TElement:HudNodeBase{void Add(TElement element,bool preload=false);void Add(TElementContainer element,bool preload=false);void AddRange(IReadOnlyList<TElementContainer>newContainers,bool preload=false);void Insert(int index,TElementContainer container,bool preload=false);void InsertRange(int index,IReadOnlyList<TElementContainer>newContainers,bool preload=false);bool Remove(TElementContainer collectionElement);bool Remove(Func<TElementContainer,bool>predicate);bool RemoveAt(int index);void RemoveRange(int index,int count);void Clear();}public interface IHudCollection<TElementContainer>:IHudCollection<TElementContainer,HudElementBase>where TElementContainer:IHudElementContainer<HudElementBase>,new(){}public interface IHudCollection:IHudCollection<HudElementContainer<HudElementBase>,HudElementBase>{}}}﻿namespace RichHudFramework.UI{using Rendering;public interface IMinLabelElement{ITextBoard TextBoard{get;}}public interface ILabelElement:IMinLabelElement{RichText Text{get;set;}GlyphFormat Format{get;set;}TextBuilderModes BuilderMode{get;set;}bool AutoResize{get;set;}bool VertCenterText{get;set;}float Height{get;set;}float Width{get;set;}}}﻿using VRageMath;namespace RichHudFramework{namespace UI{public interface IReadOnlyHudElement:IReadOnlyHudNode{Vector2 Size{get;}float Height{get;}float Width{get;}Vector2 Origin{get;}Vector2 Offset{get;}ParentAlignments ParentAlignment{get;}DimAlignments DimAlignment{get;}bool UseCursor{get;}bool ShareCursor{get;}bool IsMousedOver{get;}}}}﻿namespace RichHudFramework{namespace UI{public interface IReadOnlyHudNode:IReadOnlyHudParent{IReadOnlyHudParent Parent{get;}bool Registered{get;}}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;[Flags]public enum HudElementStates:ushort{None=0x0,IsVisible=0x1,WasParentVisible=0x2,IsRegistered=0x4,CanUseCursor=0x10,CanShareCursor=0x20,IsMousedOver=0x40,IsMouseInBounds=0x80,CanPreload=0x100,IsMasked=0x200,IsMasking=0x400,IsSelectivelyMasked=0x800,CanIgnoreMasking=0x1000,IsInputEnabled=0x2000,WasParentInputEnabled=0x4000}public struct HudLayerData{public sbyte zOffset;public byte zOffsetInner;public ushort fullZOffset;}public enum HudElementAccessors:int{ModName=0,GetType=1,ZOffset=2,FullZOffset=3,Position=4,Size=5,LocalCursorPos=6,DrawCursorInHudSpace=7,GetHudSpaceFunc=8,NodeOrigin=9,PlaneToWorld=10,IsInFront=11,IsFacingCamera=12,}public interface IReadOnlyHudParent{IReadOnlyHudSpaceNode HudSpace{get;}bool Visible{get;}bool InputEnabled{get;}sbyte ZOffset{get;}void GetUpdateAccessors(List<HudUpdateAccessors>UpdateActions,byte preloadDepth);}}}﻿using System;using VRageMath;using HudSpaceDelegate=System.Func<VRage.MyTuple<bool,float,VRageMath.MatrixD>>;namespace RichHudFramework{namespace UI{public interface IReadOnlyHudSpaceNode:IReadOnlyHudParent{Vector3 CursorPos{get;}HudSpaceDelegate GetHudSpaceFunc{get;}MatrixD PlaneToWorld{get;}MatrixD[]PlaneToWorldRef{get;}Func<Vector3D>GetNodeOriginFunc{get;}bool IsInFront{get;}bool IsFacingCamera{get;}}}}﻿using RichHudFramework.UI.Rendering;using VRageMath;namespace RichHudFramework.UI{public class BorderBox:HudElementBase{public Material Material{get{return hudBoard.Material;}set{hudBoard.Material=value;}}public MaterialAlignment MatAlignment{get{return hudBoard.MatAlignment;}set{hudBoard.MatAlignment=value;}}public Color Color{get{return hudBoard.Color;}set{hudBoard.Color=value;}}public float Thickness{get{return _thickness;}set{_thickness=value;}}private float _thickness;protected readonly MatBoard hudBoard;public BorderBox(HudParentBase parent):base(parent){hudBoard=new MatBoard();Thickness=1f;}public BorderBox():this(null){}protected override void Draw(){if(Color.A>0){CroppedBox box=default(CroppedBox);box.mask=maskingBox;float thickness=_thickness,height=cachedSize.Y-cachedPadding.Y,width=cachedSize.X-cachedPadding.X;Vector2 halfSize,pos;halfSize=new Vector2(thickness,height)*.5f;pos=cachedPosition+new Vector2((-width+thickness)*.5f,0f);box.bounds=new BoundingBox2(pos-halfSize,pos+halfSize);hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);halfSize=new Vector2(width,thickness)*.5f;pos=cachedPosition+new Vector2(0f,(height-thickness)*.5f);box.bounds=new BoundingBox2(pos-halfSize,pos+halfSize);hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);halfSize=new Vector2(thickness,height)*.5f;pos=cachedPosition+new Vector2((width-thickness)*.5f,0f);box.bounds=new BoundingBox2(pos-halfSize,pos+halfSize);hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);halfSize=new Vector2(width,thickness)*.5f;pos=cachedPosition+new Vector2(0f,(-height+thickness)*.5f);box.bounds=new BoundingBox2(pos-halfSize,pos+halfSize);hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);}}}}﻿using RichHudFramework.UI.Rendering;using System;using VRageMath;namespace RichHudFramework.UI{public class DoubleLabelBox:LabelBoxBase{public override Vector2 TextSize{get{return new Vector2(left.Width+right.Width,Math.Max(left.Height,right.Height));}set{left.Width=value.X*.5f;right.Width=value.X*.5f;left.Height=value.Y;right.Height=value.Y;}}public override Vector2 TextPadding{get{return left.Padding;}set{left.Padding=value;right.Padding=value;}}public override bool AutoResize{get{return left.AutoResize;}set{left.AutoResize=value;right.AutoResize=value;}}public TextBuilderModes BuilderMode{get{return left.BuilderMode;}set{left.BuilderMode=value;right.BuilderMode=value;}}public RichText LeftText{get{return left.TextBoard.GetText();}set{left.TextBoard.SetText(value);}}public RichText RightText{get{return right.TextBoard.GetText();}set{right.TextBoard.SetText(value);}}public ITextBuilder LeftTextBuilder=>left.TextBoard;public ITextBuilder RightTextBuilder=>right.TextBoard;protected readonly Label left,right;public DoubleLabelBox(HudParentBase parent=null):base(parent){left=new Label(this){ParentAlignment=ParentAlignments.Left|ParentAlignments.InnerH|ParentAlignments.UsePadding};right=new Label(this){ParentAlignment=ParentAlignments.Right|ParentAlignments.InnerH|ParentAlignments.UsePadding};}public DoubleLabelBox():this(null){}protected override void Layout(){base.Layout();if(!AutoResize){float xPadding=left.Padding.X,leftWidthMin=left.TextBoard.TextSize.X+xPadding,rightWidthMin=right.TextBoard.TextSize.X+xPadding,fullWidth=left.Width+right.Width;if(leftWidthMin+rightWidthMin<fullWidth){float newLeft=fullWidth-rightWidthMin;left.Width=newLeft;right.Width=fullWidth-newLeft;}else{left.Width=fullWidth*.5f;right.Width=fullWidth*.5f;}}}}}﻿namespace RichHudFramework.UI{public class EmptyHudElement:HudElementBase{public EmptyHudElement(HudParentBase parent):base(parent){}public EmptyHudElement():this(null){}}}﻿using System;using VRageMath;namespace RichHudFramework{namespace UI{public enum HudChainSizingModes:int{ClampChainOffAxis=0x1,ClampChainAlignAxis=0x2,ClampChainBoth=ClampChainOffAxis|ClampChainAlignAxis,FitChainOffAxis=0x4,FitChainAlignAxis=0x8,FitChainBoth=FitChainOffAxis|FitChainAlignAxis,ClampMembersOffAxis=0x10,ClampMembersAlignAxis=0x20,ClampMembersBoth=ClampMembersOffAxis|ClampMembersAlignAxis,FitMembersOffAxis=0x40,FitMembersAlignAxis=0x80,FitMembersBoth=FitMembersOffAxis|FitMembersAlignAxis,}public class HudChain<TElementContainer,TElement>:HudCollection<TElementContainer,TElement>where TElementContainer:IHudElementContainer<TElement>,new()where TElement:HudElementBase{protected const HudElementStates nodeSetVisible=HudElementStates.IsVisible|HudElementStates.IsRegistered;public override float Width{set{if(value>Padding.X)value-=Padding.X;_size.X=value;if(value>0f&&offAxis==0&&(SizingMode&(HudChainSizingModes.ClampMembersOffAxis|HudChainSizingModes.FitMembersOffAxis))>0)_absMaxSize.X=_size.X;}}public override float Height{set{if(value>Padding.Y)value-=Padding.Y;_size.Y=value;if(value>0f&&offAxis==1&&(SizingMode&(HudChainSizingModes.ClampMembersOffAxis|HudChainSizingModes.FitMembersOffAxis))>0)_absMaxSize.Y=_size.Y;}}public Vector2 MemberMaxSize{get{return _absMaxSize;}set{_absMaxSize=value;}}public Vector2 MemberMinSize{get{return _absMinSize;}set{_absMinSize=value;}}public float Spacing{get{return _spacing;}set{_spacing=value;}}public HudChainSizingModes SizingMode{get;set;}public virtual bool AlignVertical{get{return _alignVertical;}set{if(value){alignAxis=1;offAxis=0;}else{alignAxis=0;offAxis=1;}_alignVertical=value;}}protected bool _alignVertical;protected float _spacing;protected int alignAxis,offAxis;protected Vector2 _absMaxSize,_absMinSize;public HudChain(bool alignVertical,HudParentBase parent=null):base(parent){Init();Spacing=0f;SizingMode=HudChainSizingModes.FitChainBoth;AlignVertical=alignVertical;}public HudChain(HudParentBase parent):this(false,parent){}public HudChain():this(false,null){}protected virtual void Init(){}protected override void Layout(){UpdateMemberSizes();Vector2 visibleTotalSize=GetVisibleTotalSize(),listSize=GetListSize(cachedSize-cachedPadding,visibleTotalSize);_size=listSize;Vector2 startOffset=new Vector2();if(alignAxis==1)startOffset.Y=listSize.Y*.5f;else startOffset.X=-listSize.X*.5f;UpdateMemberOffsets(startOffset,cachedPadding);}protected void UpdateMemberSizes(){Vector2 newMax;_absMinSize=Vector2.Max(Vector2.Zero,_absMinSize);newMax=Vector2.Max(_absMinSize,_absMaxSize);_absMaxSize=newMax;Vector2 minSize=MemberMinSize,maxSize=MemberMaxSize;for(int n=0;n<hudCollectionList.Count;n++){TElement element=hudCollectionList[n].Element;Vector2 elementSize=element.Size;if((SizingMode&HudChainSizingModes.FitMembersOffAxis)>0)elementSize[offAxis]=maxSize[offAxis];else if((SizingMode&HudChainSizingModes.ClampMembersOffAxis)>0)elementSize[offAxis]=MathHelper.Clamp(elementSize[offAxis],minSize[offAxis],maxSize[offAxis]);if((SizingMode&HudChainSizingModes.FitMembersAlignAxis)>0)elementSize[alignAxis]=maxSize[alignAxis];else if((SizingMode&HudChainSizingModes.ClampMembersAlignAxis)>0)elementSize[alignAxis]=MathHelper.Clamp(elementSize[alignAxis],minSize[alignAxis],maxSize[alignAxis]);element.Size=elementSize;}}protected Vector2 GetListSize(Vector2 lastSize,Vector2 totalSize){if((SizingMode&HudChainSizingModes.FitChainAlignAxis)>0){lastSize[alignAxis]=totalSize[alignAxis];}else{lastSize[alignAxis]=Math.Max(lastSize[alignAxis],totalSize[alignAxis]);}if((SizingMode&HudChainSizingModes.FitChainOffAxis)>0){lastSize[offAxis]=totalSize[offAxis];}else{lastSize[offAxis]=Math.Max(lastSize[offAxis],totalSize[offAxis]);}return lastSize;}protected void UpdateMemberOffsets(Vector2 offset,Vector2 padding){Vector2 alignMask=new Vector2(offAxis,-alignAxis),offMask=new Vector2(alignAxis,-offAxis);ParentAlignments left=(ParentAlignments)((int)ParentAlignments.Left*(2-alignAxis)),right=(ParentAlignments)((int)ParentAlignments.Right*(2-alignAxis)),bitmask=left|right;float spacing=Spacing;for(int n=0;n<hudCollectionList.Count;n++){TElement element=hudCollectionList[n].Element;Vector2 elementSize=element.Size;element.ParentAlignment&=bitmask;element.ParentAlignment|=ParentAlignments.Inner;Vector2 newOffset=offset+(elementSize*alignMask*.5f);if((element.ParentAlignment&left)==left){newOffset+=padding*offMask*.5f;}else if((element.ParentAlignment&right)==right){newOffset-=padding*offMask*.5f;}element.Offset=newOffset;if((element.State&(nodeSetVisible))==nodeSetVisible){elementSize[alignAxis]+=spacing;offset+=elementSize*alignMask;}}}protected virtual Vector2 GetVisibleTotalSize(){Vector2 newSize=new Vector2();float spacing=Spacing;for(int n=0;n<hudCollectionList.Count;n++){TElement element=hudCollectionList[n].Element;if((element.State&(nodeSetVisible))==nodeSetVisible){Vector2 elementSize=element.Size;newSize[alignAxis]+=elementSize[alignAxis];if(elementSize[offAxis]>newSize[offAxis])newSize[offAxis]=elementSize[offAxis];newSize[alignAxis]+=spacing;}}newSize[alignAxis]-=spacing;return Vector2.Max(newSize,Vector2.Zero);}}public class HudChain<TElementContainer>:HudChain<TElementContainer,HudElementBase>where TElementContainer:IHudElementContainer<HudElementBase>,new(){public HudChain(bool alignVertical,HudParentBase parent=null):base(alignVertical,parent){}}public class HudChain:HudChain<HudElementContainer<HudElementBase>,HudElementBase>{public HudChain(bool alignVertical,HudParentBase parent=null):base(alignVertical,parent){}}}}﻿using System;using System.Collections;using System.Collections.Generic;namespace RichHudFramework{namespace UI{public class HudCollection<TElementContainer,TElement>:HudElementBase,IHudCollection<TElementContainer,TElement>where TElementContainer:IHudElementContainer<TElement>,new()where TElement:HudNodeBase{public IReadOnlyList<TElementContainer>Collection=>hudCollectionList;public HudCollection<TElementContainer,TElement>CollectionContainer=>this;public TElementContainer this[int index]{get{if(hudCollectionList.Count==0||index<0||index>=hudCollectionList.Count)throw new Exception($"Collection index out of range. Index: {index} Count: {hudCollectionList.Count}");return hudCollectionList[index];}}int IReadOnlyCollection<TElementContainer>.Count=>hudCollectionList.Count;public int Count=>hudCollectionList.Count;public bool IsReadOnly=>false;protected readonly List<TElementContainer>hudCollectionList;protected bool skipCollectionRemove;public HudCollection(HudParentBase parent):base(parent){hudCollectionList=new List<TElementContainer>();}public HudCollection():this(null){}public IEnumerator<TElementContainer>GetEnumerator()=>hudCollectionList.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();public void Add(TElement element,bool preload=false){var newContainer=new TElementContainer();newContainer.SetElement(element);Add(newContainer,preload);}public void Add(TElementContainer container,bool preload=false){if(container.Element.Registered)throw new Exception("HUD Element already registered!");if(container.Element.Register(this,preload))hudCollectionList.Add(container);else throw new Exception("HUD Element registration failed.");}public void AddRange(IReadOnlyList<TElementContainer>newContainers,bool preload=false){NodeUtils.RegisterNodes<TElementContainer,TElement>(this,children,newContainers,preload);hudCollectionList.AddRange(newContainers);}public void Insert(int index,TElementContainer container,bool preload=false){if(container.Element.Register(this,preload))hudCollectionList.Insert(index,container);else throw new Exception("HUD Element registration failed.");}public void InsertRange(int index,IReadOnlyList<TElementContainer>newContainers,bool preload=false){NodeUtils.RegisterNodes<TElementContainer,TElement>(this,children,newContainers,preload);hudCollectionList.InsertRange(index,newContainers);}public bool Remove(TElementContainer entry){if(entry.Element.Parent==this&&hudCollectionList.Count>0){if(hudCollectionList.Remove(entry)){bool success=entry.Element.Unregister();return success;}}return false;}public bool Remove(Func<TElementContainer,bool>predicate){if(hudCollectionList.Count>0){int index=hudCollectionList.FindIndex(x=>predicate(x));TElement element=hudCollectionList[index].Element;bool success=false;if(index!=-1&&index<hudCollectionList.Count){hudCollectionList.RemoveAt(index);success=element.Unregister();}return success;}return false;}public bool RemoveAt(int index){if(hudCollectionList[index].Element.Parent==this&&hudCollectionList.Count>0){TElement element=hudCollectionList[index].Element;hudCollectionList.RemoveAt(index);bool success=element.Unregister();return success;}return false;}public void RemoveRange(int index,int count){NodeUtils.UnregisterNodes<TElementContainer,TElement>(this,children,hudCollectionList,index,count);hudCollectionList.RemoveRange(index,count);}public void Clear(){NodeUtils.UnregisterNodes<TElementContainer,TElement>(this,children,hudCollectionList,0,hudCollectionList.Count);hudCollectionList.Clear();}public TElementContainer Find(Func<TElementContainer,bool>predicate){return hudCollectionList.Find(x=>predicate(x));}public int FindIndex(Func<TElementContainer,bool>predicate){return hudCollectionList.FindIndex(x=>predicate(x));}public bool Contains(TElementContainer item)=>hudCollectionList.Contains(item);public void CopyTo(TElementContainer[]array,int arrayIndex)=>hudCollectionList.CopyTo(array,arrayIndex);public override bool RemoveChild(HudNodeBase child){if(child.Parent==this){bool success=child.Unregister();if(success)RemoveChild(child);return success;}else if(child.Parent==null&&children.Remove(child)){if(!skipCollectionRemove){for(int n=0;n<hudCollectionList.Count;n++){if(hudCollectionList[n].Element==child){hudCollectionList.RemoveAt(n);break;}}}else skipCollectionRemove=false;return true;}else return false;}}public class HudCollection<TElementContainer>:HudCollection<TElementContainer,HudNodeBase>where TElementContainer:IHudElementContainer<HudNodeBase>,new(){public HudCollection(HudParentBase parent=null):base(parent){}}public class HudCollection:HudCollection<HudElementContainer<HudNodeBase>,HudNodeBase>{public HudCollection(HudParentBase parent=null):base(parent){}}}}﻿using VRageMath;namespace RichHudFramework.UI{using Rendering;using Rendering.Client;public class Label:LabelElementBase{public RichText Text{get{return _textBoard.GetText();}set{_textBoard.SetText(value);}}public override ITextBoard TextBoard=>_textBoard;public GlyphFormat Format{get{return _textBoard.Format;}set{_textBoard.Format=value;}}public TextBuilderModes BuilderMode{get{return _textBoard.BuilderMode;}set{_textBoard.BuilderMode=value;}}public bool AutoResize{get{return _textBoard.AutoResize;}set{_textBoard.AutoResize=value;}}public bool VertCenterText{get{return _textBoard.VertCenterText;}set{_textBoard.VertCenterText=value;}}public override float Width{get{return _textBoard.Size.X+Padding.X;}set{if(value>Padding.X)value-=Padding.X;_textBoard.FixedSize=new Vector2(value,_textBoard.FixedSize.Y);}}public override float Height{get{return _textBoard.Size.Y+Padding.Y;}set{if(value>Padding.Y)value-=Padding.Y;_textBoard.FixedSize=new Vector2(_textBoard.FixedSize.X,value);}}protected readonly TextBoard _textBoard;public Label(HudParentBase parent):base(parent){_textBoard=new TextBoard();_textBoard.Format=GlyphFormat.White;_textBoard.SetText("NewLabel");}public Label():this(null){}protected override void Draw(){Vector2 halfSize=(cachedSize-cachedPadding)*.5f;BoundingBox2 box=new BoundingBox2(cachedPosition-halfSize,cachedPosition+halfSize);if(maskingBox!=null)_textBoard.Draw(box,maskingBox.Value,HudSpace.PlaneToWorldRef);else _textBoard.Draw(box,CroppedBox.defaultMask,HudSpace.PlaneToWorldRef);}}}﻿using RichHudFramework.UI.Rendering;using VRageMath;namespace RichHudFramework.UI{public class LabelBox:LabelBoxBase,ILabelElement{public RichText Text{get{return textElement.TextBoard.GetText();}set{textElement.TextBoard.SetText(value);}}public GlyphFormat Format{get{return textElement.TextBoard.Format;}set{textElement.TextBoard.Format=value;}}public override Vector2 TextPadding{get{return textElement.Padding;}set{textElement.Padding=value;}}public override Vector2 TextSize{get{return textElement.Size;}set{textElement.Size=value;}}public override bool AutoResize{get{return textElement.AutoResize;}set{textElement.AutoResize=value;}}public TextBuilderModes BuilderMode{get{return TextBoard.BuilderMode;}set{TextBoard.BuilderMode=value;}}public bool VertCenterText{get{return textElement.VertCenterText;}set{textElement.VertCenterText=value;}}public ITextBoard TextBoard=>textElement.TextBoard;public readonly Label textElement;public LabelBox(HudParentBase parent):base(parent){textElement=new Label(this);}public LabelBox():this(null){}}}﻿using RichHudFramework.UI.Rendering;using VRageMath;namespace RichHudFramework.UI{public class TexturedBox:HudElementBase{public Material Material{get{return hudBoard.Material;}set{hudBoard.Material=value;}}public MaterialAlignment MatAlignment{get{return hudBoard.MatAlignment;}set{hudBoard.MatAlignment=value;}}public Color Color{get{return hudBoard.Color;}set{hudBoard.Color=value;}}protected float lastScale;protected readonly MatBoard hudBoard;public TexturedBox(HudParentBase parent):base(parent){hudBoard=new MatBoard();Size=new Vector2(50f);}public TexturedBox():this(null){}protected override void Draw(){if(hudBoard.Color.A>0){CroppedBox box=default(CroppedBox);Vector2 halfSize=(cachedSize-cachedPadding)*.5f;box.bounds=new BoundingBox2(cachedPosition-halfSize,cachedPosition+halfSize);box.mask=maskingBox;hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);}}}}﻿using RichHudFramework.UI.Rendering;using System;using System.Text;using VRageMath;namespace RichHudFramework.UI{public class ColorPickerRGB:HudElementBase{public RichText Name{get{return name.TextBoard.GetText();}set{name.TextBoard.SetText(value);}}public ITextBuilder NameBuilder=>name.TextBoard;public GlyphFormat NameFormat{get{return name.TextBoard.Format;}set{name.TextBoard.SetFormatting(value);}}public GlyphFormat ValueFormat{get{return sliderText[0].Format;}set{foreach(Label label in sliderText)label.TextBoard.SetFormatting(value);}}public override float Width{set{if(value>Padding.X)value-=Padding.X;_size.X=(value);display.Width=value-name.Width;colorSliderColumn.Width=display.Width;}}public override float Height{set{if(value>Padding.Y)value-=Padding.Y;_size.Y=(value);value=(value-headerChain.Height-15f)/3f;colorNameColumn.MemberMaxSize=new Vector2(colorNameColumn.MemberMaxSize.X,value);colorSliderColumn.MemberMaxSize=new Vector2(colorSliderColumn.MemberMaxSize.X,value);}}public Color Color{get{return _color;}set{sliders[0].Current=value.R;sliders[1].Current=value.G;sliders[2].Current=value.B;_color=value;}}private readonly Label name;private readonly TexturedBox display;private readonly HudChain headerChain;private readonly Label[]sliderText;private readonly HudChain<HudElementContainer<Label>,Label>colorNameColumn;public readonly SliderBox[]sliders;private readonly HudChain<HudElementContainer<SliderBox>,SliderBox>colorSliderColumn;private readonly HudChain mainChain,colorChain;private readonly StringBuilder valueBuilder;private Color _color;private int focusedChannel;public ColorPickerRGB(HudParentBase parent):base(parent){name=new Label(){Format=GlyphFormat.Blueish.WithSize(1.08f),Text="NewColorPicker",AutoResize=false,Size=new Vector2(88f,22f)};display=new TexturedBox(){Width=231f,Color=Color.Black};var dispBorder=new BorderBox(display){Color=Color.White,Thickness=1f,DimAlignment=DimAlignments.Both,};headerChain=new HudChain(false){SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.FitChainBoth,Height=22f,Spacing=0f,CollectionContainer={name,display}};sliderText=new Label[]{new Label(){AutoResize=false,Format=TerminalFormatting.ControlFormat,Height=47f},new Label(){AutoResize=false,Format=TerminalFormatting.ControlFormat,Height=47f},new Label(){AutoResize=false,Format=TerminalFormatting.ControlFormat,Height=47f}};colorNameColumn=new HudChain<HudElementContainer<Label>,Label>(true){SizingMode=HudChainSizingModes.FitMembersBoth|HudChainSizingModes.FitChainBoth,Width=87f,Spacing=5f,CollectionContainer={sliderText[0],sliderText[1],sliderText[2]}};sliders=new SliderBox[]{new SliderBox(){Min=0f,Max=255f,Height=47f},new SliderBox(){Min=0f,Max=255f,Height=47f},new SliderBox(){Min=0f,Max=255f,Height=47f}};colorSliderColumn=new HudChain<HudElementContainer<SliderBox>,SliderBox>(true){SizingMode=HudChainSizingModes.FitMembersBoth|HudChainSizingModes.FitChainBoth,Width=231f,Spacing=5f,CollectionContainer={sliders[0],sliders[1],sliders[2]}};colorChain=new HudChain(false){SizingMode=HudChainSizingModes.FitChainBoth,CollectionContainer={colorNameColumn,colorSliderColumn,}};mainChain=new HudChain(true,this){SizingMode=HudChainSizingModes.FitChainBoth,Spacing=5f,CollectionContainer={headerChain,colorChain,}};Size=new Vector2(318f,163f);valueBuilder=new StringBuilder();UseCursor=true;ShareCursor=true;focusedChannel=-1;}public ColorPickerRGB():this(null){}public void SetChannelFocused(int channel){channel=MathHelper.Clamp(channel,0,2);if(!sliders[channel].MouseInput.HasFocus)focusedChannel=channel;}protected override void HandleInput(Vector2 cursorPos){if(focusedChannel!=-1){sliders[focusedChannel].MouseInput.GetInputFocus();focusedChannel=-1;}for(int i=0;i<sliders.Length;i++){if(sliders[i].MouseInput.HasFocus){if(SharedBinds.UpArrow.IsNewPressed){i=MathHelper.Clamp(i-1,0,sliders.Length-1);sliders[i].MouseInput.GetInputFocus();}else if(SharedBinds.DownArrow.IsNewPressed){i=MathHelper.Clamp(i+1,0,sliders.Length-1);sliders[i].MouseInput.GetInputFocus();}break;}}_color=new Color(){R=(byte)Math.Round(sliders[0].Current),G=(byte)Math.Round(sliders[1].Current),B=(byte)Math.Round(sliders[2].Current),A=255};valueBuilder.Clear();valueBuilder.Append("R: ");valueBuilder.Append(_color.R);sliderText[0].TextBoard.SetText(valueBuilder);valueBuilder.Clear();valueBuilder.Append("G: ");valueBuilder.Append(_color.G);sliderText[1].TextBoard.SetText(valueBuilder);valueBuilder.Clear();valueBuilder.Append("B: ");valueBuilder.Append(_color.B);sliderText[2].TextBoard.SetText(valueBuilder);display.Color=_color;}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class ListInputElement<TElementContainer,TElement>:MouseInputElement where TElement:HudElementBase,IMinLabelElement where TElementContainer:class,IScrollBoxEntry<TElement>,new(){public event EventHandler SelectionChanged;public IReadOnlyHudCollection<TElementContainer,TElement>Entries{get;}public TElementContainer Selection{get{if(Entries.Count==0||SelectionIndex<0||SelectionIndex>=Entries.Count){return default(TElementContainer);}else{return Entries[SelectionIndex];}}}public int SelectionIndex=>MathHelper.Clamp(_selectionIndex,-1,Entries.Count-1);public int HighlightIndex=>MathHelper.Clamp(_highlightIndex,0,Entries.Count-1);public int FocusIndex=>MathHelper.Clamp(_focusIndex,0,Entries.Count-1);public bool KeyboardScroll{get;protected set;}public Vector2I ListRange{get;set;}public Vector2 ListSize{get;set;}public Vector2 ListPos{get;set;}protected Vector2 lastCursorPos;private int _selectionIndex;private int _highlightIndex;private int _focusIndex;public ListInputElement(IReadOnlyHudCollection<TElementContainer,TElement>entries,HudElementBase parent=null):base(parent){Entries=entries;_selectionIndex=-1;}public ListInputElement(HudChain<TElementContainer,TElement>parent=null):this(parent,parent){}public void SetSelectionAt(int index){if(index!=_selectionIndex){_selectionIndex=MathHelper.Clamp(index,0,Entries.Count-1);Selection.Enabled=true;SelectionChanged?.Invoke(this,EventArgs.Empty);}}public void SetSelection(TElementContainer member){int index=Entries.FindIndex(x=>member.Equals(x));if(index!=-1&&index!=_selectionIndex){_selectionIndex=MathHelper.Clamp(index,0,Entries.Count-1);Selection.Enabled=true;SelectionChanged?.Invoke(this,EventArgs.Empty);}}public void OffsetSelectionIndex(int offset,bool wrap=false){int index=_selectionIndex,dir=offset>0?1:-1,absOffset=Math.Abs(offset);if(dir>0){for(int i=0;i<absOffset;i++){if(wrap)index=(index+dir)%Entries.Count;else index=Math.Min(index+dir,Entries.Count-1);index=FindFirstEnabled(index,wrap);}}else{for(int i=0;i<absOffset;i++){if(wrap)index=(index+dir)%Entries.Count;else index=Math.Max(index+dir,0);if(index<0)index+=Entries.Count;index=FindLastEnabled(index,wrap);}}SetSelectionAt(index);}public void ClearSelection(){_selectionIndex=-1;_highlightIndex=0;_focusIndex=0;}protected override void HandleInput(Vector2 cursorPos){if(Entries.Count>0){base.HandleInput(cursorPos);UpdateSelectionInput(cursorPos);}}protected virtual void UpdateSelectionInput(Vector2 cursorPos){_selectionIndex=MathHelper.Clamp(_selectionIndex,-1,Entries.Count-1);_highlightIndex=MathHelper.Clamp(_highlightIndex,0,Entries.Count-1);if(KeyboardScroll)_focusIndex=_highlightIndex;else _focusIndex=_selectionIndex;if(HasFocus){if(SharedBinds.UpArrow.IsNewPressed||SharedBinds.UpArrow.IsPressedAndHeld){for(int i=_highlightIndex-1;i>=0;i--){if(Entries[i].Enabled){_highlightIndex=i;break;}}KeyboardScroll=true;lastCursorPos=cursorPos;}else if(SharedBinds.DownArrow.IsNewPressed||SharedBinds.DownArrow.IsPressedAndHeld){for(int i=_highlightIndex+1;i<Entries.Count;i++){if(Entries[i].Enabled){_highlightIndex=i;break;}}KeyboardScroll=true;lastCursorPos=cursorPos;}}else{KeyboardScroll=false;lastCursorPos=new Vector2(float.MinValue);}bool listMousedOver=false;if(IsMousedOver){if((cursorPos-lastCursorPos).LengthSquared()>4f)KeyboardScroll=false;if(!KeyboardScroll){Vector2 cursorOffset=cursorPos-ListPos;BoundingBox2 listBounds=new BoundingBox2(-ListSize*.5f,ListSize*.5f);if(listBounds.Contains(cursorOffset)==ContainmentType.Contains){int newIndex=ListRange.X;for(int i=ListRange.X;i<=ListRange.Y;i++){if(Entries[i].Enabled){TElement element=Entries[i].Element;Vector2 halfSize=element.Size*.5f,offset=element.Offset;BoundingBox2 bb=new BoundingBox2(offset-halfSize,offset+halfSize);if(bb.Contains(cursorOffset)==ContainmentType.Contains)break;}newIndex++;}if(newIndex>=0&&newIndex<Entries.Count){_highlightIndex=newIndex;listMousedOver=true;}}}}if((listMousedOver&&SharedBinds.LeftButton.IsNewPressed)||(HasFocus&&SharedBinds.Space.IsNewPressed)){_selectionIndex=_highlightIndex;SelectionChanged?.Invoke(this,EventArgs.Empty);KeyboardScroll=false;}_highlightIndex=MathHelper.Clamp(_highlightIndex,0,Entries.Count-1);}private int FindFirstEnabled(int index,bool wrap){if(wrap){int j=index;for(int n=0;n<2*Entries.Count;n++){if(Entries[j].Enabled)return j;j++;j%=Entries.Count;}}else{for(int n=index;n<Entries.Count;n++){if(Entries[n].Enabled)return n;}}return-1;}private int FindLastEnabled(int index,bool wrap){if(wrap){int j=index;for(int n=0;n<2*Entries.Count;n++){if(Entries[j].Enabled)return j;j++;j%=Entries.Count;}}else{for(int n=index;n>=0;n--){if(Entries[n].Enabled)return n;}}return-1;}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{using Client;public class MouseInputElement:HudElementBase,IMouseInput{public override bool Visible{set{if(value)State|=HudElementStates.IsVisible;else State&=elementNotVisible;if(!value){IsLeftClicked=false;IsRightClicked=false;IsNewLeftClicked=false;IsNewRightClicked=false;IsLeftReleased=false;IsRightReleased=false;}}}public event EventHandler CursorEntered;public event EventHandler CursorExited;public event EventHandler LeftClicked;public event EventHandler LeftReleased;public event EventHandler RightClicked;public event EventHandler RightReleased;public event EventHandler GainedInputFocus;public event EventHandler LostInputFocus;public bool HasFocus{get{return hasFocus&&Visible;}private set{hasFocus=value;}}public bool IsLeftClicked{get;private set;}public bool IsRightClicked{get;private set;}public bool IsNewLeftClicked{get;private set;}public bool IsNewRightClicked{get;private set;}public bool IsLeftReleased{get;private set;}public bool IsRightReleased{get;private set;}private bool mouseCursorEntered;private bool hasFocus;protected readonly Action LoseFocusCallback;public MouseInputElement(HudParentBase parent):base(parent){UseCursor=true;ShareCursor=true;HasFocus=false;DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding;LoseFocusCallback=LoseFocus;}public MouseInputElement():this(null){}public void ClearSubscribers(){CursorEntered=null;CursorExited=null;LeftClicked=null;LeftReleased=null;RightClicked=null;RightReleased=null;}protected override void InputDepth(){State&=~HudElementStates.IsMouseInBounds;if(HudMain.InputMode!=HudInputMode.NoInput&&(HudSpace?.IsFacingCamera??false)){Vector3 cursorPos=HudSpace.CursorPos;Vector2 halfSize=Vector2.Max(cachedSize,new Vector2(minMouseBounds))*.5f;BoundingBox2 box=new BoundingBox2(cachedPosition-halfSize,cachedPosition+halfSize);bool mouseInBounds;if(maskingBox==null){mouseInBounds=box.Contains(new Vector2(cursorPos.X,cursorPos.Y))==ContainmentType.Contains||(IsLeftClicked||IsRightClicked);}else{mouseInBounds=box.Intersect(maskingBox.Value).Contains(new Vector2(cursorPos.X,cursorPos.Y))==ContainmentType.Contains||(IsLeftClicked||IsRightClicked);}if(mouseInBounds){State|=HudElementStates.IsMouseInBounds;HudMain.Cursor.TryCaptureHudSpace(cursorPos.Z,HudSpace.GetHudSpaceFunc);}}}protected override void HandleInput(Vector2 cursorPos){if(IsMousedOver){if(!mouseCursorEntered){mouseCursorEntered=true;CursorEntered?.Invoke(_parent,EventArgs.Empty);}if(SharedBinds.LeftButton.IsNewPressed){GetInputFocus();OnLeftClick();}else{IsNewLeftClicked=false;}if(SharedBinds.RightButton.IsNewPressed){GetInputFocus();OnRightClick();}else{IsNewRightClicked=false;}}else{if(mouseCursorEntered){mouseCursorEntered=false;CursorExited?.Invoke(_parent,EventArgs.Empty);}if(HasFocus&&(SharedBinds.LeftButton.IsNewPressed||SharedBinds.RightButton.IsNewPressed))LoseFocus();IsNewLeftClicked=false;IsNewRightClicked=false;}if(!SharedBinds.LeftButton.IsPressed&&IsLeftClicked){LeftReleased?.Invoke(_parent,EventArgs.Empty);IsLeftReleased=true;IsLeftClicked=false;}else IsLeftReleased=false;if(!SharedBinds.RightButton.IsPressed&&IsRightClicked){RightReleased?.Invoke(_parent,EventArgs.Empty);IsRightReleased=true;IsRightClicked=false;}else IsRightReleased=false;}public virtual void OnLeftClick(){LeftClicked?.Invoke(_parent,EventArgs.Empty);IsLeftClicked=true;IsNewLeftClicked=true;IsLeftReleased=false;}public virtual void OnRightClick(){RightClicked?.Invoke(_parent,EventArgs.Empty);IsRightClicked=true;IsNewRightClicked=true;IsRightReleased=false;}public virtual void GetInputFocus(){if(!hasFocus){hasFocus=true;HudMain.GetInputFocus(LoseFocusCallback);GainedInputFocus?.Invoke(_parent,EventArgs.Empty);}}protected virtual void LoseFocus(){if(hasFocus){hasFocus=false;LostInputFocus?.Invoke(_parent,EventArgs.Empty);}}}}﻿using System.Collections.Generic;using VRageMath;namespace RichHudFramework.UI{public class MouseInputFilter:HudElementBase{public bool IsControlPressed{get;private set;}public IReadOnlyList<IBind>Binds{get;set;}public MouseInputFilter(HudParentBase parent):base(parent){UseCursor=true;ShareCursor=true;}public MouseInputFilter():this(null){}protected override void HandleInput(Vector2 cursorPos){IsControlPressed=false;if(IsMousedOver&&Binds!=null){for(int n=0;n<Binds.Count;n++){if(Binds[n].IsPressed){IsControlPressed=true;break;}}}ShareCursor=!IsControlPressed;}}}﻿using System;using System.Collections.Generic;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework.UI{using HudUpdateAccessors=MyTuple<ApiMemberAccessor,MyTuple<Func<ushort>,Func<Vector3D>>,Action,Action,Action<bool>,Action>;public class ScrollBox<TElementContainer,TElement>:HudChain<TElementContainer,TElement>where TElementContainer:IScrollBoxEntry<TElement>,new()where TElement:HudElementBase{public override float Width{set{if(value>Padding.X)value-=Padding.X;_size.X=value;if(offAxis==0){if(value>0f&&(SizingMode&(HudChainSizingModes.ClampMembersOffAxis|HudChainSizingModes.FitMembersOffAxis))>0)_absMaxSize.X=(value-scrollBarPadding);}else _minLengthInternal=_size.X;}}public override float Height{set{if(value>Padding.Y)value-=Padding.Y;_size.Y=value;if(offAxis==1){if(value>0f&&(SizingMode&(HudChainSizingModes.ClampMembersOffAxis|HudChainSizingModes.FitMembersOffAxis))>0)_absMaxSize.Y=(value-scrollBarPadding);}else _minLengthInternal=_size.Y;}}public int MinVisibleCount{get;set;}public float MinLength{get{return _minLength;}set{_minLength=value;}}public int Start{get{return MathHelper.Clamp(_intStart,0,hudCollectionList.Count-1);}set{if(value!=_intStart){_intStart=MathHelper.Clamp(value,0,hudCollectionList.Count-1);ScrollBar.Current=GetMinScrollOffset(_intStart,false);}}}public int End{get{return MathHelper.Clamp(_intEnd,0,hudCollectionList.Count-1);}set{if(value!=_intEnd){_intEnd=MathHelper.Clamp(value,0,hudCollectionList.Count-1);ScrollBar.Current=GetMinScrollOffset(_intEnd,true);}}}public Vector2I ClipRange=>new Vector2I(_start,_end);public int VisStart{get;private set;}public int VisCount{get;private set;}public int EnabledCount{get;private set;}public Color Color{get{return Background.Color;}set{Background.Color=value;}}public Color BarColor{get{return ScrollBar.slide.BarColor;}set{ScrollBar.slide.BarColor=value;}}public Color BarHighlight{get{return ScrollBar.slide.BarHighlight;}set{ScrollBar.slide.BarHighlight=value;}}public Color SliderColor{get{return ScrollBar.slide.SliderColor;}set{ScrollBar.slide.SliderColor=value;}}public Color SliderHighlight{get{return ScrollBar.slide.SliderHighlight;}set{ScrollBar.slide.SliderHighlight=value;}}public bool EnableScrolling{get;set;}public bool UseSmoothScrolling{get;set;}public override bool AlignVertical{set{ScrollBar.Vertical=value;base.AlignVertical=value;if(value){ScrollBar.DimAlignment=DimAlignments.Height;Divider.DimAlignment=DimAlignments.Height;ScrollBar.ParentAlignment=ParentAlignments.Right|ParentAlignments.InnerH;Divider.ParentAlignment=ParentAlignments.Left|ParentAlignments.InnerH;Divider.Padding=new Vector2(2f,0f);Divider.Width=1f;ScrollBar.Padding=new Vector2(30f,10f);ScrollBar.Width=43f;}else{ScrollBar.DimAlignment=DimAlignments.Width;Divider.DimAlignment=DimAlignments.Width;ScrollBar.ParentAlignment=ParentAlignments.Bottom|ParentAlignments.InnerV;Divider.ParentAlignment=ParentAlignments.Bottom|ParentAlignments.InnerV;Divider.Padding=new Vector2(16f,2f);Divider.Height=1f;ScrollBar.Padding=new Vector2(16f);ScrollBar.Height=24f;}}}public ScrollBar ScrollBar{get;protected set;}public TexturedBox Divider{get;protected set;}public TexturedBox Background{get;protected set;}protected float scrollBarPadding,_minLength,_minLengthInternal;protected int _intStart,_intEnd,_start,_end,firstEnabled;public ScrollBox(bool alignVertical,HudParentBase parent=null):base(alignVertical,parent){Background=new TexturedBox(this){Color=TerminalFormatting.DarkSlateGrey,DimAlignment=DimAlignments.Both,ZOffset=-1,};MinVisibleCount=1;UseCursor=true;ShareCursor=false;EnableScrolling=true;UseSmoothScrolling=true;ZOffset=1;}protected override void Init(){ScrollBar=new ScrollBar(this);Divider=new TexturedBox(ScrollBar){Color=new Color(53,66,75)};}public ScrollBox(HudParentBase parent):this(false,parent){}public ScrollBox():this(false,null){}protected override void HandleInput(Vector2 cursorPos){ScrollBar.MouseInput.InputEnabled=EnableScrolling;if(hudCollectionList.Count>0&&EnableScrolling&&(IsMousedOver||ScrollBar.IsMousedOver)){if(UseSmoothScrolling){if(SharedBinds.MousewheelUp.IsPressed)ScrollBar.Current-=hudCollectionList[_intEnd].Element.Size[alignAxis]+Spacing;else if(SharedBinds.MousewheelDown.IsPressed)ScrollBar.Current+=hudCollectionList[_intStart].Element.Size[alignAxis]+Spacing;}else{if(SharedBinds.MousewheelUp.IsPressed)Start--;else if(SharedBinds.MousewheelDown.IsPressed)End++;}}}protected override void Layout(){Vector2 effectivePadding=cachedPadding;scrollBarPadding=ScrollBar.Size[offAxis];effectivePadding[offAxis]+=scrollBarPadding;UpdateMemberSizes();float rangeLength=Math.Max(_minLength,_minLengthInternal);float totalEnabledLength=0f,scrollOffset=0f;if(hudCollectionList.Count>0)UpdateElementRange(rangeLength,out totalEnabledLength,out scrollOffset);Vector2 size=cachedSize,visibleTotalSize=GetVisibleTotalSize(),listSize=GetListSize(size-effectivePadding,visibleTotalSize);if(UseSmoothScrolling){if(hudCollectionList.Count>0){hudCollectionList[_start].Element.Visible=true;hudCollectionList[_end].Element.Visible=true;}}else{scrollOffset=0f;}size=listSize;size[offAxis]+=scrollBarPadding;_size=size;ScrollBar.Current=(float)Math.Round(ScrollBar.Current,6);ScrollBar.Max=(float)Math.Round(Math.Max(totalEnabledLength-listSize[alignAxis],0f),6);float visRatio=Math.Max(listSize[alignAxis]/totalEnabledLength,0f);Vector2 sliderSize=ScrollBar.slide.BarSize;sliderSize[alignAxis]=(Size[alignAxis]-ScrollBar.Padding[alignAxis])*visRatio;ScrollBar.slide.SliderSize=sliderSize;Vector2 startOffset;if(alignAxis==1)startOffset=new Vector2(-scrollBarPadding*.5f,listSize.Y*.5f+scrollOffset);else startOffset=new Vector2(-listSize.X*.5f-scrollOffset,scrollBarPadding*.5f);UpdateMemberOffsets(startOffset,effectivePadding);}private void UpdateElementRange(float length,out float totalEnabledLength,out float scrollOffset){float spacing=Spacing,scrollCurrent=ScrollBar.Current,minVisLength=0f;EnabledCount=0;_intEnd=-1;firstEnabled=-1;totalEnabledLength=0f;scrollOffset=scrollCurrent;for(int i=0;i<hudCollectionList.Count;i++){if(hudCollectionList[i].Enabled){float elementSize=hudCollectionList[i].Element.Size[alignAxis];if(EnabledCount<MinVisibleCount)minVisLength+=elementSize;length=Math.Max(minVisLength,length);float delta=totalEnabledLength+elementSize-scrollCurrent-length;if(firstEnabled==-1)firstEnabled=i;if(delta<=0f){scrollOffset-=elementSize+spacing;_intEnd=i;}totalEnabledLength+=elementSize+spacing;EnabledCount++;}}totalEnabledLength-=spacing;VisCount=0;int max=hudCollectionList.Count-1;firstEnabled=MathHelper.Clamp(firstEnabled,0,max);_intEnd=MathHelper.Clamp(_intEnd,firstEnabled,max);_intStart=MathHelper.Clamp(_intStart,firstEnabled,max);for(int i=_intEnd;i>=firstEnabled;i--){if(hudCollectionList[i].Enabled){float elementSize=hudCollectionList[i].Element.Size[alignAxis];if(length>=elementSize||VisCount<MinVisibleCount){scrollOffset+=elementSize+spacing;_intStart=i;VisCount++;}else break;length-=elementSize+spacing;}}if(EnabledCount>VisCount){for(int n=_intEnd+1;(n<hudCollectionList.Count&&VisCount<MinVisibleCount);n++){if(hudCollectionList[n].Enabled){_intEnd=n;VisCount++;}}}_start=_intStart;_end=_intEnd;if(UseSmoothScrolling){for(int i=_intStart-1;i>=firstEnabled;i--){if(hudCollectionList[i].Enabled){_start=i;break;}}for(int i=_intEnd+1;i<hudCollectionList.Count;i++){if(hudCollectionList[i].Enabled){_end=i;break;}}if(_start!=_intStart)scrollOffset+=hudCollectionList[_start].Element.Size[alignAxis]+spacing;}VisStart=GetVisibleIndex(_intStart);for(int i=0;i<hudCollectionList.Count;i++)hudCollectionList[i].Element.Visible=(i>=_intStart&&i<=_intEnd)&&hudCollectionList[i].Enabled;}private int GetVisibleIndex(int index){int count=0;for(int n=0;n<index;n++){if(hudCollectionList[n].Enabled)count++;}return count;}private float GetMinScrollOffset(int index,bool getEnd){if(hudCollectionList.Count>0){firstEnabled=MathHelper.Clamp(firstEnabled,0,hudCollectionList.Count-1);float elementSize,offset=.1f,spacing=Spacing;if(getEnd)offset-=cachedSize[alignAxis]-cachedPadding[alignAxis]+spacing;else{index--;}for(int i=0;i<=index&&i<hudCollectionList.Count;i++){if(hudCollectionList[i].Enabled){elementSize=hudCollectionList[i].Element.Size[alignAxis];offset+=(elementSize+spacing);}}return Math.Max((float)Math.Round(offset,6),0f);}else return 0f;}public override void GetUpdateAccessors(List<HudUpdateAccessors>UpdateActions,byte treeDepth){int preloadRange=Math.Max((End-Start)*2,10),preloadStart=MathHelper.Clamp(Start-preloadRange,0,hudCollectionList.Count-1),preloadCount=MathHelper.Clamp((2*preloadRange),0,hudCollectionList.Count-preloadStart);HudElementStates memberFlags=HudElementStates.CanPreload;if(UseSmoothScrolling)memberFlags|=HudElementStates.IsSelectivelyMasked;NodeUtils.SetNodesState<TElementContainer,TElement>(HudElementStates.CanPreload,true,hudCollectionList,0,hudCollectionList.Count);NodeUtils.SetNodesState<TElementContainer,TElement>(memberFlags,false,hudCollectionList,preloadStart,preloadCount);base.GetUpdateAccessors(UpdateActions,treeDepth);}}public class ScrollBox<TElementContainer>:ScrollBox<TElementContainer,HudElementBase>where TElementContainer:IScrollBoxEntry<HudElementBase>,new(){public ScrollBox(bool alignVertical,HudParentBase parent=null):base(alignVertical,parent){}}public class ScrollBox:ScrollBox<ScrollBoxEntry>{public ScrollBox(bool alignVertical,HudParentBase parent=null):base(alignVertical,parent){}}}﻿using RichHudFramework.UI.Rendering;using System;using System.Collections.Generic;using System.Diagnostics;using VRageMath;namespace RichHudFramework.UI{using Client;public class TextBox:Label,IClickableElement{public bool EnableEditing{get{return caret.ShowCaret;}set{caret.ShowCaret=value;}}public bool EnableHighlighting{get;set;}public bool InputOpen{get;private set;}public Func<char,bool>CharFilterFunc{get;set;}public Vector2I SelectionStart=>selectionBox.Start;public Vector2I SelectionEnd=>selectionBox.End;public bool SelectionEmpty=>selectionBox.Empty;public bool MoveToEndOnGainFocus{get;set;}public bool ClearSelectionOnLoseFocus{get;set;}public IMouseInput MouseInput{get;}private readonly TextInput textInput;private readonly TextCaret caret;private readonly SelectionBox selectionBox;private readonly ToolTip warningToolTip;private bool canHighlight,allowInput;private Vector2 cursorStart;public TextBox(HudParentBase parent):base(parent){MouseInput=new MouseInputElement(this){ShareCursor=true,ZOffset=1};textInput=new TextInput(AddChar,RemoveLastChar,TextInputFilter);caret=new TextCaret(this){Visible=false};selectionBox=new SelectionBox(caret,this){Color=new Color(255,255,255,140)};warningToolTip=new ToolTip(){text="Open Chat to Enable Text Editing",bgColor=ToolTip.orangeWarningBG};caret.CaretMoved+=CaretMoved;MouseInput.GainedInputFocus+=GainFocus;MouseInput.LostInputFocus+=LoseFocus;ShareCursor=true;EnableEditing=true;EnableHighlighting=true;UseCursor=true;MoveToEndOnGainFocus=false;ClearSelectionOnLoseFocus=true;Size=new Vector2(60f,200f);}public TextBox():this(null){}public void OpenInput(){allowInput=true;UpdateInputOpen();caret.SetPosition(0);caret.SetPosition(short.MaxValue);}public void CloseInput(){allowInput=false;UpdateInputOpen();selectionBox.ClearSelection();}public void SetSelection(Vector2I start,Vector2I end)=>selectionBox.SetSelection(start,end);public void ClearSelection()=>selectionBox.ClearSelection();private bool TextInputFilter(char ch){if(CharFilterFunc==null)return ch>=' '||ch=='\n'||ch=='\t';else return CharFilterFunc(ch)&&(ch>=' '||ch=='\n');}private void CaretMoved(){if(canHighlight)selectionBox.UpdateSelection();}private void GainFocus(object sender,EventArgs args){if(MoveToEndOnGainFocus)caret.SetPosition(short.MaxValue);}private void LoseFocus(object sender,EventArgs args){if(ClearSelectionOnLoseFocus)ClearSelection();}protected override void HandleInput(Vector2 cursorPos){bool useInput=allowInput||(MouseInput.HasFocus&&HudMain.InputMode==HudInputMode.Full);if(EnableEditing&&IsMousedOver&&HudMain.InputMode==HudInputMode.CursorOnly)HudMain.Cursor.RegisterToolTip(warningToolTip);if(useInput&&EnableEditing){textInput.HandleInput();if(SharedBinds.Cut.IsNewPressed&&!selectionBox.Empty&&EnableHighlighting){RichText text=TextBoard.GetTextRange(selectionBox.Start,selectionBox.End);DeleteSelection();caret.Move(new Vector2I(0,-GetRichTextMinLength(text)));HudMain.ClipBoard=text;}if(SharedBinds.Paste.IsNewPressed){if(!HudMain.ClipBoard.Equals(default(RichText))){Vector2I insertIndex=caret.CaretIndex+new Vector2I(0,1);insertIndex.X=MathHelper.Clamp(insertIndex.X,0,TextBoard.Count);DeleteSelection();TextBoard.Insert(HudMain.ClipBoard,insertIndex);int length=GetRichTextMinLength(HudMain.ClipBoard);if(caret.CaretIndex.Y==-1)length++;caret.Move(new Vector2I(0,length));}}}UpdateInputOpen();caret.Visible=InputOpen;if(useInput&&EnableHighlighting){bool isCursorHighlighting=false;if(UseCursor){if(MouseInput.IsNewLeftClicked){cursorStart=cursorPos;selectionBox.ClearSelection();}else if(!canHighlight&&MouseInput.IsLeftClicked&&(cursorPos-cursorStart).LengthSquared()>16f){canHighlight=true;isCursorHighlighting=true;}else if(!MouseInput.IsLeftClicked){canHighlight=false;}}if(!isCursorHighlighting)canHighlight=SharedBinds.Shift.IsPressed;if(SharedBinds.SelectAll.IsNewPressed)selectionBox.SetSelection(Vector2I.Zero,new Vector2I(TextBoard.Count-1,TextBoard[TextBoard.Count-1].Count-1));else if(SharedBinds.Escape.IsNewPressed)selectionBox.ClearSelection();if(SharedBinds.Copy.IsNewPressed&&!selectionBox.Empty)HudMain.ClipBoard=TextBoard.GetTextRange(selectionBox.Start,selectionBox.End);}else{canHighlight=false;}}private void UpdateInputOpen(){bool useInput=allowInput||(MouseInput.HasFocus&&HudMain.InputMode==HudInputMode.Full);InputOpen=useInput&&(EnableHighlighting||EnableEditing);}private void AddChar(char ch){DeleteSelection();TextBoard.Insert(ch,caret.CaretIndex+new Vector2I(0,1));caret.Move(new Vector2I(0,1));}private void RemoveLastChar(){if(TextBoard.Count>0&&TextBoard[caret.CaretIndex.X].Count>0){DeleteSelection();if(caret.CaretIndex.Y>=0)TextBoard.RemoveAt(ClampIndex(caret.CaretIndex));caret.Move(new Vector2I(0,-1));}}private void DeleteSelection(){if(!selectionBox.Empty){TextBoard.RemoveRange(selectionBox.Start,selectionBox.End);selectionBox.ClearSelection();}}private Vector2I ClampIndex(Vector2I index){if(TextBoard.Count>0){index.X=MathHelper.Clamp(index.X,0,TextBoard.Count-1);index.Y=MathHelper.Clamp(index.Y,0,TextBoard[index.X].Count-1);return index;}else return Vector2I.Zero;}private static int GetRichTextMinLength(RichText text){int length=0;for(int n=0;n<text.apiData.Count;n++)length+=text.apiData[n].Item1.Length;return length;}private class TextCaret:TexturedBox{public Vector2I CaretIndex{get;private set;}public bool ShowCaret{get;set;}public event Action CaretMoved;private readonly TextBox textElement;private readonly ITextBoard text;private readonly Stopwatch blinkTimer;private bool blink,caretMoved;private int caretOffset;private Vector2 lastCursorPos;public TextCaret(TextBox textElement):base(textElement){this.textElement=textElement;text=textElement.TextBoard;Size=new Vector2(1f,16f);Color=new Color(240,240,230);blinkTimer=new Stopwatch();blinkTimer.Start();}public void Move(Vector2I dir,bool navigate=false){Vector2I newIndex,min=new Vector2I(0,-1);if(dir.Y<0&&CaretIndex==min)dir.Y=0;bool moveLeft=dir.Y<0,moveRight=dir.Y>0,prepending=CaretIndex.Y==-1,startPrepend=moveLeft&&CaretIndex.Y==0;if(startPrepend||(dir.Y==0&&prepending)){newIndex=CaretIndex+new Vector2I(dir.X,0);newIndex.Y=-1;newIndex=ClampIndex(newIndex);caretOffset=GetOffsetFromIndex(new Vector2I(newIndex.X,0));}else{int newOffset=Math.Max(caretOffset+dir.Y,0);if((prepending&&moveRight)&&(CaretIndex.X>0||text[0].Count>1))newOffset-=1;newIndex=GetIndexFromOffset(newOffset)+new Vector2I(dir.X,0);newIndex=ClampIndex(newIndex);caretOffset=GetOffsetFromIndex(newIndex);if(navigate&&moveRight&&newIndex.X>CaretIndex.X)newIndex.Y=-1;}CaretIndex=ClampIndex(newIndex);caretMoved=true;if(CaretIndex.Y>=0)text.MoveToChar(CaretIndex);else text.MoveToChar(CaretIndex+new Vector2I(0,1));blink=true;blinkTimer.Restart();}public void SetPosition(Vector2I index){index=ClampIndex(index);if(CaretIndex!=index)caretMoved=true;CaretIndex=index;caretOffset=Math.Max(GetOffsetFromIndex(CaretIndex),0);text.MoveToChar(CaretIndex);}public void SetPosition(short offset){Vector2I index=GetIndexFromOffset(offset);if(CaretIndex!=index)caretMoved=true;CaretIndex=index;caretOffset=Math.Max(GetOffsetFromIndex(CaretIndex),0);text.MoveToChar(index);}protected override void Layout(){base.Layout();if(caretMoved){CaretMoved?.Invoke();caretMoved=false;}}protected override void Draw(){if(ShowCaret){bool isCharVisible=text.Count==0||text[0].Count==0;CaretIndex=ClampIndex(CaretIndex);if((text.Count>0&&text[0].Count>0)&&(CaretIndex.X>=text.VisibleLineRange.X&&CaretIndex.X<=text.VisibleLineRange.Y)){Vector2I index=Vector2I.Max(CaretIndex,Vector2I.Zero);IRichChar ch=text[index];Vector2 size=ch.Size,pos=ch.Offset+text.TextOffset;BoundingBox2 textBounds=BoundingBox2.CreateFromHalfExtent(Vector2.Zero,.5f*text.Size),charBounds=BoundingBox2.CreateFromHalfExtent(pos,.5f*Vector2.Max(size,new Vector2(8f)));if(textBounds.Contains(charBounds)!=ContainmentType.Disjoint)isCharVisible=true;}if(blink&isCharVisible){UpdateOffset();base.Draw();}if(blinkTimer.ElapsedMilliseconds>500){blink=!blink;blinkTimer.Restart();}}}private void UpdateOffset(){Vector2 offset=new Vector2();Vector2I index=Vector2I.Max(CaretIndex,Vector2I.Zero);if(text.Count>0&&text[index.X].Count>0){IRichChar ch;Height=text[index.X].Size.Y-2f;ch=text[index];if(CaretIndex.Y==-1){offset=ch.Offset+text.TextOffset;offset.X-=ch.Size.X*.5f+1f;}else{offset=ch.Offset+text.TextOffset;offset.X+=ch.Size.X*.5f+1f;}}else{if(text.Format.Alignment==TextAlignment.Left)offset.X=-textElement.Size.X*.5f+2f;else if(text.Format.Alignment==TextAlignment.Right)offset.X=textElement.Size.X*.5f-2f;offset+=_parentFull.Padding*.5f;if(!text.VertCenterText)offset.Y=(text.Size.Y-Height)*.5f-4f;}Offset=offset;}protected override void HandleInput(Vector2 cursorPos){if(SharedBinds.DownArrow.IsPressedAndHeld||SharedBinds.DownArrow.IsNewPressed)Move(new Vector2I(1,0),true);if(SharedBinds.UpArrow.IsPressedAndHeld||SharedBinds.UpArrow.IsNewPressed)Move(new Vector2I(-1,0),true);if(SharedBinds.RightArrow.IsPressedAndHeld||SharedBinds.RightArrow.IsNewPressed)Move(new Vector2I(0,1),true);if(SharedBinds.LeftArrow.IsPressedAndHeld||SharedBinds.LeftArrow.IsNewPressed)Move(new Vector2I(0,-1),true);if(textElement.UseCursor){if(textElement.MouseInput.IsLeftClicked)GetClickedChar(cursorPos);}}private void GetClickedChar(Vector2 cursorPos){if((cursorPos-lastCursorPos).LengthSquared()>4f){CaretIndex=ClampIndex(CaretIndex);Vector2 offset=cursorPos-textElement.Position;Vector2I index=Vector2I.Max(CaretIndex,Vector2I.Zero),newIndex=text.GetCharAtOffset(offset);if((text.Count>0&&text[index.X].Count>0&&text[index].Ch!='\n')&&(offset.X<text[index].Offset.X))CaretIndex-=new Vector2I(0,1);CaretIndex=ClampIndex(newIndex);caretOffset=GetOffsetFromIndex(CaretIndex);lastCursorPos=cursorPos;blink=true;blinkTimer.Restart();caretMoved=true;}}private Vector2I ClampIndex(Vector2I index){if(text.Count>0){index.X=MathHelper.Clamp(index.X,0,text.Count-1);index.Y=MathHelper.Clamp(index.Y,-1,text[index.X].Count-1);return index;}else return Vector2I.Zero;}private int GetOffsetFromIndex(Vector2I index){int offset=0;for(int line=0;line<index.X;line++){offset+=text[line].Count;}offset+=index.Y;return offset;}private Vector2I GetIndexFromOffset(int offset){Vector2I index=Vector2I.Zero;int charCount=0;for(int line=0;line<text.Count;line++)charCount+=text[line].Count;offset=Math.Min(offset,charCount-1);for(int line=0;line<text.Count;line++){int lineLength=text[line].Count;if(offset<lineLength){index.Y=offset;break;}else{offset-=lineLength;index.X++;}}return index;}}private class SelectionBox:HudElementBase{public Color Color{get{return highlightBoard.Color;}set{highlightBoard.Color=value;}}public Vector2I Start{get;private set;}public Vector2I End{get;private set;}public bool Empty=>(Start==-Vector2I.One||End==-Vector2I.One);private readonly TextCaret caret;private readonly ITextBoard text;private readonly MatBoard highlightBoard;private readonly List<HighlightBox>highlightList;private Vector2 lastTextSize;private Vector2I lastVisRange;private bool highlightStale;public SelectionBox(TextCaret caret,Label parent):base(parent){text=parent.TextBoard;this.caret=caret;Start=-Vector2I.One;highlightBoard=new MatBoard();highlightList=new List<HighlightBox>();}public void SetSelection(Vector2I start,Vector2I end){Start=start;End=end;highlightStale=true;}public void ClearSelection(){Start=-Vector2I.One;End=-Vector2I.One;highlightList.Clear();}public void UpdateSelection(){Vector2I caretIndex=caret.CaretIndex;if(text.Count>0){if(Start==-Vector2I.One){Start=caretIndex;End=Start;if(Start.Y<text[Start.X].Count-1)Start+=new Vector2I(0,1);}else{if(caretIndex.X>Start.X||(caretIndex.X==Start.X&&caretIndex.Y>=Start.Y))End=caretIndex;else{Start=caretIndex;if(Start.Y<text[Start.X].Count-1)Start+=new Vector2I(0,1);}}if(End.Y==-1)End+=new Vector2I(0,1);highlightStale=true;}else{Start=-Vector2I.One;End=-Vector2I.One;}}protected override void Draw(){if(lastTextSize!=text.Size){lastTextSize=text.Size;ClearSelection();}if(!Empty){if(highlightStale||text.VisibleLineRange!=lastVisRange){lastVisRange=text.VisibleLineRange;UpdateHighlight();}Vector2 tbOffset=text.TextOffset,bounds=new Vector2(-text.Size.X*.5f,text.Size.X*.5f);for(int n=0;n<highlightList.Count;n++)highlightList[n].Draw(highlightBoard,Origin,tbOffset,bounds,HudSpace.PlaneToWorldRef);}}private void UpdateHighlight(){highlightStale=false;highlightList.Clear();Vector2I lineRange=text.VisibleLineRange;Start=new Vector2I(MathHelper.Clamp(Start.X,0,text.Count-1),Start.Y);End=new Vector2I(MathHelper.Clamp(End.X,0,text.Count-1),End.Y);if(text.Count>0){Start=new Vector2I(Start.X,MathHelper.Clamp(Start.Y,0,text[Start.X].Count-1));End=new Vector2I(End.X,MathHelper.Clamp(End.Y,0,text[End.X].Count-1));}int startLine=Math.Max(Start.X,lineRange.X),endLine=Math.Min(End.X,lineRange.Y);if(Start.X==End.X&&Start.X==startLine)AddHighlightBox(Start.X,Start.Y,End.Y);else{for(int line=startLine;line<=endLine;line++){if(line==Start.X)AddHighlightBox(Start.X,Start.Y,text[Start.X].Count-1);else if(line==End.X)AddHighlightBox(End.X,0,End.Y);else AddHighlightBox(line,0,text[line].Count-1);}}if(highlightList.Count>0&&highlightList.Capacity>3*highlightList.Count)highlightList.TrimExcess();}private void AddHighlightBox(int line,int startCh,int endCh){if(text[line].Count>0){if(startCh<0||endCh<0||startCh>=text[line].Count||endCh>=text[line].Count)throw new Exception($"Char out of range. Line: {line} StartCh: {startCh}, EndCh: {endCh}, Count: {text[line].Count}");IRichChar left=text[line][startCh],right=text[line][endCh];var highlightBox=new HighlightBox{size=new Vector2(){X=right.Offset.X-left.Offset.X+(left.Size.X+right.Size.X)*.5f,Y=text[line].Size.Y},offset=new Vector2(){X=(right.Offset.X+left.Offset.X)*.5f-2f,Y=text[line].VerticalOffset-text[line].Size.Y*.5f}};if(highlightBox.size.X>1f)highlightBox.size.X+=4f;highlightList.Add(highlightBox);}}private struct HighlightBox{public Vector2 size,offset;public void Draw(MatBoard matBoard,Vector2 origin,Vector2 tbOffset,Vector2 xBounds,MatrixD[]matrixRef){CroppedBox box=default(CroppedBox);Vector2 clipSize,clipPos;clipSize=size;clipPos=offset+tbOffset;float leftBound=Math.Max(clipPos.X-clipSize.X*.5f,xBounds.X),rightBound=Math.Min(clipPos.X+clipSize.X*.5f,xBounds.Y);clipSize.X=Math.Max(0,rightBound-leftBound);clipPos.X=(rightBound+leftBound)*.5f;clipPos+=origin;clipSize*=.5f;box.bounds=new BoundingBox2(clipPos-clipSize,clipPos+clipSize);matBoard.Draw(ref box,matrixRef);}}}}}﻿using RichHudFramework.UI.Rendering;using System;using VRageMath;namespace RichHudFramework.UI{public class TextField:LabelBoxBase,IClickableElement,ILabelElement{public event EventHandler TextChanged;public RichText Text{get{return textBox.TextBoard.GetText();}set{textBox.TextBoard.SetText(value);}}public ITextBoard TextBoard=>textBox.TextBoard;public GlyphFormat Format{get{return textBox.Format;}set{textBox.Format=value;}}public Color FocusTextColor{get;set;}public override Vector2 TextSize{get{return textBox.Size;}set{textBox.Size=value;}}public override Vector2 TextPadding{get{return textBox.Padding;}set{textBox.Padding=value;}}public override bool AutoResize{get{return textBox.AutoResize;}set{textBox.AutoResize=value;}}public bool EnableEditing{get{return textBox.EnableEditing;}set{textBox.EnableEditing=value;}}public bool EnableTextHighlighting{get{return textBox.EnableHighlighting;}set{textBox.EnableHighlighting=value;}}public bool InputOpen=>textBox.InputOpen;public Func<char,bool>CharFilterFunc{get{return textBox.CharFilterFunc;}set{textBox.CharFilterFunc=value;}}public Vector2I SelectionStart=>textBox.SelectionStart;public Vector2I SelectionEnd=>textBox.SelectionEnd;public bool SelectionEmpty=>textBox.SelectionEmpty;public Color HighlightColor{get;set;}public Color FocusColor{get;set;}public Color BorderColor{get{return border.Color;}set{border.Color=value;}}public float BorderThickness{get{return border.Thickness;}set{border.Thickness=value;}}public bool HighlightEnabled{get;set;}public bool UseFocusFormatting{get;set;}public IMouseInput MouseInput=>textBox.MouseInput;public override bool IsMousedOver=>textBox.IsMousedOver;public TextBuilderModes BuilderMode{get{return textBox.BuilderMode;}set{textBox.BuilderMode=value;}}public bool VertCenterText{get{return textBox.VertCenterText;}set{textBox.VertCenterText=value;}}protected readonly TextBox textBox;protected readonly BorderBox border;protected Color lastColor,lastTextColor;public TextField(HudParentBase parent):base(parent){border=new BorderBox(background){Thickness=1f,DimAlignment=DimAlignments.Both,};textBox=new TextBox(background){AutoResize=false,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,Padding=new Vector2(24f,0f),MoveToEndOnGainFocus=true,ClearSelectionOnLoseFocus=true};Format=TerminalFormatting.ControlFormat;FocusTextColor=TerminalFormatting.Charcoal;Text="NewTextField";Color=TerminalFormatting.OuterSpace;HighlightColor=TerminalFormatting.Atomic;FocusColor=TerminalFormatting.Mint;BorderColor=TerminalFormatting.LimedSpruce;UseFocusFormatting=true;HighlightEnabled=true;Size=new Vector2(250f,40);textBox.TextBoard.TextChanged+=OnTextChanged;MouseInput.CursorEntered+=CursorEnter;MouseInput.CursorExited+=CursorExit;MouseInput.GainedInputFocus+=GainFocus;MouseInput.LostInputFocus+=LoseFocus;}public TextField():this(null){}public void OpenInput()=>textBox.OpenInput();public void CloseInput()=>textBox.CloseInput();private void OnTextChanged(){TextChanged?.Invoke(this,EventArgs.Empty);}protected virtual void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){if(!(UseFocusFormatting&&MouseInput.HasFocus)){lastColor=Color;lastTextColor=Format.Color;}TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));Color=HighlightColor;}}protected virtual void CursorExit(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&MouseInput.HasFocus){Color=FocusColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(FocusTextColor));}else{Color=lastColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));}}}protected virtual void GainFocus(object sender,EventArgs args){if(UseFocusFormatting){if(!MouseInput.IsMousedOver){lastColor=Color;lastTextColor=TextBoard.Format.Color;}Color=FocusColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(FocusTextColor));}}protected virtual void LoseFocus(object sender,EventArgs args){if(UseFocusFormatting){Color=lastColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class BorderedButton:LabelBoxButton{public Color BorderColor{get{return border.Color;}set{border.Color=value;}}public float BorderThickness{get{return border.Thickness;}set{border.Thickness=value;}}public override Color HighlightColor{get;set;}public Color FocusTextColor{get;set;}public Color FocusColor{get;set;}public bool UseFocusFormatting{get;set;}protected readonly BorderBox border;protected Color lastColor,lastTextColor;public BorderedButton(HudParentBase parent):base(parent){border=new BorderBox(this){Thickness=1f,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};AutoResize=false;Format=TerminalFormatting.ControlFormat.WithAlignment(TextAlignment.Center);FocusTextColor=TerminalFormatting.Charcoal;Text="NewBorderedButton";TextPadding=new Vector2(32f,0f);Padding=new Vector2(37f,0f);Size=new Vector2(253f,50f);HighlightEnabled=true;Color=TerminalFormatting.OuterSpace;HighlightColor=TerminalFormatting.Atomic;BorderColor=TerminalFormatting.LimedSpruce;FocusColor=TerminalFormatting.Mint;UseFocusFormatting=true;_mouseInput.GainedInputFocus+=GainFocus;_mouseInput.LostInputFocus+=LoseFocus;}public BorderedButton():this(null){}protected override void HandleInput(Vector2 cursorPos){if(MouseInput.HasFocus){if(SharedBinds.Space.IsNewPressed){_mouseInput.OnLeftClick();}}}protected override void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){if(!(UseFocusFormatting&&MouseInput.HasFocus)){lastColor=Color;lastTextColor=TextBoard.Format.Color;}TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));Color=HighlightColor;}}protected override void CursorExit(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&MouseInput.HasFocus){Color=FocusColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(FocusTextColor));}else{Color=lastColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));}}}protected virtual void GainFocus(object sender,EventArgs args){if(UseFocusFormatting){if(!MouseInput.IsMousedOver){lastColor=Color;lastTextColor=TextBoard.Format.Color;}Color=FocusColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(FocusTextColor));}}protected virtual void LoseFocus(object sender,EventArgs args){if(UseFocusFormatting){Color=lastColor;TextBoard.SetFormatting(TextBoard.Format.WithColor(lastTextColor));}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class BorderedCheckBox:Button{public bool IsBoxChecked{get{return tickBox.Visible;}set{tickBox.Visible=value;}}public Color BorderColor{get{return border.Color;}set{border.Color=value;}}public float BorderThickness{get{return border.Thickness;}set{border.Thickness=value;}}public Color TickBoxColor{get{return tickBox.Color;}set{tickBox.Color=value;}}public Color TickBoxHighlightColor{get;set;}public Color TickBoxFocusColor{get;set;}public Color FocusColor{get;set;}public bool UseFocusFormatting{get;set;}protected readonly BorderBox border;protected readonly TexturedBox tickBox;protected Color lastTickColor;public BorderedCheckBox(HudParentBase parent):base(parent){border=new BorderBox(this){Thickness=1f,DimAlignment=DimAlignments.Both,};tickBox=new TexturedBox(){DimAlignment=DimAlignments.Both,Padding=new Vector2(17f),};tickBox.Register(this,true);Size=new Vector2(37f);Color=TerminalFormatting.OuterSpace;HighlightColor=TerminalFormatting.Atomic;FocusColor=TerminalFormatting.Mint;TickBoxColor=TerminalFormatting.StormGrey;TickBoxHighlightColor=Color.White;TickBoxFocusColor=TerminalFormatting.Cinder;BorderColor=TerminalFormatting.LimedSpruce;UseFocusFormatting=true;MouseInput.LeftClicked+=ToggleValue;MouseInput.GainedInputFocus+=GainFocus;MouseInput.LostInputFocus+=LoseFocus;}public BorderedCheckBox():this(null){}protected override void HandleInput(Vector2 cursorPos){if(MouseInput.HasFocus){if(SharedBinds.Space.IsNewPressed){_mouseInput.OnLeftClick();}}}private void ToggleValue(object sender,EventArgs args){IsBoxChecked=!IsBoxChecked;}protected override void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){if(!(UseFocusFormatting&&MouseInput.HasFocus)){lastBackgroundColor=Color;lastTickColor=TickBoxColor;}Color=HighlightColor;TickBoxColor=TickBoxHighlightColor;}}protected override void CursorExit(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&MouseInput.HasFocus){Color=FocusColor;TickBoxColor=TickBoxFocusColor;}else{Color=lastBackgroundColor;TickBoxColor=lastTickColor;}}}protected virtual void GainFocus(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&!MouseInput.IsMousedOver){Color=FocusColor;TickBoxColor=TickBoxFocusColor;}}}protected virtual void LoseFocus(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting){Color=lastBackgroundColor;TickBoxColor=lastTickColor;}}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class Button:TexturedBox,IClickableElement{public override bool IsMousedOver=>_mouseInput.IsMousedOver;public IMouseInput MouseInput=>_mouseInput;public bool HighlightEnabled{get;set;}public Color HighlightColor{get;set;}protected readonly MouseInputElement _mouseInput;protected Color lastBackgroundColor;public Button(HudParentBase parent):base(parent){_mouseInput=new MouseInputElement(this);HighlightColor=new Color(125,125,125,255);HighlightEnabled=true;_mouseInput.CursorEntered+=CursorEnter;_mouseInput.CursorExited+=CursorExit;}public Button():this(null){}protected virtual void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){lastBackgroundColor=Color;Color=HighlightColor;}}protected virtual void CursorExit(object sender,EventArgs args){if(HighlightEnabled){Color=lastBackgroundColor;}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class LabelBoxButton:LabelBox,IClickableElement{public virtual Color HighlightColor{get;set;}public virtual bool HighlightEnabled{get;set;}public override bool IsMousedOver=>_mouseInput.IsMousedOver;public IMouseInput MouseInput=>_mouseInput;protected MouseInputElement _mouseInput;protected Color oldColor;public LabelBoxButton(HudParentBase parent):base(parent){_mouseInput=new MouseInputElement(this);Color=Color.DarkGray;HighlightColor=Color.Gray;HighlightEnabled=true;_mouseInput.CursorEntered+=CursorEnter;_mouseInput.CursorExited+=CursorExit;}public LabelBoxButton():this(null){}protected virtual void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){oldColor=Color;Color=HighlightColor;}}protected virtual void CursorExit(object sender,EventArgs args){if(HighlightEnabled){Color=oldColor;}}}}﻿namespace RichHudFramework.UI{public class LabelButton:Label,IClickableElement{public IMouseInput MouseInput=>_mouseInput;public override bool IsMousedOver=>_mouseInput.IsMousedOver;protected MouseInputElement _mouseInput;public LabelButton(HudParentBase parent):base(parent){_mouseInput=new MouseInputElement(this);}public LabelButton():this(null){}}}﻿using RichHudFramework.UI.Rendering;using VRageMath;namespace RichHudFramework.UI{public class NamedCheckBox:HudElementBase,IClickableElement{public RichText Name{get{return name.TextBoard.GetText();}set{name.TextBoard.SetText(value);}}public GlyphFormat Format{get{return name.TextBoard.Format;}set{name.TextBoard.Format=value;}}public Vector2 TextSize{get{return name.Size;}set{name.Size=value;}}public Vector2 TextPadding{get{return name.Padding;}set{name.Padding=value;}}public bool AutoResize{get{return name.AutoResize;}set{name.AutoResize=value;}}public TextBuilderModes BuilderMode{get{return name.BuilderMode;}set{name.BuilderMode=value;}}public bool VertCenterText{get{return name.VertCenterText;}set{name.VertCenterText=value;}}public ITextBuilder NameBuilder=>name.TextBoard;public IMouseInput MouseInput=>checkbox.MouseInput;public bool IsBoxChecked{get{return checkbox.IsBoxChecked;}set{checkbox.IsBoxChecked=value;}}private readonly Label name;private readonly BorderedCheckBox checkbox;private readonly HudChain layout;public NamedCheckBox(HudParentBase parent):base(parent){name=new Label(){Format=TerminalFormatting.ControlFormat.WithAlignment(TextAlignment.Right),Text="NewCheckbox",AutoResize=false};checkbox=new BorderedCheckBox();layout=new HudChain(false,this){Spacing=17f,CollectionContainer={name,checkbox}};AutoResize=true;Size=new Vector2(250f,37f);}protected override void Layout(){Vector2 size=cachedSize-cachedPadding;checkbox.Size=new Vector2(size.Y);name.Width=size.X-checkbox.Width-layout.Spacing;}public NamedCheckBox():this(null){}}}﻿using VRageMath;namespace RichHudFramework.UI{public class NamedOnOffButton:HudElementBase,IClickableElement{public override Vector2 Padding{get{return layout.Padding;}set{layout.Padding=value;}}public RichText Name{get{return name.Text;}set{name.Text=value;}}public float ButtonSpacing{get{return onOffButton.ButtonSpacing;}set{onOffButton.ButtonSpacing=value;}}public Vector2 ButtonPadding{get{return onOffButton.Padding;}set{onOffButton.Padding=value;}}public Color BorderColor{get{return onOffButton.BorderColor;}set{onOffButton.BorderColor=value;}}public RichText OnText{get{return onOffButton.OnText;}set{onOffButton.OnText=value;}}public RichText OffText{get{return onOffButton.OnText;}set{onOffButton.OnText=value;}}public GlyphFormat Format{get{return onOffButton.Format;}set{onOffButton.Format=value;}}public bool Value{get{return onOffButton.Value;}set{onOffButton.Value=value;}}public IMouseInput MouseInput=>onOffButton.MouseInput;protected readonly Label name;protected readonly OnOffButton onOffButton;protected readonly HudChain layout;public NamedOnOffButton(HudParentBase parent):base(parent){name=new Label(){Format=TerminalFormatting.ControlFormat.WithAlignment(TextAlignment.Center),Text="NewOnOffButton",AutoResize=false,Height=22f,};onOffButton=new OnOffButton(){Padding=new Vector2(78f,0f),};layout=new HudChain(true,this){SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.FitChainBoth,DimAlignment=DimAlignments.Width|DimAlignments.IgnorePadding,Spacing=2f,CollectionContainer={name,onOffButton}};Padding=new Vector2(20f,0f);Size=new Vector2(300f,84f);}public NamedOnOffButton():this(null){}protected override void Layout(){onOffButton.Height=Height-name.Height-Padding.Y-layout.Spacing;}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class OnOffButton:HudElementBase,IClickableElement{public float ButtonSpacing{get{return buttonChain.Spacing;}set{buttonChain.Spacing=value;}}public Color BorderColor{get{return onBorder.Color;}set{onBorder.Color=value;offBorder.Color=value;bgBorder.Color=value;}}public Vector2 BackgroundPadding{get{return buttonChain.Padding;}set{buttonChain.Padding=value;}}public Color BackgroundColor{get{return _backgroundColor;}set{background.Color=value;_backgroundColor=value;}}public Color FocusColor{get;set;}public Color HighlightColor{get;set;}public Color UnselectedColor{get;set;}public Color SelectionColor{get;set;}public RichText OnText{get{return on.Text;}set{on.Text=value;}}public RichText OffText{get{return off.Text;}set{off.Text=value;}}public GlyphFormat Format{get{return on.Format;}set{on.Format=value;off.Format=value;}}public bool Value{get;set;}public bool UseFocusFormatting{get;set;}public virtual bool HighlightEnabled{get;set;}public IMouseInput MouseInput=>mouseInput;protected readonly LabelBox on,off;protected readonly BorderBox onBorder,offBorder;protected readonly HudChain buttonChain;protected readonly TexturedBox background;protected readonly BorderBox bgBorder;protected readonly MouseInputElement mouseInput;protected Color _backgroundColor;public OnOffButton(HudParentBase parent):base(parent){mouseInput=new MouseInputElement(this);background=new TexturedBox(this){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};bgBorder=new BorderBox(background){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};on=new LabelBox(){AutoResize=false,Size=new Vector2(71f,49f),Format=TerminalFormatting.ControlFormat.WithAlignment(TextAlignment.Center),Text="On"};onBorder=new BorderBox(on){Thickness=2f,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};off=new LabelBox(){AutoResize=false,Size=new Vector2(71f,49f),Format=TerminalFormatting.ControlFormat.WithAlignment(TextAlignment.Center),Text="Off"};offBorder=new BorderBox(off){Thickness=2f,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};buttonChain=new HudChain(false,bgBorder){SizingMode=HudChainSizingModes.FitMembersBoth|HudChainSizingModes.FitChainBoth,Padding=new Vector2(12f,10f),Spacing=9f,CollectionContainer={on,off}};Size=new Vector2(166f,58f);BackgroundColor=TerminalFormatting.Cinder.SetAlphaPct(0.8f);HighlightColor=TerminalFormatting.Atomic;FocusColor=TerminalFormatting.Mint;BorderColor=TerminalFormatting.LimedSpruce;UnselectedColor=TerminalFormatting.OuterSpace;SelectionColor=TerminalFormatting.DullMint;HighlightEnabled=true;UseFocusFormatting=true;mouseInput.LeftClicked+=LeftClick;}public OnOffButton():this(null){}protected virtual void LeftClick(object sender,EventArgs args){Value=!Value;}protected override void Layout(){Vector2 buttonSize=cachedSize-cachedPadding-buttonChain.Padding;buttonSize.X=buttonSize.X*.5f-buttonChain.Spacing;buttonChain.MemberMaxSize=buttonSize;if(Value){on.Color=SelectionColor;off.Color=UnselectedColor;}else{off.Color=SelectionColor;on.Color=UnselectedColor;}}protected override void HandleInput(Vector2 cursorPos){if(mouseInput.HasFocus&&SharedBinds.Space.IsNewPressed){mouseInput.OnLeftClick();}if(HighlightEnabled&&mouseInput.IsMousedOver){background.Color=HighlightColor;}else if(UseFocusFormatting&&mouseInput.HasFocus){background.Color=FocusColor;}else{background.Color=BackgroundColor;}}}}using System;using System.Collections.Generic;using VRage;using VRageMath;namespace RichHudFramework.UI{using Rendering;using System.Collections;public class Dropdown<TValue>:Dropdown<ListBoxEntry<TValue>,Label,TValue>{public Dropdown(HudParentBase parent):base(parent){}public Dropdown():base(null){}}public class Dropdown<TElement,TValue>:Dropdown<ListBoxEntry<TElement,TValue>,TElement,TValue>where TElement:HudElementBase,IMinLabelElement,new(){public Dropdown(HudParentBase parent):base(parent){}public Dropdown():base(null){}}public class Dropdown<TContainer,TElement,TValue>:HudElementBase,IClickableElement,IEntryBox<TContainer,TElement>where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public event EventHandler SelectionChanged{add{listBox.SelectionChanged+=value;}remove{listBox.SelectionChanged-=value;}}public IReadOnlyList<TContainer>EntryList=>listBox.EntryList;public IReadOnlyHudCollection<TContainer,TElement>HudCollection=>listBox.HudCollection;public Dropdown<TContainer,TElement,TValue>ListContainer=>this;public float DropdownHeight{get{return listBox.Height;}set{listBox.Height=value;}}public Vector2 MemberPadding{get{return listBox.MemberPadding;}set{listBox.MemberPadding=value;}}public float LineHeight{get{return listBox.LineHeight;}set{listBox.LineHeight=value;}}public GlyphFormat Format{get{return listBox.Format;}set{listBox.Format=value;display.Format=value;}}public Color Color{get{return listBox.Color;}set{listBox.Color=value;}}public Color BarColor{get{return listBox.BarColor;}set{listBox.BarColor=value;}}public Color BarHighlight{get{return listBox.BarHighlight;}set{listBox.BarHighlight=value;}}public Color SliderColor{get{return listBox.SliderColor;}set{listBox.SliderColor=value;}}public Color SliderHighlight{get{return listBox.SliderHighlight;}set{listBox.SliderHighlight=value;}}public Color HighlightColor{get{return listBox.HighlightColor;}set{listBox.HighlightColor=value;}}public Color TabColor{get{return listBox.TabColor;}set{listBox.TabColor=value;}}public Vector2 HighlightPadding{get{return listBox.HighlightPadding;}set{listBox.HighlightPadding=value;}}public int MinVisibleCount{get{return listBox.MinVisibleCount;}set{listBox.MinVisibleCount=value;}}public TContainer Selection=>listBox.Selection;public int SelectionIndex=>listBox.SelectionIndex;public IMouseInput MouseInput=>display.MouseInput;public override bool IsMousedOver=>display.IsMousedOver||listBox.IsMousedOver;public bool Open=>listBox.Visible;public HudElementBase Display=>display;public readonly ListBox<TContainer,TElement,TValue>listBox;protected readonly DropdownDisplay display;protected bool getDispFocus;public Dropdown(HudParentBase parent):base(parent){display=new DropdownDisplay(this){DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,Text="None"};listBox=new ListBox<TContainer,TElement,TValue>(){Visible=false,CanIgnoreMasking=true,ZOffset=3,DimAlignment=DimAlignments.Width,ParentAlignment=ParentAlignments.Bottom,TabColor=new Color(0,0,0,0),};listBox.Register(display,true);Size=new Vector2(331f,43f);display.MouseInput.LeftClicked+=ClickDisplay;SelectionChanged+=UpdateDisplay;}public Dropdown():this(null){}protected override void HandleInput(Vector2 cursorPos){if(SharedBinds.LeftButton.IsNewPressed&&!(display.IsMousedOver||listBox.IsMousedOver))CloseList();if(getDispFocus){display.MouseInput.GetInputFocus();getDispFocus=false;}}protected virtual void UpdateDisplay(object sender,EventArgs args){if(Selection!=null){var fmt=display.MouseInput.HasFocus?Format.WithColor(listBox.FocusTextColor):Format;display.name.TextBoard.SetText(Selection.Element.TextBoard.ToString(),fmt);CloseList();}}protected virtual void ClickDisplay(object sender,EventArgs args){if(!listBox.Visible){OpenList();}else{CloseList();}}public void OpenList(){if(!listBox.Visible){listBox.Visible=true;listBox.MouseInput.GetInputFocus();}}public void CloseList(){if(listBox.Visible){listBox.Visible=false;getDispFocus=true;}}public TContainer Add(RichText name,TValue assocMember,bool enabled=true)=>listBox.Add(name,assocMember,enabled);public void AddRange(IReadOnlyList<MyTuple<RichText,TValue,bool>>entries)=>listBox.AddRange(entries);public void Insert(int index,RichText name,TValue assocMember,bool enabled=true)=>listBox.Insert(index,name,assocMember,enabled);public void RemoveAt(int index)=>listBox.RemoveAt(index);public bool Remove(TContainer entry)=>listBox.Remove(entry);public void RemoveRange(int index,int count)=>listBox.RemoveRange(index,count);public void ClearEntries()=>listBox.ClearEntries();public void SetSelectionAt(int index)=>listBox.SetSelectionAt(index);public void SetSelection(TValue assocMember)=>listBox.SetSelection(assocMember);public void SetSelection(TContainer member)=>listBox.SetSelection(member);public object GetOrSetMember(object data,int memberEnum)=>listBox.GetOrSetMember(data,memberEnum);public IEnumerator<TContainer>GetEnumerator()=>listBox.EntryList.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();protected class DropdownDisplay:Button{private static readonly Material arrowMat=new Material("RichHudDownArrow",new Vector2(64f,64f));public RichText Text{get{return name.Text;}set{name.Text=value;}}public GlyphFormat Format{get{return name.Format;}set{name.Format=value;}}public Color BorderColor{get{return border.Color;}set{border.Color=value;}}public float BorderThickness{get{return border.Thickness;}set{border.Thickness=value;}}public Color FocusTextColor{get;set;}public Color FocusColor{get;set;}public bool UseFocusFormatting{get;set;}public readonly Label name;public readonly TexturedBox arrow,divider;private readonly HudChain layout;private readonly BorderBox border;private Color lastTextColor;public DropdownDisplay(HudParentBase parent=null):base(parent){border=new BorderBox(this){Thickness=1f,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};name=new Label(){AutoResize=false,Padding=new Vector2(10f,0f)};divider=new TexturedBox(){Padding=new Vector2(4f,17f),Width=2f,Color=new Color(104,113,120),};arrow=new TexturedBox(){Width=38f,MatAlignment=MaterialAlignment.FitVertical,Material=arrowMat,};layout=new HudChain(false,this){SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.FitChainBoth,DimAlignment=DimAlignments.Height|DimAlignments.IgnorePadding,CollectionContainer={name,divider,arrow}};Format=TerminalFormatting.ControlFormat;FocusTextColor=TerminalFormatting.Charcoal;Color=TerminalFormatting.OuterSpace;HighlightColor=TerminalFormatting.Atomic;FocusColor=TerminalFormatting.Mint;BorderColor=TerminalFormatting.LimedSpruce;HighlightEnabled=true;UseFocusFormatting=true;_mouseInput.GainedInputFocus+=GainFocus;_mouseInput.LostInputFocus+=LoseFocus;}protected override void Layout(){base.Layout();name.Width=(Width-Padding.X)-divider.Width-arrow.Width;}protected override void HandleInput(Vector2 cursorPos){if(MouseInput.HasFocus){if(SharedBinds.Space.IsNewPressed){_mouseInput.OnLeftClick();}}else if(!MouseInput.IsMousedOver){lastBackgroundColor=Color;lastTextColor=name.Format.Color;}}protected override void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){if(!(UseFocusFormatting&&MouseInput.HasFocus)){lastBackgroundColor=Color;lastTextColor=name.Format.Color;}Color=HighlightColor;name.TextBoard.SetFormatting(name.Format.WithColor(lastTextColor));divider.Color=lastTextColor.SetAlphaPct(0.8f);arrow.Color=lastTextColor;}}protected override void CursorExit(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&MouseInput.HasFocus){Color=FocusColor;name.TextBoard.SetFormatting(name.Format.WithColor(FocusTextColor));divider.Color=FocusTextColor.SetAlphaPct(0.8f);arrow.Color=FocusTextColor;}else{Color=lastBackgroundColor;name.TextBoard.SetFormatting(name.Format.WithColor(lastTextColor));divider.Color=lastTextColor.SetAlphaPct(0.8f);arrow.Color=lastTextColor;}}}private void GainFocus(object sender,EventArgs args){if(UseFocusFormatting){if(!MouseInput.IsMousedOver){lastBackgroundColor=Color;lastTextColor=name.Format.Color;}Color=FocusColor;name.TextBoard.SetFormatting(name.Format.WithColor(FocusTextColor));divider.Color=FocusTextColor.SetAlphaPct(0.8f);arrow.Color=FocusTextColor;}}private void LoseFocus(object sender,EventArgs args){if(UseFocusFormatting){Color=lastBackgroundColor;name.TextBoard.SetFormatting(name.Format.WithColor(lastTextColor));divider.Color=lastTextColor.SetAlphaPct(0.8f);arrow.Color=lastTextColor;}}}}}using VRageMath;namespace RichHudFramework.UI{public class ListBox<TValue>:ListBox<ListBoxEntry<TValue>,Label,TValue>{public ListBox(HudParentBase parent):base(parent){}public ListBox():base(null){}}public class ListBox<TContainer,TElement,TValue>:ScrollSelectionBox<TContainer,TElement,TValue>,IClickableElement where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public Color BarColor{get{return hudChain.BarColor;}set{hudChain.BarColor=value;}}public Color BarHighlight{get{return hudChain.BarHighlight;}set{hudChain.BarHighlight=value;}}public Color SliderColor{get{return hudChain.SliderColor;}set{hudChain.SliderColor=value;}}public Color SliderHighlight{get{return hudChain.SliderHighlight;}set{hudChain.SliderHighlight=value;}}protected override Vector2I ListRange=>hudChain.ClipRange;protected override Vector2 ListSize{get{Vector2 listSize=hudChain.Size;listSize.X-=hudChain.ScrollBar.Width;return listSize;}}protected override Vector2 ListPos{get{Vector2 listPos=hudChain.Position;listPos.X-=hudChain.ScrollBar.Width;return listPos;}}public ListBox(HudParentBase parent):base(parent){hudChain.MinVisibleCount=5;hudChain.Padding=new Vector2(0f,8f);}public ListBox():this(null){}protected override void Draw(){Size=hudChain.Size+Padding;}}}﻿using RichHudFramework.UI.Rendering;using System;using System.Collections.Generic;using VRageMath;namespace RichHudFramework.UI{public class RadialSelectionBox<TContainer,TElement>:HudCollection<TContainer,TElement>where TContainer:IScrollBoxEntry<TElement>,new()where TElement:HudElementBase{public virtual IReadOnlyList<TContainer>EntryList=>hudCollectionList;public virtual TContainer Selection{get{if(SelectionIndex>=0&&SelectionIndex<hudCollectionList.Count)return hudCollectionList[SelectionIndex];else return default(TContainer);}}public virtual int SelectionIndex{get;protected set;}public virtual int MaxEntryCount{get;set;}public virtual int EnabledCount{get;protected set;}public virtual bool IsInputEnabled{get{return _isInputEnabled;}set{if(_isInputEnabled!=value)isStartPosStale=true;_isInputEnabled=value;}}public virtual Color BackgroundColor{get;set;}public virtual Color HighlightColor{get;set;}public float CursorSensitivity{get;set;}public readonly PuncturedPolyBoard polyBoard;protected int selectionVisPos,effectiveMaxCount,minPolySize;protected bool isStartPosStale;protected Vector2 lastCursorPos,cursorNormal;private float lastDot;private bool _isInputEnabled;public RadialSelectionBox(HudParentBase parent=null):base(parent){polyBoard=new PuncturedPolyBoard(){Color=new Color(255,255,255,128),Sides=64};minPolySize=64;Size=new Vector2(512f);MaxEntryCount=8;CursorSensitivity=.5f;}public void SetSelectionAt(int index){SelectionIndex=MathHelper.Clamp(index,0,hudCollectionList.Count-1);}public void SetSelection(TContainer container){int index=FindIndex(x=>x.Equals(container));if(index!=-1)SelectionIndex=index;}protected override void Layout(){EnabledCount=0;SelectionIndex=MathHelper.Clamp(SelectionIndex,0,hudCollectionList.Count-1);for(int i=0;i<hudCollectionList.Count;i++){if(hudCollectionList[i].Enabled){hudCollectionList[i].Element.Visible=true;EnabledCount++;}else hudCollectionList[i].Element.Visible=false;}effectiveMaxCount=Math.Max(MaxEntryCount,EnabledCount);int entrySize=polyBoard.Sides/effectiveMaxCount;Vector2I slice=new Vector2I(0,entrySize-1);Vector2 size=cachedSize-cachedPadding;for(int i=0;i<hudCollectionList.Count;i++){TContainer container=hudCollectionList[i];TElement element=container.Element;if(container.Enabled){element.Offset=1.05f*polyBoard.GetSliceOffset(size,slice);slice+=entrySize;}}polyBoard.Sides=Math.Max(effectiveMaxCount*6,minPolySize);}protected override void HandleInput(Vector2 cursorPos){if(IsInputEnabled){CursorSensitivity=MathHelper.Clamp(CursorSensitivity,0.3f,2f);if(isStartPosStale){lastDot=0f;cursorNormal=Vector2.Zero;lastCursorPos=cursorPos;isStartPosStale=false;}Vector2 cursorOffset=cursorPos-lastCursorPos;if(cursorOffset.LengthSquared()>64f){float dot=.5f;int newSelection=-1;Vector2 normalizedOffset=CursorSensitivity*0.4f*Vector2.Normalize(cursorOffset);cursorNormal=Vector2.Normalize(cursorNormal+normalizedOffset);for(int i=0;i<hudCollectionList.Count;i++){TContainer container=hudCollectionList[i];TElement element=container.Element;if(container.Enabled){float newDot=Vector2.Dot(element.Offset,cursorNormal);if(newDot>dot&&Math.Abs(lastDot-newDot)>.1f){dot=newDot;lastDot=dot;newSelection=i;}}}lastCursorPos=cursorPos;SelectionIndex=newSelection;}}else{isStartPosStale=true;}}protected void UpdateVisPos(){selectionVisPos=-1;for(int i=0;i<=SelectionIndex;i++){TContainer container=hudCollectionList[i];if(container.Enabled)selectionVisPos++;}}protected override void Draw(){Vector2 size=cachedSize-cachedPadding;int entrySize=polyBoard.Sides/effectiveMaxCount;polyBoard.Color=BackgroundColor;polyBoard.Draw(size,cachedOrigin,HudSpace.PlaneToWorldRef);if(SelectionIndex!=-1&&selectionVisPos!=-1&&entrySize>0){UpdateVisPos();Vector2I slice=new Vector2I(0,entrySize-1)+(selectionVisPos*entrySize);polyBoard.Color=HighlightColor;polyBoard.Draw(size,cachedOrigin,slice,HudSpace.PlaneToWorldRef);}}}public class RadialSelectionBox:RadialSelectionBox<ScrollBoxEntry>{public RadialSelectionBox(HudParentBase parent=null):base(parent){}}public class RadialSelectionBox<TContainer>:RadialSelectionBox<TContainer,HudElementBase>where TContainer:IScrollBoxEntry<HudElementBase>,new(){public RadialSelectionBox(HudParentBase parent=null):base(parent){}}}﻿using System;using System.Collections.Generic;using System.Text;using VRage;using VRageMath;using ApiMemberAccessor=System.Func<object,int,object>;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework.UI{using CollectionData=MyTuple<Func<int,ApiMemberAccessor>,Func<int>>;using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;public class ChainSelectionBox<TContainer,TElement,TValue>:SelectionBox<HudChain<TContainer,TElement>,TContainer,TElement,TValue>where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public ChainSelectionBox(HudParentBase parent):base(parent){}public ChainSelectionBox():base(null){}}public class ScrollSelectionBox<TContainer,TElement,TValue>:SelectionBox<ScrollBox<TContainer,TElement>,TContainer,TElement,TValue>where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public Color Color{get{return hudChain.Color;}set{hudChain.Color=value;}}public virtual bool EnableScrolling{get{return hudChain.EnableScrolling;}set{hudChain.EnableScrolling=value;}}public virtual bool UseSmoothScrolling{get{return hudChain.UseSmoothScrolling;}set{hudChain.UseSmoothScrolling=value;}}public virtual int MinVisibleCount{get{return hudChain.MinVisibleCount;}set{hudChain.MinVisibleCount=value;}}public virtual float MinLength{get{return hudChain.MinLength;}set{hudChain.MinLength=value;}}protected override float HighlightWidth=>hudChain.Size.X-cachedPadding.X-hudChain.ScrollBar.Width-hudChain.Padding.X-HighlightPadding.X;public ScrollSelectionBox(HudParentBase parent):base(parent){}public ScrollSelectionBox():base(null){}protected override void HandleInput(Vector2 cursorPos){base.HandleInput(cursorPos);if(listInput.KeyboardScroll){if(listInput.HighlightIndex>hudChain.End){hudChain.End=listInput.HighlightIndex;}else if(listInput.HighlightIndex<hudChain.Start){hudChain.Start=listInput.HighlightIndex;}}}}public class SelectionBox<TChain,TContainer,TElement,TValue>:SelectionBoxBase<TChain,TContainer,TElement>where TChain:HudChain<TContainer,TElement>,new()where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public Vector2 MemberPadding{get;set;}public virtual Vector2 ListPadding{get{return hudChain.Padding;}set{hudChain.Padding=value;}}public float LineHeight{get{return hudChain.MemberMaxSize.Y;}set{hudChain.MemberMaxSize=new Vector2(hudChain.MemberMaxSize.X,value);}}public readonly BorderBox border;protected readonly ObjectPool<TContainer>entryPool;public SelectionBox(HudParentBase parent):base(parent){entryPool=new ObjectPool<TContainer>(GetNewEntry,ResetEntry);hudChain.SizingMode=HudChainSizingModes.FitMembersBoth|HudChainSizingModes.ClampChainOffAxis;border=new BorderBox(hudChain){DimAlignment=DimAlignments.Both,Color=new Color(58,68,77),Thickness=1f,};LineHeight=28f;MemberPadding=new Vector2(20f,6f);}public SelectionBox():this(null){}public TContainer AddNew(){TContainer entry=entryPool.Get();hudChain.Add(entry);return entry;}public TContainer Add(RichText name,TValue assocMember,bool enabled=true){TContainer entry=entryPool.Get();entry.Element.TextBoard.SetText(name);entry.AssocMember=assocMember;entry.Enabled=enabled;hudChain.Add(entry);return entry;}public void AddRange(IReadOnlyList<MyTuple<RichText,TValue,bool>>entries){for(int n=0;n<entries.Count;n++){TContainer entry=entryPool.Get();entry.Element.TextBoard.SetText(entries[n].Item1);entry.AssocMember=entries[n].Item2;entry.Enabled=entries[n].Item3;hudChain.Add(entry);}}public void Insert(int index,RichText name,TValue assocMember,bool enabled=true){TContainer entry=entryPool.Get();entry.Element.TextBoard.SetText(name);entry.AssocMember=assocMember;entry.Enabled=enabled;hudChain.Insert(index,entry);}public void RemoveAt(int index){TContainer entry=hudChain.Collection[index];hudChain.RemoveAt(index);entryPool.Return(entry);}public bool Remove(TContainer entry){if(hudChain.Remove(entry)){entryPool.Return(entry);return true;}else return false;}public void RemoveRange(int index,int count){entryPool.ReturnRange(hudChain.Collection,index,count-index);hudChain.RemoveRange(index,count);}public void ClearEntries(){ClearSelection();entryPool.ReturnRange(hudChain.Collection);hudChain.Clear();}public void SetSelection(TValue assocMember){int index=hudChain.FindIndex(x=>assocMember.Equals(x.AssocMember));if(index!=-1){listInput.SetSelectionAt(index);}}protected override void Layout(){for(int n=0;n<hudChain.Collection.Count;n++)hudChain.Collection[n].Element.Padding=MemberPadding;}protected virtual TContainer GetNewEntry(){var entry=new TContainer();entry.Element.TextBoard.Format=Format;entry.Element.Padding=MemberPadding;entry.Element.ZOffset=1;entry.Enabled=true;return entry;}protected virtual void ResetEntry(TContainer entry){if(Selection==entry)listInput.ClearSelection();entry.Reset();}public virtual object GetOrSetMember(object data,int memberEnum){var member=(ListBoxAccessors)memberEnum;switch(member){case ListBoxAccessors.ListMembers:return new CollectionData(x=>hudChain.Collection[x].GetOrSetMember,()=>hudChain.Collection.Count);case ListBoxAccessors.Add:{if(data is MyTuple<List<RichStringMembers>,TValue>){var entryData=(MyTuple<List<RichStringMembers>,TValue>)data;return(ApiMemberAccessor)Add(new RichText(entryData.Item1),entryData.Item2).GetOrSetMember;}else{var entryData=(MyTuple<IList<RichStringMembers>,TValue>)data;var stringList=entryData.Item1 as List<RichStringMembers>;return(ApiMemberAccessor)Add(new RichText(stringList),entryData.Item2).GetOrSetMember;}}case ListBoxAccessors.Selection:{if(data==null)return Selection;else SetSelection(data as TContainer);break;}case ListBoxAccessors.SelectionIndex:{if(data==null)return SelectionIndex;else SetSelectionAt((int)data);break;}case ListBoxAccessors.SetSelectionAtData:SetSelection((TValue)data);break;case ListBoxAccessors.Insert:{var entryData=(MyTuple<int,List<RichStringMembers>,TValue>)data;Insert(entryData.Item1,new RichText(entryData.Item2),entryData.Item3);break;}case ListBoxAccessors.Remove:return Remove(data as TContainer);case ListBoxAccessors.RemoveAt:RemoveAt((int)data);break;case ListBoxAccessors.ClearEntries:ClearEntries();break;}return null;}}}﻿using RichHudFramework.UI.Rendering;using System.Collections;using System.Collections.Generic;using VRage;using VRageMath;namespace RichHudFramework.UI{public class ChainSelectionBoxBase<TContainer,TElement>:SelectionBoxBase<HudChain<TContainer,TElement>,TContainer,TElement>where TContainer:class,ISelectionBoxEntry<TElement>,new()where TElement:HudElementBase,IMinLabelElement{public ChainSelectionBoxBase(HudParentBase parent):base(parent){}public ChainSelectionBoxBase():base(null){}}public class ScrollSelectionBoxBase<TContainer,TElement>:SelectionBoxBase<ScrollBox<TContainer,TElement>,TContainer,TElement>where TElement:HudElementBase,IMinLabelElement where TContainer:class,ISelectionBoxEntry<TElement>,new(){public Color Color{get{return hudChain.Color;}set{hudChain.Color=value;}}public virtual bool EnableScrolling{get{return hudChain.EnableScrolling;}set{hudChain.EnableScrolling=value;}}public virtual bool UseSmoothScrolling{get{return hudChain.UseSmoothScrolling;}set{hudChain.UseSmoothScrolling=value;}}public virtual int MinVisibleCount{get{return hudChain.MinVisibleCount;}set{hudChain.MinVisibleCount=value;}}public virtual float MinLength{get{return hudChain.MinLength;}set{hudChain.MinLength=value;}}protected override float HighlightWidth=>hudChain.Size.X-cachedPadding.X-hudChain.ScrollBar.Width-hudChain.Padding.X-HighlightPadding.X;public ScrollSelectionBoxBase(HudParentBase parent):base(parent){}public ScrollSelectionBoxBase():base(null){}protected override void HandleInput(Vector2 cursorPos){base.HandleInput(cursorPos);if(listInput.KeyboardScroll){if(listInput.HighlightIndex>hudChain.End){hudChain.End=listInput.HighlightIndex;}else if(listInput.HighlightIndex<hudChain.Start){hudChain.Start=listInput.HighlightIndex;}}}}public class SelectionBoxBase<TChain,TContainer,TElement>:HudElementBase,IEntryBox<TContainer,TElement>,IClickableElement where TElement:HudElementBase,IMinLabelElement where TChain:HudChain<TContainer,TElement>,new()where TContainer:class,ISelectionBoxEntry<TElement>,new(){public event EventHandler SelectionChanged{add{listInput.SelectionChanged+=value;}remove{listInput.SelectionChanged-=value;}}public SelectionBoxBase<TChain,TContainer,TElement>ListContainer=>this;public IReadOnlyList<TContainer>EntryList=>hudChain.Collection;public IReadOnlyHudCollection<TContainer,TElement>HudCollection=>hudChain;public Color HighlightColor{get;set;}public Color FocusColor{get;set;}public Color TabColor{get{return selectionBox.TabColor;}set{selectionBox.TabColor=value;highlightBox.TabColor=value;}}public Vector2 HighlightPadding{get;set;}public GlyphFormat Format{get;set;}public Color FocusTextColor{get;set;}public TContainer Selection=>listInput.Selection;public int SelectionIndex=>listInput.SelectionIndex;public int Count=>hudChain.Count;public IMouseInput MouseInput=>listInput;public override bool IsMousedOver=>listInput.IsMousedOver;protected virtual Vector2I ListRange=>new Vector2I(0,hudChain.Count-1);protected virtual Vector2 ListSize=>hudChain.Size;protected virtual Vector2 ListPos=>hudChain.Position;public virtual HudChainSizingModes SizingMode{get{return hudChain.SizingMode;}set{hudChain.SizingMode=value;}}protected virtual float HighlightWidth=>hudChain.Size.X-cachedPadding.X-hudChain.Padding.X-HighlightPadding.X;public readonly TChain hudChain;protected readonly HighlightBox selectionBox,highlightBox;protected readonly ListInputElement<TContainer,TElement>listInput;protected readonly bool chainHidesDisabled;protected MyTuple<TContainer,GlyphFormat>lastSelection;public SelectionBoxBase(HudParentBase parent):base(parent){hudChain=new TChain(){AlignVertical=true,SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.ClampMembersAlignAxis|HudChainSizingModes.ClampChainOffAxis,DimAlignment=DimAlignments.Both|DimAlignments.IgnorePadding,};hudChain.Register(this);chainHidesDisabled=hudChain is ScrollBox<TContainer,TElement>;selectionBox=new HighlightBox(){Visible=false};highlightBox=new HighlightBox(){Visible=false,CanDrawTab=false};selectionBox.Register(hudChain,true);highlightBox.Register(hudChain,true);listInput=new ListInputElement<TContainer,TElement>(hudChain);HighlightColor=TerminalFormatting.Atomic;FocusColor=TerminalFormatting.Mint;Format=TerminalFormatting.ControlFormat;FocusTextColor=TerminalFormatting.Charcoal;Size=new Vector2(335f,203f);HighlightPadding=new Vector2(8f,0f);}public SelectionBoxBase():this(null){}public IEnumerator<TContainer>GetEnumerator()=>hudChain.Collection.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();public void SetSelectionAt(int index)=>listInput.SetSelectionAt(index);public void OffsetSelectionIndex(int offset,bool wrap=false)=>listInput.OffsetSelectionIndex(offset,wrap);public void SetSelection(TContainer member)=>listInput.SetSelection(member);public void ClearSelection()=>listInput.ClearSelection();protected override void Layout(){if(!chainHidesDisabled){foreach(TContainer entry in hudChain){entry.Element.Visible=entry.Enabled;}}}protected override void HandleInput(Vector2 cursorPos){highlightBox.Visible=false;selectionBox.Visible=false;if(hudChain.Count>0){UpdateSelection();}listInput.ListSize=ListSize;listInput.ListPos=ListPos;listInput.ListRange=ListRange;}protected virtual void UpdateSelection(){UpdateSelectionPositions();UpdateSelectionFormatting();}protected virtual void UpdateSelectionPositions(){float entryWidth=HighlightWidth;if(Selection!=null&&Selection.Element.Visible){Vector2 offset=Selection.Element.Position-selectionBox.Origin;offset.X-=(ListSize.X-entryWidth-HighlightPadding.X)/2f;selectionBox.Offset=offset;selectionBox.Height=Selection.Element.Height-HighlightPadding.Y;selectionBox.Width=entryWidth;selectionBox.Visible=Selection.Element.Visible&&Selection.AllowHighlighting;}if(listInput.HighlightIndex!=listInput.SelectionIndex){TContainer entry=hudChain[listInput.HighlightIndex];Vector2 offset=entry.Element.Position-highlightBox.Origin;offset.X-=(ListSize.X-entryWidth-HighlightPadding.X)/2f;highlightBox.Visible=(listInput.IsMousedOver||listInput.HasFocus)&&entry.Element.Visible&&entry.AllowHighlighting;highlightBox.Height=entry.Element.Height-HighlightPadding.Y;highlightBox.Width=entryWidth;highlightBox.Offset=offset;}}protected virtual void UpdateSelectionFormatting(){if(lastSelection.Item1!=null){ITextBoard textBoard=lastSelection.Item1.Element.TextBoard;textBoard.SetFormatting(lastSelection.Item2);lastSelection.Item1=null;}if((SelectionIndex==listInput.FocusIndex)&&SelectionIndex!=-1){if((listInput.KeyboardScroll^(SelectionIndex!=listInput.HighlightIndex))||(!MouseInput.IsMousedOver&&SelectionIndex==listInput.HighlightIndex)){if(hudChain[listInput.SelectionIndex].AllowHighlighting){SetFocusFormat(listInput.SelectionIndex);selectionBox.Color=FocusColor;}}else selectionBox.Color=HighlightColor;highlightBox.Color=HighlightColor;}else{if(listInput.KeyboardScroll){if(hudChain[listInput.HighlightIndex].AllowHighlighting){SetFocusFormat(listInput.HighlightIndex);highlightBox.Color=FocusColor;}}else highlightBox.Color=HighlightColor;selectionBox.Color=HighlightColor;}}protected void SetFocusFormat(int index){var selection=hudChain[index];ITextBoard textBoard=selection.Element.TextBoard;lastSelection.Item1=selection;lastSelection.Item2=textBoard.Format;textBoard.SetFormatting(textBoard.Format.WithColor(FocusTextColor));}protected override void Draw(){Size=hudChain.Size+Padding;}protected class HighlightBox:TexturedBox{public bool CanDrawTab{get;set;}public Color TabColor{get{return tabBoard.Color;}set{tabBoard.Color=value;}}private readonly MatBoard tabBoard;public HighlightBox(HudParentBase parent=null):base(parent){tabBoard=new MatBoard(){Color=TerminalFormatting.Mercury};Color=TerminalFormatting.Atomic;CanDrawTab=true;IsSelectivelyMasked=true;}protected override void Draw(){CroppedBox box=default(CroppedBox);Vector2 size=(cachedSize-cachedPadding),halfSize=size*.5f;box.bounds=new BoundingBox2(cachedPosition-halfSize,cachedPosition+halfSize);box.mask=maskingBox;if(hudBoard.Color.A>0)hudBoard.Draw(ref box,HudSpace.PlaneToWorldRef);Vector2 tabPos=cachedPosition,tabSize=new Vector2(4f,size.Y-cachedPadding.Y);tabPos.X+=(-size.X+tabSize.X)*.5f;tabSize*=.5f;if(CanDrawTab&&tabBoard.Color.A>0){box.bounds=new BoundingBox2(tabPos-tabSize,tabPos+tabSize);tabBoard.Draw(ref box,HudSpace.PlaneToWorldRef);}}}}}﻿using System;using System.Collections.Generic;namespace RichHudFramework.UI{public class TreeBox<TContainer,TElement>:TreeBoxBase<TContainer,TElement>where TElement:HudElementBase,IMinLabelElement where TContainer:class,ISelectionBoxEntry<TElement>,new(){public TContainer this[int index]=>selectionBox.hudChain[index];public IReadOnlyList<TContainer>Collection=>selectionBox.hudChain.Collection;public TreeBox(HudParentBase parent):base(parent){}public TreeBox():base(null){}public void Add(TElement element)=>selectionBox.hudChain.Add(element);public void Add(TContainer element)=>selectionBox.hudChain.Add(element);public void AddRange(IReadOnlyList<TContainer>newContainers)=>selectionBox.hudChain.AddRange(newContainers);public void Clear()=>selectionBox.hudChain.Clear();public TContainer Find(Func<TContainer,bool>predicate)=>selectionBox.hudChain.Find(predicate);public int FindIndex(Func<TContainer,bool>predicate)=>selectionBox.hudChain.FindIndex(predicate);public void Insert(int index,TContainer container)=>selectionBox.hudChain.Insert(index,container);public void InsertRange(int index,IReadOnlyList<TContainer>newContainers)=>selectionBox.hudChain.InsertRange(index,newContainers);public bool Remove(TContainer collectionElement)=>selectionBox.hudChain.Remove(collectionElement);public bool Remove(Func<TContainer,bool>predicate)=>selectionBox.hudChain.Remove(predicate);public bool RemoveAt(int index)=>selectionBox.hudChain.RemoveAt(index);public void RemoveRange(int index,int count)=>selectionBox.hudChain.RemoveRange(index,count);}}﻿using System;using System.Collections;using System.Collections.Generic;using VRageMath;namespace RichHudFramework.UI{using Rendering;public class TreeBoxBase<TContainer,TElement>:TreeBoxBase<ChainSelectionBoxBase<TContainer,TElement>,HudChain<TContainer,TElement>,TContainer,TElement>where TContainer:class,ISelectionBoxEntry<TElement>,new()where TElement:HudElementBase,IMinLabelElement{public TreeBoxBase(HudParentBase parent):base(parent){}public TreeBoxBase():base(null){}}public abstract class TreeBoxBase<TSelectionBox,TChain,TContainer,TElement>:LabelElementBase,IEntryBox<TContainer,TElement>,IClickableElement where TElement:HudElementBase,IMinLabelElement where TContainer:class,ISelectionBoxEntry<TElement>,new()where TChain:HudChain<TContainer,TElement>,new()where TSelectionBox:SelectionBoxBase<TChain,TContainer,TElement>,new(){public event EventHandler SelectionChanged{add{selectionBox.SelectionChanged+=value;}remove{selectionBox.SelectionChanged-=value;}}public IReadOnlyList<TContainer>EntryList=>selectionBox.EntryList;public TreeBoxBase<TSelectionBox,TChain,TContainer,TElement>ListContainer=>this;public bool ListOpen{get;protected set;}public override float Height{get{if(!ListOpen)return display.Height+Padding.Y;else return display.Height+selectionBox.Height+Padding.Y;}set{if(Padding.Y<value)value-=Padding.Y;if(!ListOpen){display.Height=value;}}}public RichText Name{get{return display.Name;}set{display.Name=value;}}public override ITextBoard TextBoard=>display.name.TextBoard;public GlyphFormat Format{get{return display.Format;}set{display.Format=value;selectionBox.Format=value;}}public Color FocusTextColor{get{return selectionBox.FocusTextColor;}set{selectionBox.FocusTextColor=value;}}public Color HeaderColor{get{return display.Color;}set{display.Color=value;}}public Color HighlightColor{get{return selectionBox.HighlightColor;}set{selectionBox.HighlightColor=value;}}public Color FocusColor{get{return selectionBox.FocusColor;}set{selectionBox.FocusColor=value;}}public Color TabColor{get{return selectionBox.TabColor;}set{selectionBox.TabColor=value;}}public Vector2 HighlightPadding{get{return selectionBox.HighlightPadding;}set{selectionBox.HighlightPadding=value;}}public TContainer Selection=>selectionBox.Selection;public int Count=>selectionBox.Count;public float IndentSize{get{return _indentSize;}set{_indentSize=value;}}public HudChainSizingModes MemberSizingModes{get{return selectionBox.hudChain.SizingMode;}set{selectionBox.hudChain.SizingMode=value;}}public Vector2 MemberMinSize{get{return selectionBox.hudChain.MemberMinSize;}set{selectionBox.hudChain.MemberMinSize=value;}}public Vector2 MemberMaxSize{get{return selectionBox.hudChain.MemberMinSize;}set{selectionBox.hudChain.MemberMinSize=value;}}public IMouseInput MouseInput=>display.MouseInput;public HudElementBase Display=>display;public readonly TSelectionBox selectionBox;protected readonly TreeBoxDisplay display;protected float _indentSize;public TreeBoxBase(HudParentBase parent):base(parent){display=new TreeBoxDisplay(this){ParentAlignment=ParentAlignments.Top|ParentAlignments.InnerV|ParentAlignments.UsePadding,DimAlignment=DimAlignments.Width|DimAlignments.IgnorePadding};selectionBox=new TSelectionBox(){Visible=false,ParentAlignment=ParentAlignments.Bottom,HighlightPadding=Vector2.Zero};selectionBox.Register(display,true);selectionBox.hudChain.SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.ClampMembersAlignAxis|HudChainSizingModes.ClampChainOffAxis|HudChainSizingModes.FitChainAlignAxis;Size=new Vector2(200f,34f);IndentSize=20f;Format=GlyphFormat.Blueish;display.Name="NewTreeBox";display.MouseInput.LeftClicked+=ToggleList;}public TreeBoxBase():this(null){}public void SetSelection(TContainer member)=>selectionBox.SetSelection(member);public void SetSelectionAt(int index)=>selectionBox.SetSelectionAt(index);public void ClearSelection()=>selectionBox.ClearSelection();protected virtual void ToggleList(object sender,EventArgs args){if(!ListOpen)OpenList();else CloseList();}public void OpenList(){selectionBox.Visible=true;display.Open=true;ListOpen=true;}public void CloseList(){selectionBox.Visible=false;display.Open=false;ListOpen=false;}protected override void Layout(){selectionBox.Visible=ListOpen;if(ListOpen){selectionBox.Width=Width-2f*IndentSize-Padding.X;selectionBox.Offset=new Vector2(IndentSize,0f);}}public IEnumerator<TContainer>GetEnumerator()=>selectionBox.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>selectionBox.GetEnumerator();protected class TreeBoxDisplay:HudElementBase{public RichText Name{get{return name.Text;}set{name.Text=value;}}public GlyphFormat Format{get{return name.Format;}set{name.Format=value;}}public Color Color{get{return background.Color;}set{background.Color=value;}}public IMouseInput MouseInput=>mouseInput;public bool Open{get{return open;}set{open=value;if(open)arrow.Material=downArrow;else arrow.Material=rightArrow;}}private bool open;public readonly Label name;private readonly TexturedBox arrow,divider,background;private readonly HudChain layout;private readonly MouseInputElement mouseInput;private static readonly Material downArrow=new Material("RichHudDownArrow",new Vector2(64f,64f)),rightArrow=new Material("RichHudRightArrow",new Vector2(64f,64f));public TreeBoxDisplay(HudParentBase parent=null):base(parent){background=new TexturedBox(this){Color=TerminalFormatting.EbonyClay,DimAlignment=DimAlignments.Both,};name=new Label(){AutoResize=false,Padding=new Vector2(10f,0f),Format=GlyphFormat.Blueish.WithSize(1.1f),};divider=new TexturedBox(){Padding=new Vector2(2f,6f),Size=new Vector2(2f,39f),Color=new Color(104,113,120),};arrow=new TexturedBox(){Width=20f,Padding=new Vector2(8f,0f),MatAlignment=MaterialAlignment.FitHorizontal,Color=new Color(227,230,233),Material=rightArrow,};layout=new HudChain(false,this){SizingMode=HudChainSizingModes.FitMembersOffAxis|HudChainSizingModes.FitChainBoth,DimAlignment=DimAlignments.Height|DimAlignments.IgnorePadding,CollectionContainer={arrow,divider,name}};mouseInput=new MouseInputElement(this){DimAlignment=DimAlignments.Both};}protected override void Layout(){name.Width=(Width-Padding.X)-divider.Width-arrow.Width;}}}}using System.Collections.Generic;using VRage;namespace RichHudFramework.UI{public class TreeList<TValue>:TreeList<ListBoxEntry<TValue>,Label,TValue>{public TreeList(HudParentBase parent):base(parent){}public TreeList():base(null){}}public class TreeList<TElement,TValue>:TreeList<ListBoxEntry<TElement,TValue>,TElement,TValue>where TElement:HudElementBase,IMinLabelElement,new(){public TreeList(HudParentBase parent):base(parent){}public TreeList():base(null){}}public class TreeList<TContainer,TElement,TValue>:TreeBoxBase<ChainSelectionBox<TContainer,TElement,TValue>,HudChain<TContainer,TElement>,TContainer,TElement>where TContainer:class,IListBoxEntry<TElement,TValue>,new()where TElement:HudElementBase,IMinLabelElement{public override float Height{get{if(!ListOpen)return display.Height+Padding.Y;else return display.Height+selectionBox.Height+Padding.Y;}set{if(Padding.Y<value)value-=Padding.Y;if(!ListOpen){display.Height=value;selectionBox.LineHeight=value;}}}public TreeList(HudParentBase parent):base(parent){selectionBox.border.Visible=false;selectionBox.hudChain.SizingMode=HudChainSizingModes.FitMembersBoth|HudChainSizingModes.ClampChainOffAxis|HudChainSizingModes.FitChainAlignAxis;}public TreeList():this(null){}public TContainer Add(RichText name,TValue assocMember,bool enabled=true)=>selectionBox.Add(name,assocMember,enabled);public void AddRange(IReadOnlyList<MyTuple<RichText,TValue,bool>>entries)=>selectionBox.AddRange(entries);public void Insert(int index,RichText name,TValue assocMember,bool enabled=true)=>selectionBox.Insert(index,name,assocMember,enabled);public void RemoveAt(int index)=>selectionBox.RemoveAt(index);public void RemoveRange(int index,int count)=>selectionBox.RemoveRange(index,count);public void ClearEntries()=>selectionBox.ClearEntries();public void SetSelection(TValue assocMember){int index=selectionBox.hudChain.FindIndex(x=>assocMember.Equals(x.AssocMember));if(index!=-1){selectionBox.SetSelectionAt(index);}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{using UI.Rendering;public class NamedSliderBox:HudElementBase,IClickableElement{public RichText Name{get{return name.TextBoard.GetText();}set{name.TextBoard.SetText(value);}}public RichText ValueText{get{return current.TextBoard.GetText();}set{current.TextBoard.SetText(value);}}public ITextBuilder NameBuilder=>name.TextBoard;public ITextBuilder ValueBuilder=>current.TextBoard;public float Min{get{return sliderBox.Min;}set{sliderBox.Min=value;}}public float Max{get{return sliderBox.Max;}set{sliderBox.Max=value;}}public float Current{get{return sliderBox.Current;}set{sliderBox.Current=value;}}public float Percent{get{return sliderBox.Percent;}set{sliderBox.Percent=value;}}public IMouseInput MouseInput=>sliderBox.MouseInput;public override bool IsMousedOver=>sliderBox.IsMousedOver;protected readonly Label name,current;protected readonly SliderBox sliderBox;public NamedSliderBox(HudParentBase parent):base(parent){sliderBox=new SliderBox(this){DimAlignment=DimAlignments.Width|DimAlignments.IgnorePadding,ParentAlignment=ParentAlignments.Bottom|ParentAlignments.InnerV,UseCursor=true,};name=new Label(this){AutoResize=false,Format=TerminalFormatting.ControlFormat,Text="NewSlideBox",Offset=new Vector2(0f,-18f),ParentAlignment=ParentAlignments.InnerH|ParentAlignments.Top|ParentAlignments.Left|ParentAlignments.UsePadding};current=new Label(this){AutoResize=false,Format=TerminalFormatting.ControlFormat,Text="Value",Offset=new Vector2(0f,-18f),ParentAlignment=ParentAlignments.InnerH|ParentAlignments.Top|ParentAlignments.Right|ParentAlignments.UsePadding};Padding=new Vector2(40f,0f);Size=new Vector2(317f,70f);}public NamedSliderBox():this(null){}protected override void Layout(){Vector2 size=cachedSize-cachedPadding;sliderBox.Height=size.Y-Math.Max(name.Height,current.Height);current.Size=current.Padding+current.TextBoard.TextSize;name.Size=name.Padding+name.TextBoard.TextSize;name.Width=Math.Max(size.X-current.Width-10f,0f);}}}﻿using VRageMath;namespace RichHudFramework.UI{public class ScrollBar:HudElementBase,IClickableElement{public float Min{get{return slide.Min;}set{slide.Min=value;}}public float Max{get{return slide.Max;}set{slide.Max=value;}}public float Current{get{return slide.Current;}set{slide.Current=value;}}public float Percent{get{return slide.Percent;}set{slide.Percent=value;}}public bool Vertical{get{return slide.Vertical;}set{slide.Vertical=value;slide.Reverse=value;}}public override bool IsMousedOver=>slide.IsMousedOver;public IMouseInput MouseInput=>slide.MouseInput;public readonly SliderBar slide;public ScrollBar(HudParentBase parent):base(parent){slide=new SliderBar(this){Reverse=true,Vertical=true,SliderWidth=13f,BarWidth=13f,SliderColor=new Color(78,87,101),SliderHighlight=new Color(136,140,148),BarColor=new Color(41,51,61),};Size=new Vector2(13f,300f);Padding=new Vector2(30f,10f);slide.SliderVisible=false;}public ScrollBar():this(null){}protected override void Layout(){Vector2 size=cachedSize-cachedPadding;slide.BarSize=size;if(Vertical){slide.SliderWidth=size.X;slide.SliderVisible=slide.SliderHeight<slide.BarHeight;}else{slide.SliderHeight=size.Y;slide.SliderVisible=slide.SliderWidth<slide.BarWidth;}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class SliderBar:HudElementBase,IClickableElement{public override float Width{get{if(Vertical)return(Math.Max(_barSize.X,_sliderSize.X)+_padding.X);else return _barSize.X;}set{if(value>_padding.X)value-=_padding.X;if(_barSize.X>=_sliderSize.X){_barSize.X=value;_sliderSize.X=Math.Min(_sliderSize.X,_barSize.X);}else{_sliderSize.X=value;_barSize.X=Math.Min(_sliderSize.X,_barSize.X);}}}public override float Height{get{if(Vertical)return _barSize.Y;else return(Math.Max(_barSize.Y,_sliderSize.Y)+_padding.Y);}set{if(value>_padding.Y)value-=_padding.Y;if(_barSize.Y>=_sliderSize.Y){_barSize.Y=value;_sliderSize.Y=Math.Min(_sliderSize.Y,_barSize.Y);}else{_sliderSize.Y=value;_barSize.Y=Math.Min(_sliderSize.Y,_barSize.Y);}}}public float Min{get{return _min;}set{_min=value;if(_max-_min!=0)Percent=(_current-_min)/(_max-_min);else Percent=0;}}public float Max{get{return _max;}set{_max=value;if(_max-_min!=0)Percent=(_current-_min)/(_max-_min);else Percent=0;}}public float Current{get{return _current;}set{if(_max-_min!=0)Percent=(value-_min)/(_max-_min);else Percent=0;}}public float Percent{get{return _percent;}set{_percent=MathHelper.Clamp(value,0f,1f);_current=_percent*(Max-Min)+Min;UpdateButtonOffset();}}public bool EnableHighlight{get;set;}public Color BarColor{get;set;}public Color BarHighlight{get;set;}public Color SliderColor{get;set;}public Color SliderHighlight{get;set;}public Vector2 BarSize{get{return _barSize;}set{_barSize=value;}}public float BarWidth{get{return _barSize.X;}set{_barSize.X=value;}}public float BarHeight{get{return _barSize.Y;}set{_barSize.Y=value;}}public Vector2 SliderSize{get{return _sliderSize;}set{_sliderSize=value;}}public float SliderWidth{get{return _sliderSize.X;}set{_sliderSize.X=value;}}public float SliderHeight{get{return _sliderSize.Y;}set{_sliderSize.Y=value;}}public bool SliderVisible{get;set;}public bool Vertical{get;set;}public bool Reverse{get;set;}public override bool IsMousedOver=>mouseInput.IsMousedOver;public IMouseInput MouseInput=>mouseInput;protected readonly TexturedBox slider,bar;protected readonly MouseInputElement mouseInput;protected Vector2 _barSize,_sliderSize;protected Vector2 startCursorOffset,lastPos;protected float _min,_max,_current,_percent;protected bool canMoveSlider;public SliderBar(HudParentBase parent):base(parent){bar=new TexturedBox(this);slider=new TexturedBox(bar){UseCursor=true,ShareCursor=true};mouseInput=new MouseInputElement(this){DimAlignment=DimAlignments.Both};_barSize=new Vector2(100f,12f);_sliderSize=new Vector2(6f,12f);SliderVisible=true;bar.Size=_barSize;slider.Size=_sliderSize;SliderColor=new Color(180,180,180,255);BarColor=new Color(140,140,140,255);SliderHighlight=new Color(200,200,200,255);EnableHighlight=true;_min=0f;_max=1f;Current=0f;Percent=0f;}public SliderBar():this(null){}protected override void HandleInput(Vector2 cursorPos){if(!canMoveSlider&&mouseInput.IsNewLeftClicked){canMoveSlider=true;if(slider.IsMousedOver)startCursorOffset=cursorPos-slider.Position;else startCursorOffset=Vector2.Zero;}else if(canMoveSlider&&!SharedBinds.LeftButton.IsPressed){canMoveSlider=false;}}protected override void Layout(){Vector3 fullCurosrPos=HudSpace.CursorPos;Vector2 cursorPos=new Vector2(fullCurosrPos.X,fullCurosrPos.Y);bar.Size=_barSize;slider.Size=_sliderSize;slider.Visible=SliderVisible;if(EnableHighlight&&(IsMousedOver||canMoveSlider)){slider.Color=SliderHighlight;if(BarHighlight!=default(Color))bar.Color=BarHighlight;}else{slider.Color=SliderColor;bar.Color=BarColor;}if(canMoveSlider&&(cursorPos-lastPos).LengthSquared()>4f){float minOffset,maxOffset,pos;lastPos=cursorPos;cursorPos-=startCursorOffset;if(Vertical){minOffset=-((_barSize.Y-_sliderSize.Y)*.5f);maxOffset=-minOffset;pos=MathHelper.Clamp(cursorPos.Y-Origin.Y,minOffset,maxOffset);}else{minOffset=-((_barSize.X-_sliderSize.X)*.5f);maxOffset=-minOffset;pos=MathHelper.Clamp(cursorPos.X-Origin.X,minOffset,maxOffset);}if(Reverse)Percent=1f-((pos-minOffset)/(maxOffset-minOffset));else Percent=(pos-minOffset)/(maxOffset-minOffset);}UpdateButtonOffset();}private void UpdateButtonOffset(){if(Vertical){if(Reverse)slider.Offset=new Vector2(0f,-(Percent-.5f)*(_barSize.Y-_sliderSize.Y));else slider.Offset=new Vector2(0f,(Percent-.5f)*(_barSize.Y-_sliderSize.Y));}else{if(Reverse)slider.Offset=new Vector2(-(Percent-.5f)*(_barSize.X-_sliderSize.X),0f);else slider.Offset=new Vector2((Percent-.5f)*(_barSize.X-_sliderSize.X),0f);}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI{public class SliderBox:HudElementBase,IClickableElement{public float Min{get{return slide.Min;}set{slide.Min=value;}}public float Max{get{return slide.Max;}set{slide.Max=value;}}public float Current{get{return slide.Current;}set{slide.Current=value;}}public float Percent{get{return slide.Percent;}set{slide.Percent=value;}}public override Vector2 Padding{get{return slide.Padding;}set{slide.Padding=value;}}public Color BarColor{get{return slide.BarColor;}set{slide.BarColor=value;}}public Color BarHighlight{get{return slide.BarHighlight;}set{slide.BarHighlight=value;}}public Color BarFocusColor{get;set;}public Color SliderColor{get{return slide.SliderColor;}set{slide.SliderColor=value;}}public Color SliderHighlight{get{return slide.SliderHighlight;}set{slide.SliderHighlight=value;}}public Color SliderFocusColor{get;set;}public Color BackgroundColor{get{return background.Color;}set{background.Color=value;}}public Color BackgroundHighlight{get;set;}public Color BackgroundFocusColor{get;set;}public Color BorderColor{get{return border.Color;}set{border.Color=value;}}public bool HighlightEnabled{get;set;}public bool UseFocusFormatting{get;set;}public IMouseInput MouseInput=>slide.MouseInput;public override bool IsMousedOver=>slide.IsMousedOver;protected readonly TexturedBox background;protected readonly BorderBox border;protected readonly SliderBar slide;protected Color lastBarColor,lastSliderColor,lastBackgroundColor;public SliderBox(HudParentBase parent):base(parent){background=new TexturedBox(this){DimAlignment=DimAlignments.Both};border=new BorderBox(background){Thickness=1f,DimAlignment=DimAlignments.Both,};slide=new SliderBar(this){DimAlignment=DimAlignments.Both,SliderSize=new Vector2(14f,28f),BarHeight=5f};BackgroundColor=TerminalFormatting.OuterSpace;BorderColor=TerminalFormatting.LimedSpruce;BackgroundHighlight=TerminalFormatting.Atomic;BackgroundFocusColor=TerminalFormatting.Mint;SliderColor=TerminalFormatting.MistBlue;SliderHighlight=Color.White;SliderFocusColor=TerminalFormatting.Cinder;BarColor=TerminalFormatting.MidGrey;BarHighlight=Color.White;BarFocusColor=TerminalFormatting.BlackPerl;UseFocusFormatting=true;HighlightEnabled=true;Padding=new Vector2(18f,18f);Size=new Vector2(317f,47f);slide.MouseInput.CursorEntered+=CursorEnter;slide.MouseInput.CursorExited+=CursorExit;slide.MouseInput.GainedInputFocus+=GainFocus;slide.MouseInput.LostInputFocus+=LoseFocus;}public SliderBox():this(null){}protected override void HandleInput(Vector2 cursorPos){if(MouseInput.HasFocus){if(SharedBinds.LeftArrow.IsNewPressed||SharedBinds.LeftArrow.IsPressedAndHeld){Percent-=0.01f;}else if(SharedBinds.RightArrow.IsNewPressed||SharedBinds.RightArrow.IsPressedAndHeld){Percent+=0.01f;}}}protected virtual void CursorEnter(object sender,EventArgs args){if(HighlightEnabled){if(!(UseFocusFormatting&&slide.MouseInput.HasFocus)){lastBarColor=BarColor;lastSliderColor=SliderColor;lastBackgroundColor=BackgroundColor;}SliderColor=SliderHighlight;BarColor=BarHighlight;BackgroundColor=BackgroundHighlight;}}protected virtual void CursorExit(object sender,EventArgs args){if(HighlightEnabled){if(UseFocusFormatting&&slide.MouseInput.HasFocus){SliderColor=SliderFocusColor;BarColor=BarFocusColor;BackgroundColor=BackgroundFocusColor;}else{SliderColor=lastSliderColor;BarColor=lastBarColor;BackgroundColor=lastBackgroundColor;}}}protected virtual void GainFocus(object sender,EventArgs args){if(UseFocusFormatting&&!MouseInput.IsMousedOver){lastBarColor=BarColor;lastSliderColor=SliderColor;lastBackgroundColor=BackgroundColor;SliderColor=SliderFocusColor;BarColor=BarFocusColor;BackgroundColor=BackgroundFocusColor;}}protected virtual void LoseFocus(object sender,EventArgs args){if(UseFocusFormatting){SliderColor=lastSliderColor;BarColor=lastBarColor;BackgroundColor=lastBackgroundColor;}}}}﻿namespace RichHudFramework.UI{public interface IHudElementContainer<TElement>where TElement:HudNodeBase{TElement Element{get;}void SetElement(TElement Element);}}﻿namespace RichHudFramework.UI{public interface IListBoxEntry<TElement,TValue>:ISelectionBoxEntryTuple<TElement,TValue>where TElement:HudElementBase,IMinLabelElement{object GetOrSetMember(object data,int memberEnum);}}﻿namespace RichHudFramework.UI{public interface IScrollBoxEntry<TElement>:IHudElementContainer<TElement>where TElement:HudElementBase{bool Enabled{get;set;}}public interface IScrollBoxEntryTuple<TElement,TData>:IScrollBoxEntry<TElement>where TElement:HudElementBase{TData AssocMember{get;set;}}}﻿namespace RichHudFramework.UI{public interface ISelectionBoxEntry<TElement>:IScrollBoxEntry<TElement>where TElement:HudElementBase{bool AllowHighlighting{get;set;}void Reset();}public interface ISelectionBoxEntryTuple<TElement,TValue>:ISelectionBoxEntry<TElement>,IScrollBoxEntryTuple<TElement,TValue>where TElement:HudElementBase{}}﻿namespace RichHudFramework.UI{public class HudElementContainer<TElement>:IHudElementContainer<TElement>where TElement:HudNodeBase{public virtual TElement Element{get;private set;}public HudElementContainer(){}public virtual void SetElement(TElement element){if(Element==null)Element=element;else throw new System.Exception("Only one element can ever be associated with a container object.");}}public class HudElementContainer:HudElementContainer<HudElementBase>{}}﻿namespace RichHudFramework.UI{public class HudElementTuple<TElement,TData>:HudElementContainer<TElement>where TElement:HudElementBase{public virtual TData AssocData{get;set;}public HudElementTuple(){}}public class HudElementTuple<TData>:HudElementTuple<HudElementBase,TData>{}}﻿using System.Collections.Generic;using System.Text;using VRage;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework.UI{using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;public class ListBoxEntry<TValue>:ListBoxEntry<Label,TValue>{}public class ListBoxEntry<TElement,TValue>:SelectionBoxEntryTuple<TElement,TValue>,IListBoxEntry<TElement,TValue>where TElement:HudElementBase,IMinLabelElement,new(){public ListBoxEntry(){SetElement(new TElement());Element.TextBoard.AutoResize=false;}public override void Reset(){Enabled=true;AllowHighlighting=true;AssocMember=default(TValue);Element.TextBoard.Clear();}public object GetOrSetMember(object data,int memberEnum){var member=(ListBoxEntryAccessors)memberEnum;switch(member){case ListBoxEntryAccessors.Name:{if(data!=null)Element.TextBoard.SetText(data as List<RichStringMembers>);else return Element.TextBoard.GetText().apiData;break;}case ListBoxEntryAccessors.Enabled:{if(data!=null)Enabled=(bool)data;else return Enabled;break;}case ListBoxEntryAccessors.AssocObject:{if(data!=null)AssocMember=(TValue)data;else return AssocMember;break;}case ListBoxEntryAccessors.ID:return this;}return null;}}}﻿namespace RichHudFramework.UI{public class ScrollBoxEntry<TElement>:HudElementContainer<TElement>,IScrollBoxEntry<TElement>where TElement:HudElementBase{public virtual bool Enabled{get;set;}public ScrollBoxEntry(){Enabled=true;}}public class ScrollBoxEntry:ScrollBoxEntry<HudElementBase>{}}﻿namespace RichHudFramework.UI{public class ScrollBoxEntryTuple<TElement,TData>:ScrollBoxEntry<TElement>,IScrollBoxEntryTuple<TElement,TData>where TElement:HudElementBase{public virtual TData AssocMember{get;set;}public ScrollBoxEntryTuple(){}}public class ScrollBoxEntryTuple<TData>:ScrollBoxEntryTuple<HudElementBase,TData>{}}﻿namespace RichHudFramework.UI{public class SelectionBoxEntry<TElement>:HudElementContainer<TElement>,ISelectionBoxEntry<TElement>where TElement:HudElementBase{public virtual bool Enabled{get;set;}public virtual bool AllowHighlighting{get;set;}public SelectionBoxEntry(){Enabled=true;AllowHighlighting=true;}public virtual void Reset(){Enabled=true;AllowHighlighting=true;}}public class SelectionBoxEntryTuple<TElement,TValue>:SelectionBoxEntry<TElement>,ISelectionBoxEntryTuple<TElement,TValue>where TElement:HudElementBase{public TValue AssocMember{get;set;}public override void Reset(){Enabled=true;AllowHighlighting=true;AssocMember=default(TValue);}}}﻿using Sandbox.ModAPI;using VRageMath;namespace RichHudFramework{namespace UI{using Client;public class CamSpaceNode:HudSpaceNodeBase{public float PlaneScale{get;set;}public Vector3 RotationAxis{get;set;}public float RotationAngle{get;set;}public Vector3D TransformOffset{get;set;}public bool IsScreenSpace{get;set;}public bool UseResScaling{get;set;}public CamSpaceNode(HudParentBase parent=null):base(parent){PlaneScale=1f;TransformOffset=new Vector3D(0d,0d,-MyAPIGateway.Session.Camera.NearPlaneDistance);IsScreenSpace=true;UseResScaling=true;}protected override void Layout(){double scale=PlaneScale;if(IsScreenSpace){scale*=HudMain.FovScale/HudMain.ScreenHeight;if(UseResScaling)scale*=HudMain.ResScale;}var scaling=MatrixD.CreateScale(scale,scale,1d);var rotation=MatrixD.CreateFromQuaternion(Quaternion.CreateFromAxisAngle(RotationAxis,RotationAngle));var translation=MatrixD.CreateTranslation(TransformOffset);PlaneToWorldRef[0]=(scaling*rotation*translation)*MyAPIGateway.Session.Camera.WorldMatrix;base.Layout();}}}}﻿using System;using VRageMath;namespace RichHudFramework{namespace UI{public class CustomSpaceNode:HudSpaceNodeBase{public Func<MatrixD>UpdateMatrixFunc{get;set;}public CustomSpaceNode(HudParentBase parent=null):base(parent){}protected override void Layout(){if(UpdateMatrixFunc!=null)PlaneToWorldRef[0]=UpdateMatrixFunc();else if(Parent?.HudSpace!=null)PlaneToWorldRef[0]=Parent.HudSpace.PlaneToWorldRef[0];base.Layout();}}}}﻿using System;using VRageMath;namespace RichHudFramework{namespace UI{public class ScaledSpaceNode:HudSpaceNodeBase{public float PlaneScale{get;set;}public Func<float>UpdateScaleFunc{get;set;}public ScaledSpaceNode(HudParentBase parent=null):base(parent){}protected override void Layout(){if(UpdateScaleFunc!=null)PlaneScale=UpdateScaleFunc();IReadOnlyHudSpaceNode parentSpace=_parent.HudSpace;PlaneToWorldRef[0]=MatrixD.CreateScale(PlaneScale,PlaneScale,1d)*parentSpace.PlaneToWorldRef[0];IsInFront=parentSpace.IsInFront;IsFacingCamera=parentSpace.IsFacingCamera;CursorPos=parentSpace.CursorPos/PlaneScale;}}}}﻿using System.Collections.Generic;using VRage.Utils;using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public struct TriMaterial{public static readonly TriMaterial Default=new TriMaterial(){textureID=Material.Default.TextureID,bbColor=Vector4.One,texCoords=new Triangle(new Vector2(0f,0f),new Vector2(0f,1f),new Vector2(1f,0f))};public MyStringId textureID;public Vector4 bbColor;public Triangle texCoords;}public struct QuadMaterial{public static readonly QuadMaterial Default=new QuadMaterial(){textureID=Material.Default.TextureID,bbColor=Vector4.One,texCoords=new FlatQuad(new Vector2(0f,0f),new Vector2(0f,1f),new Vector2(1f,0f),new Vector2(1f,1f))};public MyStringId textureID;public Vector4 bbColor;public FlatQuad texCoords;}public struct BoundedQuadMaterial{public static readonly BoundedQuadMaterial Default=new BoundedQuadMaterial(){textureID=Material.Default.TextureID,bbColor=Vector4.One,texBounds=new BoundingBox2(Vector2.Zero,Vector2.One)};public MyStringId textureID;public Vector4 bbColor;public BoundingBox2 texBounds;}public struct PolyMaterial{public static readonly PolyMaterial Default=new PolyMaterial(){textureID=Material.Default.TextureID,bbColor=Vector4.One,texCoords=null};public MyStringId textureID;public Vector4 bbColor;public BoundingBox2 texBounds;public List<Vector2>texCoords;}public struct FlatQuad{public Vector2 Point0,Point1,Point2,Point3;public FlatQuad(Vector2 Point0,Vector2 Point1,Vector2 Point2,Vector2 Point3){this.Point0=Point0;this.Point1=Point1;this.Point2=Point2;this.Point3=Point3;}}public struct Triangle{public Vector2 Point0,Point1,Point2;public Triangle(Vector2 Point0,Vector2 Point1,Vector2 Point2){this.Point0=Point0;this.Point1=Point1;this.Point2=Point2;}}public struct TriangleD{public Vector3D Point0,Point1,Point2;public TriangleD(Vector3D Point0,Vector3D Point1,Vector3D Point2){this.Point0=Point0;this.Point1=Point1;this.Point2=Point2;}}}}}﻿using System;using System.Collections.Generic;using VRage;using VRage.Game;using VRage.Utils;using VRageMath;using VRageRender;using BlendTypeEnum=VRageRender.MyBillboard.BlendTypeEnum;namespace RichHudFramework{namespace UI{using FlatTriangleBillboardData=MyTuple<BlendTypeEnum,Vector2I,MyStringId,MyTuple<Vector4,BoundingBox2?>,MyTuple<Vector2,Vector2,Vector2>,MyTuple<Vector2,Vector2,Vector2>>;using TriangleBillboardData=MyTuple<BlendTypeEnum,Vector2I,MyStringId,Vector4,MyTuple<Vector2,Vector2,Vector2>,MyTuple<Vector3D,Vector3D,Vector3D>>;namespace Rendering{public enum BillBoardUtilAccessors:int{GetPoolBack=1}public sealed partial class BillBoardUtils{public static void AddTriangles(IReadOnlyList<int>indices,IReadOnlyList<Vector3D>vertices,ref PolyMaterial mat,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int triangleCount=indices.Count/3,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=0;i<indices.Count;i+=3){var bb=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords[indices[i]],mat.texCoords[indices[i+1]],mat.texCoords[indices[i+2]]),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(vertices[indices[i]],vertices[indices[i+1]],vertices[indices[i+2]]),};bbDataBack.Add(bb);}}public static void AddTriangleRange(Vector2I range,IReadOnlyList<int>indices,IReadOnlyList<Vector3D>vertices,ref PolyMaterial mat,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int iMax=indices.Count,triangleCount=(range.Y-range.X)/3,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=range.X;i<=range.Y;i+=3){var bb=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords[indices[i%iMax]],mat.texCoords[indices[(i+1)%iMax]],mat.texCoords[indices[(i+2)%iMax]]),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(vertices[indices[i%iMax]],vertices[indices[(i+1)%iMax]],vertices[indices[(i+2)%iMax]]),};bbDataBack.Add(bb);}}public static void AddTriangles(IReadOnlyList<int>indices,IReadOnlyList<Vector3D>vertices,ref TriMaterial mat,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int triangleCount=indices.Count/3,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=0;i<indices.Count;i+=3){var bb=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords.Point0,mat.texCoords.Point1,mat.texCoords.Point2),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(vertices[indices[i]],vertices[indices[i+1]],vertices[indices[i+2]]),};bbDataBack.Add(bb);}}public static void AddQuads(IReadOnlyList<QuadBoardData>quads,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int triangleCount=quads.Count*2,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=0;i<quads.Count;i++){QuadBoardData quadBoard=quads[i];MyQuadD quad=quadBoard.positions;BoundedQuadMaterial mat=quadBoard.material;var bbL=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texBounds.Min,mat.texBounds.Min+new Vector2(0f,mat.texBounds.Size.Y),mat.texBounds.Max),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point1,quad.Point2),};var bbR=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count+1,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texBounds.Min,mat.texBounds.Max,mat.texBounds.Min+new Vector2(mat.texBounds.Size.X,0f)),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point2,quad.Point3),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);}}public static void AddTriangle(int start,IReadOnlyList<int>indices,IReadOnlyList<Vector3D>vertices,ref TriMaterial mat,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;int index=bbDataBack.Count;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}var bb=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(index,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords.Point0,mat.texCoords.Point1,mat.texCoords.Point2),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(vertices[indices[start]],vertices[indices[start+1]],vertices[indices[start+2]]),};bbDataBack.Add(bb);if(index>=bbPool.Count)instance.AddNewBB(index-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[index],false);}public static void AddTriangle(ref TriMaterial mat,ref TriangleD triangle,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;int index=bbDataBack.Count;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}var bb=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(index,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords.Point0,mat.texCoords.Point1,mat.texCoords.Point2),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(triangle.Point0,triangle.Point1,triangle.Point2),};bbDataBack.Add(bb);if(index>=bbPool.Count)instance.AddNewBB(index-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[index],false);}public static void AddQuad(ref QuadMaterial mat,ref MyQuadD quad,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;int indexL=bbDataBack.Count,indexR=bbDataBack.Count+1;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}var bbL=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(indexL,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords.Point0,mat.texCoords.Point1,mat.texCoords.Point2),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point1,quad.Point2),};var bbR=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(indexR,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords.Point0,mat.texCoords.Point2,mat.texCoords.Point3),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point2,quad.Point3),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);if(indexR>=bbPool.Count)instance.AddNewBB(indexR-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[indexL],false);MyTransparentGeometry.AddBillboard(bbPool[indexR],false);}public static void AddQuad(ref BoundedQuadMaterial mat,ref MyQuadD quad,MatrixD[]matrixRef=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.triangleList;int indexL=bbDataBack.Count,indexR=bbDataBack.Count+1;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID=-1;if(matrixRef!=null&&!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}var bbL=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(indexL,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texBounds.Min,mat.texBounds.Min+new Vector2(0f,mat.texBounds.Size.Y),mat.texBounds.Max),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point1,quad.Point2),};var bbR=new TriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(indexR,matrixID),Item3=mat.textureID,Item4=mat.bbColor,Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texBounds.Min,mat.texBounds.Max,mat.texBounds.Min+new Vector2(mat.texBounds.Size.X,0f)),Item6=new MyTuple<Vector3D,Vector3D,Vector3D>(quad.Point0,quad.Point2,quad.Point3),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);if(indexR>=bbPool.Count)instance.AddNewBB(indexR-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[indexL],false);MyTransparentGeometry.AddBillboard(bbPool[indexR],false);}public static void AddTriangles(IReadOnlyList<int>indices,IReadOnlyList<Vector2>vertices,ref PolyMaterial mat,MatrixD[]matrixRef){var bbPool=instance.bbPoolBack;var bbDataBack=instance.flatTriangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID;if(!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int triangleCount=indices.Count/3,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=0;i<indices.Count;i+=3){var bb=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,null),Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords[indices[i]],mat.texCoords[indices[i+1]],mat.texCoords[indices[i+2]]),Item6=new MyTuple<Vector2,Vector2,Vector2>(vertices[indices[i]],vertices[indices[i+1]],vertices[indices[i+2]]),};bbDataBack.Add(bb);}}public static void AddTriangleRange(Vector2I range,IReadOnlyList<int>indices,IReadOnlyList<Vector2>vertices,ref PolyMaterial mat,MatrixD[]matrixRef){var bbPool=instance.bbPoolBack;var bbDataBack=instance.flatTriangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID;if(!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int iMax=indices.Count,triangleCount=(range.Y-range.X)/3,bbRemaining=bbPool.Count-bbDataBack.Count,bbToAdd=Math.Max(triangleCount-bbRemaining,0);instance.AddNewBB(bbToAdd);for(int i=bbDataBack.Count;i<triangleCount+bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=range.X;i<=range.Y;i+=3){var bb=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,null),Item5=new MyTuple<Vector2,Vector2,Vector2>(mat.texCoords[indices[i%iMax]],mat.texCoords[indices[(i+1)%iMax]],mat.texCoords[indices[(i+2)%iMax]]),Item6=new MyTuple<Vector2,Vector2,Vector2>(vertices[indices[i%iMax]],vertices[indices[(i+1)%iMax]],vertices[indices[(i+2)%iMax]]),};bbDataBack.Add(bb);}}public static void AddQuads(IReadOnlyList<BoundedQuadBoard>quads,MatrixD[]matrixRef,BoundingBox2?mask=null,Vector2 offset=default(Vector2),float scale=1f){var bbPool=instance.bbPoolBack;var bbDataBack=instance.flatTriangleList;var bbBuf=instance.bbBuf;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID;if(!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}int triangleCount=quads.Count*2,bbCountStart=bbDataBack.Count;bbDataBack.EnsureCapacity(bbDataBack.Count+triangleCount);for(int i=0;i<quads.Count;i++){BoundedQuadBoard boundedQB=quads[i];BoundedQuadMaterial mat=boundedQB.quadBoard.materialData;Vector2 size=boundedQB.bounds.Size*scale,center=offset+boundedQB.bounds.Center*scale;BoundingBox2 bounds=BoundingBox2.CreateFromHalfExtent(center,.5f*size);BoundingBox2?maskBox=mask;ContainmentType containment=ContainmentType.Contains;if(maskBox!=null){maskBox.Value.Contains(ref bounds,out containment);if(containment==ContainmentType.Contains)maskBox=null;}if(containment!=ContainmentType.Disjoint){var bbL=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),mat.texBounds.Max,new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y)),Item6=new MyTuple<Vector2,Vector2,Vector2>(bounds.Max,new Vector2(bounds.Max.X,bounds.Min.Y),bounds.Min),};var bbR=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count+1,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y),mat.texBounds.Min),Item6=new MyTuple<Vector2,Vector2,Vector2>(bounds.Max,bounds.Min,new Vector2(bounds.Min.X,bounds.Max.Y)),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);}}int bbToAdd=Math.Max(bbDataBack.Count-bbPool.Count,0);instance.AddNewBB(bbToAdd);for(int i=bbCountStart;i<bbDataBack.Count;i++)bbBuf.Add(bbPool[i]);MyTransparentGeometry.AddBillboards(bbBuf,false);bbBuf.Clear();}public static void AddQuad(ref BoundedQuadBoard boundedQB,MatrixD[]matrixRef,BoundingBox2?mask=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.flatTriangleList;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID;if(!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}BoundingBox2?maskBox=mask;ContainmentType containment=ContainmentType.Contains;if(maskBox!=null){maskBox.Value.Contains(ref boundedQB.bounds,out containment);if(containment==ContainmentType.Contains)maskBox=null;}if(containment!=ContainmentType.Disjoint){int indexL=bbDataBack.Count,indexR=bbDataBack.Count+1;BoundedQuadMaterial mat=boundedQB.quadBoard.materialData;var bbL=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),mat.texBounds.Max,new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y)),Item6=new MyTuple<Vector2,Vector2,Vector2>(boundedQB.bounds.Max,new Vector2(boundedQB.bounds.Max.X,boundedQB.bounds.Min.Y),boundedQB.bounds.Min),};var bbR=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count+1,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y),mat.texBounds.Min),Item6=new MyTuple<Vector2,Vector2,Vector2>(boundedQB.bounds.Max,boundedQB.bounds.Min,new Vector2(boundedQB.bounds.Min.X,boundedQB.bounds.Max.Y)),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);if(indexR>=bbPool.Count)instance.AddNewBB(indexR-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[indexL],false);MyTransparentGeometry.AddBillboard(bbPool[indexR],false);}}public static void AddQuad(ref FlatQuad quad,ref BoundedQuadMaterial mat,MatrixD[]matrixRef,BoundingBox2?mask=null){var bbPool=instance.bbPoolBack;var bbDataBack=instance.flatTriangleList;var matList=instance.matrixBuf;var matTable=instance.matrixTable;int matrixID;if(!matTable.TryGetValue(matrixRef,out matrixID)){matrixID=matList.Count;matList.Add(matrixRef[0]);matTable.Add(matrixRef,matrixID);}BoundingBox2?maskBox=mask;ContainmentType containment=ContainmentType.Contains;if(maskBox!=null){BoundingBox2 bounds=new BoundingBox2(quad.Point2,quad.Point0);maskBox.Value.Contains(ref bounds,out containment);if(containment==ContainmentType.Contains)maskBox=null;}if(containment!=ContainmentType.Disjoint){int indexL=bbDataBack.Count,indexR=bbDataBack.Count+1;var bbL=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),mat.texBounds.Max,new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y)),Item6=new MyTuple<Vector2,Vector2,Vector2>(quad.Point0,quad.Point1,quad.Point2),};var bbR=new FlatTriangleBillboardData{Item1=BlendTypeEnum.PostPP,Item2=new Vector2I(bbDataBack.Count+1,matrixID),Item3=mat.textureID,Item4=new MyTuple<Vector4,BoundingBox2?>(mat.bbColor,maskBox),Item5=new MyTuple<Vector2,Vector2,Vector2>(new Vector2(mat.texBounds.Max.X,mat.texBounds.Min.Y),new Vector2(mat.texBounds.Min.X,mat.texBounds.Max.Y),mat.texBounds.Min),Item6=new MyTuple<Vector2,Vector2,Vector2>(quad.Point0,quad.Point2,quad.Point3),};bbDataBack.Add(bbL);bbDataBack.Add(bbR);if(indexR>=bbPool.Count)instance.AddNewBB(indexR-(bbPool.Count-1));MyTransparentGeometry.AddBillboard(bbPool[indexL],false);MyTransparentGeometry.AddBillboard(bbPool[indexR],false);}}private void AddNewBB(int count){bbPoolBack.EnsureCapacity(bbPoolBack.Count+count);for(int i=0;i<count;i++){bbPoolBack.Add(new MyTriangleBillboard{BlendType=BlendTypeEnum.PostPP,Position0=Vector3D.Zero,Position1=Vector3D.Zero,Position2=Vector3D.Zero,UV0=Vector2.Zero,UV1=Vector2.Zero,UV2=Vector2.Zero,Material=Material.Default.TextureID,Color=Vector4.One,DistanceSquared=float.PositiveInfinity,ColorIntensity=1f,CustomViewProjection=-1});}}public static Vector4 GetBillBoardBoardColor(Color color){float opacity=color.A/255f;color.R=(byte)(color.R*opacity);color.G=(byte)(color.G*opacity);color.B=(byte)(color.B*opacity);return((Vector4)color).ToLinearRGB();}}}}}﻿using System.Collections.Generic;using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public class BlockBoard{public Vector3D Size{get;set;}public Vector3D Offset{get;set;}public MatBoard Front=>faces[0];public MatBoard Back=>faces[1];public MatBoard Top=>faces[2];public MatBoard Bottom=>faces[3];public MatBoard Left=>faces[4];public MatBoard Right=>faces[5];public IReadOnlyList<MatBoard>Faces=>faces;private readonly MatBoard[]faces;private readonly Vector3D[]octant;public BlockBoard(){faces=new MatBoard[6];octant=new Vector3D[8];for(int n=0;n<6;n++)faces[n]=new MatBoard();}public void SetColor(Color color){for(int n=0;n<6;n++)faces[n].Color=color;}public void SetMaterial(Material material){for(int n=0;n<6;n++)faces[n].Material=material;}public void SetMaterialAlignment(MaterialAlignment materialAlignment){for(int n=0;n<6;n++)faces[n].MatAlignment=materialAlignment;}public void Draw(ref MatrixD matrix){MyQuadD faceQuad;UpdateOctant(ref matrix);faceQuad.Point0=octant[3];faceQuad.Point1=octant[2];faceQuad.Point2=octant[1];faceQuad.Point3=octant[0];faces[0].Draw(ref faceQuad);faceQuad.Point0=octant[4];faceQuad.Point1=octant[5];faceQuad.Point2=octant[6];faceQuad.Point3=octant[7];faces[1].Draw(ref faceQuad);faceQuad.Point0=octant[7];faceQuad.Point1=octant[6];faceQuad.Point2=octant[2];faceQuad.Point3=octant[3];faces[2].Draw(ref faceQuad);faceQuad.Point0=octant[0];faceQuad.Point1=octant[1];faceQuad.Point2=octant[5];faceQuad.Point3=octant[4];faces[3].Draw(ref faceQuad);faceQuad.Point0=octant[0];faceQuad.Point1=octant[4];faceQuad.Point2=octant[7];faceQuad.Point3=octant[3];faces[4].Draw(ref faceQuad);faceQuad.Point0=octant[5];faceQuad.Point1=octant[1];faceQuad.Point2=octant[2];faceQuad.Point3=octant[6];faces[5].Draw(ref faceQuad);}private void UpdateOctant(ref MatrixD matrix){Vector3D size=Size*0.5d;octant[0]=new Vector3D(-size.X,size.Y,-size.Z);octant[1]=new Vector3D(size.X,size.Y,-size.Z);octant[2]=new Vector3D(size.X,-size.Y,-size.Z);octant[3]=new Vector3D(-size.X,-size.Y,-size.Z);octant[4]=new Vector3D(-size.X,size.Y,size.Z);octant[5]=new Vector3D(size.X,size.Y,size.Z);octant[6]=new Vector3D(size.X,-size.Y,size.Z);octant[7]=new Vector3D(-size.X,-size.Y,size.Z);for(int n=0;n<8;n++)octant[n]=Vector3D.Transform(octant[n],ref matrix)+Offset;}}}}}﻿using System;using VRageMath;namespace RichHudFramework.UI.Rendering{[Flags]public enum FontStyles:int{Regular=0,Bold=1,Italic=2,BoldItalic=3,Underline=4}public interface IFontMin{string Name{get;}int Index{get;}float PtSize{get;}float BaseScale{get;}Vector2I Regular{get;}Vector2I Bold{get;}Vector2I Italic{get;}Vector2I BoldItalic{get;}bool IsStyleDefined(FontStyles styleEnum);bool IsStyleDefined(int style);Vector2I GetStyleIndex(int style);Vector2I GetStyleIndex(FontStyles style);}}﻿using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public class MatBoard{public Color Color{get{return color;}set{if(value!=color)minBoard.materialData.bbColor=BillBoardUtils.GetBillBoardBoardColor(value);color=value;}}public Material Material{get{return matFrame.Material;}set{if(value!=matFrame.Material){updateMatFit=true;matFrame.Material=value;minBoard.materialData.textureID=value.TextureID;}}}public MaterialAlignment MatAlignment{get{return matFrame.Alignment;}set{if(value!=matFrame.Alignment){updateMatFit=true;matFrame.Alignment=value;}}}private Color color;private bool updateMatFit;private QuadBoard minBoard;private readonly MaterialFrame matFrame;public MatBoard(){matFrame=new MaterialFrame();minBoard=QuadBoard.Default;color=Color.White;updateMatFit=true;}public void Draw(ref MyQuadD quad){minBoard.Draw(ref quad);}public void Draw(ref CroppedBox box,MatrixD[]matrixRef){ContainmentType containment=ContainmentType.Contains;if(box.mask!=null)box.mask.Value.Contains(ref box.bounds,out containment);if(containment!=ContainmentType.Disjoint){if(updateMatFit&&matFrame.Material!=Material.Default){Vector2 boxSize=box.bounds.Size;minBoard.materialData.texBounds=matFrame.GetMaterialAlignment(boxSize.X/boxSize.Y);updateMatFit=false;}if(containment!=ContainmentType.Disjoint)minBoard.Draw(ref box,matrixRef);}}}}}}﻿using VRage.Utils;using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public enum MaterialAlignment:int{StretchToFit=0,FitVertical=1,FitHorizontal=2,FitAuto=3,}public class Material{public static readonly Material Default=new Material("RichHudDefault",new Vector2(4f,4f)),CircleMat=new Material("RhfCircle",new Vector2(1024f)),AnnulusMat=new Material("RhfAnnulus",new Vector2(1024f));public readonly MyStringId TextureID;public readonly Vector2 size;public readonly Vector2 uvSize;public readonly Vector2 uvOffset;public Material(string TextureName,Vector2 size):this(MyStringId.GetOrCompute(TextureName),size){}public Material(string TextureName,Vector2 texSize,Vector2 texCoords,Vector2 size):this(MyStringId.GetOrCompute(TextureName),texSize,texCoords,size){}public Material(MyStringId TextureID,Vector2 size){this.TextureID=TextureID;this.size=size;uvSize=Vector2.One;uvOffset=uvSize*.5f;}public Material(MyStringId TextureID,Vector2 textureSize,Vector2 offset,Vector2 size){this.TextureID=TextureID;this.size=size;size.X/=textureSize.X;size.Y/=textureSize.Y;uvSize=size;offset.X/=textureSize.X;offset.Y/=textureSize.Y;uvOffset=offset+(uvSize*.5f);}}}}}﻿using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public interface IReadOnlyMaterialFrame{MaterialAlignment Alignment{get;}Material Material{get;}Vector2 UvOffset{get;}BoundingBox2 GetMaterialAlignment(float bbAspectRatio);}public class MaterialFrame:IReadOnlyMaterialFrame{public Material Material{get;set;}public MaterialAlignment Alignment{get;set;}public Vector2 UvOffset{get;set;}public MaterialFrame(){Material=Material.Default;Alignment=MaterialAlignment.StretchToFit;UvOffset=Vector2.Zero;}public BoundingBox2 GetMaterialAlignment(float bbAspectRatio){Vector2 matOrigin=Material.uvOffset+UvOffset,matStep=Material.uvSize*.5f;if(Alignment!=MaterialAlignment.StretchToFit){float matAspectRatio=Material.size.X/Material.size.Y;Vector2 localUV=new Vector2(1f);if(Alignment==MaterialAlignment.FitAuto){if(matAspectRatio>bbAspectRatio)localUV=new Vector2(1f,matAspectRatio/bbAspectRatio);else localUV=new Vector2(bbAspectRatio/matAspectRatio,1f);}else if(Alignment==MaterialAlignment.FitVertical){localUV=new Vector2(bbAspectRatio/matAspectRatio,1f);}else if(Alignment==MaterialAlignment.FitHorizontal){localUV=new Vector2(1f,matAspectRatio/bbAspectRatio);}matStep*=localUV;}return new BoundingBox2(matOrigin-matStep,matOrigin+matStep);}}}}}﻿using System;using System.Collections.Generic;using VRageMath;namespace RichHudFramework.UI.Rendering{public class PolyBoard{public virtual Color Color{get{return color;}set{if(value!=color)polyMat.bbColor=BillBoardUtils.GetBillBoardBoardColor(value);color=value;}}public virtual Material Material{get{return matFrame.Material;}set{if(value!=matFrame.Material){updateMatFit=true;matFrame.Material=value;polyMat.textureID=value.TextureID;}}}public MaterialAlignment MatAlignment{get{return matFrame.Alignment;}set{if(value!=matFrame.Alignment){updateMatFit=true;matFrame.Alignment=value;}}}public virtual int Sides{get{return _sides;}set{if(value!=_sides)updateVertices=true;_sides=value;}}protected int _sides;protected Color color;protected bool updateVertices,updateMatFit;protected PolyMaterial polyMat;protected readonly MaterialFrame matFrame;protected readonly List<int>triangles;protected readonly List<Vector2>vertices;protected readonly List<Vector2>drawVertices;public PolyBoard(){triangles=new List<int>();vertices=new List<Vector2>();drawVertices=new List<Vector2>();matFrame=new MaterialFrame();polyMat=PolyMaterial.Default;polyMat.texCoords=new List<Vector2>();_sides=16;updateVertices=true;}public virtual void Draw(Vector2 size,Vector2 origin,MatrixD[]matrixRef){if(_sides>2&&drawVertices.Count>2){if(updateVertices)GeneratePolygon();if(updateMatFit){polyMat.texBounds=matFrame.GetMaterialAlignment(size.X/size.Y);GenerateTextureCoordinates();updateMatFit=false;}for(int i=0;i<drawVertices.Count;i++){drawVertices[i]=origin+size*vertices[i];}BillBoardUtils.AddTriangles(triangles,drawVertices,ref polyMat,matrixRef);}}public virtual void Draw(Vector2 size,Vector2 origin,Vector2I faceRange,MatrixD[]matrixRef){if(_sides>2&&drawVertices.Count>2){if(updateVertices)GeneratePolygon();if(updateMatFit){polyMat.texBounds=matFrame.GetMaterialAlignment(size.X/size.Y);GenerateTextureCoordinates();updateMatFit=false;}int max=drawVertices.Count-1;drawVertices[max]=origin+size*vertices[max];for(int i=0;i<drawVertices.Count;i++){drawVertices[i]=origin+size*vertices[i];}faceRange*=3;BillBoardUtils.AddTriangleRange(faceRange,triangles,drawVertices,ref polyMat,matrixRef);}}public virtual Vector2 GetSliceOffset(Vector2 bbSize,Vector2I range){if(updateVertices)GeneratePolygon();int max=vertices.Count;Vector2 start=vertices[range.X],end=vertices[(range.Y+1)%max],center=Vector2.Zero;return bbSize*(start+end+center)/3f;}protected virtual void GeneratePolygon(){GenerateVertices();GenerateTriangles();drawVertices.Clear();for(int i=0;i<vertices.Count;i++)drawVertices.Add(Vector2.Zero);updateMatFit=true;}protected virtual void GenerateTriangles(){int max=vertices.Count-1;triangles.Clear();triangles.EnsureCapacity(_sides*3);for(int i=0;i<vertices.Count-1;i++){triangles.Add(max);triangles.Add(i);triangles.Add((i+1)%max);}}protected virtual void GenerateTextureCoordinates(){Vector2 texScale=polyMat.texBounds.Size,texCenter=polyMat.texBounds.Center;polyMat.texCoords.Clear();polyMat.texCoords.EnsureCapacity(vertices.Count);for(int i=0;i<vertices.Count;i++){Vector2 uv=vertices[i]*texScale;uv.Y*=-1f;polyMat.texCoords.Add(uv+texCenter);}}protected virtual void GenerateVertices(){float rotStep=(float)(Math.PI*2f/_sides),rotPos=-.5f*rotStep;vertices.Clear();vertices.EnsureCapacity(_sides+1);for(int i=0;i<_sides;i++){Vector2 point=Vector2.Zero;point.X=(float)Math.Cos(rotPos);point.Y=(float)Math.Sin(rotPos);vertices.Add(.5f*point);rotPos+=rotStep;}vertices.Add(Vector2.Zero);}}}﻿using System;using System.Collections.Generic;using VRageMath;namespace RichHudFramework.UI.Rendering{public class PuncturedPolyBoard:PolyBoard{public float InnerRadius{get{return _innerRadius;}set{if(value!=_innerRadius)updateVertices=true;_innerRadius=value;}}private float _innerRadius;public PuncturedPolyBoard(){_innerRadius=0.6f;}public override void Draw(Vector2 size,Vector2 origin,Vector2I faceRange,MatrixD[]matrixRef){if(_sides>2&&drawVertices.Count>5){if(updateVertices)GeneratePolygon();if(updateMatFit){polyMat.texBounds=matFrame.GetMaterialAlignment(size.X/size.Y);GenerateTextureCoordinates();updateMatFit=false;}faceRange.Y++;faceRange*=2;faceRange.X-=faceRange.X%2;faceRange.Y-=faceRange.Y%2;for(int i=faceRange.X;i<=faceRange.Y+1;i++){drawVertices[i%drawVertices.Count]=origin+size*vertices[i%drawVertices.Count];}faceRange*=3;BillBoardUtils.AddTriangleRange(faceRange,triangles,drawVertices,ref polyMat,matrixRef);}}public override Vector2 GetSliceOffset(Vector2 bbSize,Vector2I range){if(updateVertices)GeneratePolygon();range.Y++;range*=2;range.X-=range.X%2;range.Y-=range.Y%2;int max=vertices.Count;Vector2 sum=vertices[range.X]+vertices[range.X+1]+vertices[(range.Y)%max]+vertices[(range.Y+1)%max];return bbSize*sum*.25f;}protected override void GenerateTriangles(){int max=vertices.Count;triangles.Clear();triangles.EnsureCapacity(_sides*3*2);for(int i=0;i<vertices.Count;i+=2){int outerStart=i,innerStart=(i+1)%max,outerEnd=(i+2)%max,innerEnd=(i+3)%max;triangles.Add(outerStart);triangles.Add(outerEnd);triangles.Add(innerStart);triangles.Add(outerEnd);triangles.Add(innerEnd);triangles.Add(innerStart);}}protected override void GenerateVertices(){float rotStep=(float)(Math.PI*2f/_sides),rotPos=-.5f*rotStep;_innerRadius=Math.Min(1f-0.01f,_innerRadius);vertices.Clear();vertices.EnsureCapacity(_sides*2);for(int i=0;i<_sides;i++){Vector2 outerStart=Vector2.Zero;outerStart.X=(float)Math.Cos(rotPos);outerStart.Y=(float)Math.Sin(rotPos);Vector2 innerStart=outerStart*_innerRadius;vertices.Add(.5f*outerStart);vertices.Add(.5f*innerStart);rotPos+=rotStep;}}}}﻿using VRage.Utils;using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public struct CroppedBox{public static readonly BoundingBox2 defaultMask=new BoundingBox2(-Vector2.PositiveInfinity,Vector2.PositiveInfinity);public BoundingBox2 bounds;public BoundingBox2?mask;}public struct QuadBoardData{public BoundedQuadMaterial material;public MyQuadD positions;}public struct BoundedQuadBoard{public BoundingBox2 bounds;public QuadBoard quadBoard;}public struct QuadBoard{public static readonly QuadBoard Default;public float skewRatio;public BoundedQuadMaterial materialData;static QuadBoard(){var matFit=new BoundingBox2(new Vector2(0f,0f),new Vector2(1f,1f));Default=new QuadBoard(Material.Default.TextureID,matFit,Color.White);}public QuadBoard(MyStringId textureID,BoundingBox2 matFit,Vector4 bbColor,float skewRatio=0f){materialData.textureID=textureID;materialData.texBounds=matFit;materialData.bbColor=bbColor;this.skewRatio=skewRatio;}public QuadBoard(MyStringId textureID,BoundingBox2 matFit,Color color,float skewRatio=0f){materialData.textureID=textureID;materialData.texBounds=matFit;materialData.bbColor=BillBoardUtils.GetBillBoardBoardColor(color);this.skewRatio=skewRatio;}public void Draw(ref MyQuadD quad){BillBoardUtils.AddQuad(ref materialData,ref quad);}public void Draw(ref CroppedBox box,MatrixD[]matrixRef){FlatQuad quad=new FlatQuad(){Point0=box.bounds.Max,Point1=new Vector2(box.bounds.Max.X,box.bounds.Min.Y),Point2=box.bounds.Min,Point3=new Vector2(box.bounds.Min.X,box.bounds.Max.Y),};if(skewRatio!=0f){Vector2 start=quad.Point0,end=quad.Point3,offset=(end-start)*skewRatio*.5f;quad.Point0=Vector2.Lerp(start,end,skewRatio)-offset;quad.Point3=Vector2.Lerp(start,end,1f+skewRatio)-offset;quad.Point1-=offset;quad.Point2-=offset;}BillBoardUtils.AddQuad(ref quad,ref materialData,matrixRef,box.mask);}}}}}﻿using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public enum LineAccessors:int{Count=1,Size=2,VerticalOffset=3,}public interface ILine:IIndexedCollection<IRichChar>{Vector2 Size{get;}float VerticalOffset{get;}}}}}﻿using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public enum RichCharAccessors:int{Ch=1,Format=2,Size=3,Offset=4}public interface IRichChar{char Ch{get;}GlyphFormat Format{get;}Vector2 Size{get;}Vector2 Offset{get;}}}}}﻿using System;using VRageMath;namespace RichHudFramework{namespace UI{namespace Rendering{public enum TextBoardAccessors:int{AutoResize=129,VertAlign=130,MoveToChar=131,GetCharAtOffset=132,OnTextChanged=133,TextOffset=134,VisibleLineRange=135,}public interface ITextBoard:ITextBuilder{event Action TextChanged;float Scale{get;set;}Vector2 Size{get;}Vector2 TextSize{get;}Vector2 TextOffset{get;set;}Vector2I VisibleLineRange{get;}Vector2 FixedSize{get;set;}bool AutoResize{get;set;}bool VertCenterText{get;set;}void MoveToChar(Vector2I index);Vector2I GetCharAtOffset(Vector2 localPos);void Draw(Vector2 origin);void Draw(Vector2 offset,MatrixD matrix);void Draw(BoundingBox2 box,BoundingBox2 mask,MatrixD[]matrix);}}}}﻿using System.Text;using VRageMath;namespace RichHudFramework{namespace UI{public enum TextBuilderModes:int{Unlined=1,Lined=2,Wrapped=3}namespace Rendering{public enum TextBuilderAccessors:int{LineWrapWidth=1,BuilderMode=2,GetRange=3,SetFormatting=4,RemoveRange=5,Format=6,ToString=7,}public interface ITextBuilder:IIndexedCollection<ILine>{IRichChar this[Vector2I index]{get;}GlyphFormat Format{get;set;}float LineWrapWidth{get;set;}TextBuilderModes BuilderMode{get;set;}void SetText(RichText text);void SetText(StringBuilder text,GlyphFormat?format=null);void SetText(string text,GlyphFormat?format=null);void Append(RichText text);void Append(StringBuilder text,GlyphFormat?format=null);void Append(string text,GlyphFormat?format=null);void Append(char ch,GlyphFormat?format=null);void Insert(RichText text,Vector2I start);void Insert(StringBuilder text,Vector2I start,GlyphFormat?format=null);void Insert(string text,Vector2I start,GlyphFormat?format=null);void Insert(char text,Vector2I start,GlyphFormat?format=null);void SetFormatting(GlyphFormat format);void SetFormatting(Vector2I start,Vector2I end,GlyphFormat format);RichText GetText();RichText GetTextRange(Vector2I start,Vector2I end);void RemoveAt(Vector2I index);void RemoveRange(Vector2I start,Vector2I end);void Clear();}}}}﻿using System;using VRageMath;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework{namespace UI{using Rendering;using Rendering.Client;public enum TextAlignment:byte{Left=0,Center=1,Right=2,}public struct GlyphFormat:IEquatable<GlyphFormat>{public static readonly GlyphFormat Black=new GlyphFormat(),White=new GlyphFormat(color:Color.White),Blueish=new GlyphFormat(color:new Color(220,235,242)),Empty=new GlyphFormat(default(GlyphFormatMembers));public TextAlignment Alignment=>(TextAlignment)Data.Item1;public float TextSize=>Data.Item2;public IFontMin Font=>FontManager.GetFont(Data.Item3.X);public FontStyles FontStyle=>(FontStyles)Data.Item3.Y;public Vector2I StyleIndex=>Data.Item3;public Color Color=>Data.Item4;public GlyphFormatMembers Data{get;}public GlyphFormat(Color color,TextAlignment alignment,float textSize,Vector2I fontStyle){if(color==default(Color))color=Color.Black;Data=new GlyphFormatMembers((byte)alignment,textSize,fontStyle,color);}public GlyphFormat(Color color=default(Color),TextAlignment alignment=TextAlignment.Left,float textSize=1f,FontStyles style=FontStyles.Regular,IFontMin font=null){if(color==default(Color))color=Color.Black;if(font==null)font=FontManager.GetFont(FontManager.Default.X);Data=new GlyphFormatMembers((byte)alignment,textSize,font.GetStyleIndex(style),color);}public GlyphFormat(GlyphFormatMembers data){this.Data=data;}public GlyphFormat(GlyphFormat original){Data=original.Data;}public GlyphFormat WithColor(Color color)=>new GlyphFormat(color,Alignment,TextSize,StyleIndex);public GlyphFormat WithAlignment(TextAlignment textAlignment)=>new GlyphFormat(Color,textAlignment,TextSize,StyleIndex);public GlyphFormat WithFont(int font)=>new GlyphFormat(Color,Alignment,TextSize,new Vector2I(font,0));public GlyphFormat WithFont(Vector2I fontStyle)=>new GlyphFormat(Color,Alignment,TextSize,fontStyle);public GlyphFormat WithStyle(FontStyles style){if(FontManager.GetFont(StyleIndex.X).IsStyleDefined(style))return new GlyphFormat(Color,Alignment,TextSize,new Vector2I(StyleIndex.X,(int)style));else return this;}public GlyphFormat WithStyle(int style){if(FontManager.GetFont(StyleIndex.X).IsStyleDefined(style))return new GlyphFormat(Color,Alignment,TextSize,new Vector2I(StyleIndex.X,style));else return this;}public GlyphFormat WithSize(float size)=>new GlyphFormat(Color,Alignment,size,StyleIndex);public override bool Equals(object obj){if(obj==null)return false;var format=(GlyphFormat)obj;return Data.Item1==format.Data.Item1&&Data.Item2==format.Data.Item2&&Data.Item3==format.Data.Item3&&Data.Item4==format.Data.Item4;}public bool Equals(GlyphFormat format){return Data.Item1==format.Data.Item1&&Data.Item2==format.Data.Item2&&Data.Item3==format.Data.Item3&&Data.Item4==format.Data.Item4;}public bool DataEqual(GlyphFormatMembers data){return Data.Item1==data.Item1&&Data.Item2==data.Item2&&Data.Item3==data.Item3&&Data.Item4==data.Item4;}public override int GetHashCode()=>Data.GetHashCode();}}}﻿using System;using System.Collections;using System.Collections.Generic;using System.Text;using VRage;using GlyphFormatMembers=VRage.MyTuple<byte,float,VRageMath.Vector2I,VRageMath.Color>;namespace RichHudFramework{using RichStringMembers=MyTuple<StringBuilder,GlyphFormatMembers>;namespace UI{public class RichText:IEnumerable<RichStringMembers>,IEquatable<RichText>{public GlyphFormat?defaultFormat;public readonly List<RichStringMembers>apiData;private ObjectPool<StringBuilder>sbPool;public RichText(GlyphFormat?defaultFormat=null){this.defaultFormat=defaultFormat??GlyphFormat.Empty;apiData=new List<RichStringMembers>();}public RichText(List<RichStringMembers>apiData,bool copy=false){this.apiData=copy?GetDataCopy(apiData):apiData;defaultFormat=GlyphFormat.Empty;}public RichText(RichText original){apiData=new List<RichStringMembers>();defaultFormat=original.defaultFormat;Add(original);}public RichText(string text,GlyphFormat?defaultFormat=null){this.defaultFormat=defaultFormat??GlyphFormat.Empty;apiData=new List<RichStringMembers>();apiData.Add(new RichStringMembers(new StringBuilder(text),this.defaultFormat.Value.Data));}public RichText(StringBuilder text,GlyphFormat?defaultFormat=null){this.defaultFormat=defaultFormat??GlyphFormat.Empty;apiData=new List<RichStringMembers>();Add(text);}public IEnumerator<RichStringMembers>GetEnumerator()=>apiData.GetEnumerator();IEnumerator IEnumerable.GetEnumerator()=>apiData.GetEnumerator();public void Add(RichText text){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>currentStrings=apiData,newStrings=text.apiData;if(newStrings.Count>0){int index=0,end=newStrings.Count-1;if(currentStrings.Count>0){GlyphFormatMembers newFormat=newStrings[0].Item2;StringBuilder sb;bool formatEqual;GetNextStringBuilder(newFormat,out sb,out formatEqual);if(formatEqual){StringBuilder newSb=newStrings[0].Item1;sb.EnsureCapacity(sb.Length+newSb.Length);for(int i=0;i<newSb.Length;i++)sb.Append(newSb[i]);index++;}}for(int i=index;i<=end;i++){StringBuilder sb=sbPool.Get(),newSb=newStrings[i].Item1;sb.EnsureCapacity(sb.Length+newSb.Length);currentStrings.Add(new RichStringMembers(sb,newStrings[i].Item2));for(int j=0;j<newSb.Length;j++)sb.Append(newSb[j]);}}}public void Add(StringBuilder text,GlyphFormat?newFormat=null){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>richStrings=apiData;GlyphFormatMembers format=newFormat?.Data??defaultFormat?.Data??GlyphFormat.Empty.Data;StringBuilder sb;bool formatEqual;GetNextStringBuilder(newFormat?.Data??GlyphFormat.Empty.Data,out sb,out formatEqual);if(!formatEqual){var richString=new RichStringMembers(sb,format);richStrings.Add(richString);}sb.EnsureCapacity(sb.Length+text.Length);for(int i=0;i<text.Length;i++)sb.Append(text[i]);}public void Add(GlyphFormat newFormat,StringBuilder text)=>Add(text,newFormat);public void Add(string text,GlyphFormat?newFormat=null){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>richStrings=apiData;GlyphFormatMembers format=newFormat?.Data??defaultFormat?.Data??GlyphFormat.Empty.Data;StringBuilder sb;bool formatEqual;GetNextStringBuilder(newFormat?.Data??GlyphFormat.Empty.Data,out sb,out formatEqual);if(!formatEqual){var richString=new RichStringMembers(sb,format);richStrings.Add(richString);}sb.Append(text);}public void Add(char ch,GlyphFormat?newFormat=null){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>richStrings=apiData;GlyphFormatMembers format=newFormat?.Data??defaultFormat?.Data??GlyphFormat.Empty.Data;StringBuilder sb;bool formatEqual;GetNextStringBuilder(newFormat?.Data??GlyphFormat.Empty.Data,out sb,out formatEqual);if(!formatEqual){var richString=new RichStringMembers(sb,format);richStrings.Add(richString);}sb.Append(ch);}private void GetNextStringBuilder(GlyphFormatMembers newFormat,out StringBuilder sb,out bool formatEqual){List<RichStringMembers>richStrings=apiData;int last=richStrings.Count-1;formatEqual=false;if(richStrings.Count>0){GlyphFormatMembers lastFormat=richStrings[last].Item2;formatEqual=newFormat.Item1==lastFormat.Item1&&newFormat.Item2==lastFormat.Item2&&newFormat.Item3==lastFormat.Item3&&newFormat.Item4==lastFormat.Item4;}sb=formatEqual?richStrings[last].Item1:sbPool.Get();}public void Add(GlyphFormat newFormat,string text)=>Add(text,newFormat);public void TrimExcess(){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>text=apiData;for(int n=0;n<text.Count;n++)text[n].Item1.Capacity=text[n].Item1.Length;sbPool.TrimExcess();text.TrimExcess();}public void Clear(){if(sbPool==null)sbPool=new ObjectPool<StringBuilder>(new StringBuilderPoolPolicy());List<RichStringMembers>text=apiData;sbPool.ReturnRange(text,0,text.Count);text.Clear();}public override int GetHashCode(){return base.GetHashCode();}public override bool Equals(object obj){RichText other=obj as RichText;if(apiData==other?.apiData)return true;if(other!=null)return Equals(other);else return false;}public bool Equals(RichText other){bool isFormatEqual=true,isTextEqual=true,isLengthEqual=true;if(other==null)return false;else if(apiData==other.apiData)return true;else if(apiData.Count==other.apiData.Count){for(int i=0;i<apiData.Count;i++){if(apiData[i].Item1.Length!=other.apiData[i].Item1.Length){isLengthEqual=false;break;}}if(isLengthEqual){for(int i=0;i<apiData.Count;i++){GlyphFormatMembers fmt=apiData[i].Item2,otherFmt=other.apiData[i].Item2;if(fmt.Item1!=otherFmt.Item1||fmt.Item2!=otherFmt.Item2||fmt.Item3!=otherFmt.Item3||fmt.Item4!=otherFmt.Item4){isFormatEqual=false;break;}}}else isFormatEqual=false;if(isFormatEqual){for(int i=0;i<apiData.Count;i++){for(int j=0;j<apiData[i].Item1.Length;j++){if(apiData[i].Item1[j]!=other.apiData[i].Item1[j]){isTextEqual=false;break;}}}}}else isLengthEqual=false;return isLengthEqual&&isFormatEqual&&isTextEqual;}public override string ToString(){StringBuilder rawText=new StringBuilder();List<RichStringMembers>richText=apiData;int charCount=0;for(int i=0;i<richText.Count;i++)charCount+=richText[i].Item1.Length;rawText.EnsureCapacity(charCount);for(int i=0;i<richText.Count;i++){for(int b=0;b<richText[i].Item1.Length;b++)rawText.Append(richText[i].Item1[b]);}return rawText.ToString();}public RichText GetCopy()=>new RichText(GetDataCopy(apiData));public static List<RichStringMembers>GetDataCopy(List<RichStringMembers>original){var newData=new List<RichStringMembers>(original.Count);for(int i=0;i<original.Count;i++){StringBuilder oldSb=original[i].Item1,sb=new StringBuilder(oldSb.Length);for(int j=0;j<oldSb.Length;j++)sb.Append(oldSb[j]);newData.Add(new RichStringMembers(sb,original[i].Item2));}return newData;}public static RichText operator+(RichText left,string right){left.Add(right);return left;}public static RichText operator+(RichText left,StringBuilder right){left.Add(right);return left;}public static RichText operator+(RichText left,RichText right){left.Add(right);return left;}public static implicit operator RichText(string text)=>new RichText(text);public static implicit operator RichText(StringBuilder text)=>new RichText(text);public static implicit operator RichText(List<RichStringMembers>text)=>new RichText(text);}}}﻿using System;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using Client;using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;public enum ControlCatAccessors:int{HeaderText=1,SubheaderText=2,Enabled=3,AddMember=4}public interface IControlCategory:IControlCategory<ControlTile>{IReadOnlyList<ControlTile>Tiles{get;}IControlCategory TileContainer{get;}}public interface IVertControlCategory:IControlCategory<TerminalControlBase>{IReadOnlyList<TerminalControlBase>Controls{get;}IVertControlCategory ControlContainer{get;}}public interface IControlCategory<TElementContainer>:IEnumerable<TElementContainer>{string HeaderText{get;set;}string SubheaderText{get;set;}bool Enabled{get;set;}object ID{get;}void Add(TElementContainer tile);ControlContainerMembers GetApiData();}}}﻿using System.Collections.Generic;namespace RichHudFramework{namespace UI{using Client;public enum ControlPageAccessors:int{AddCategory=10,CategoryData=11,}public interface IControlPage:IControlPage<ControlCategory,ControlTile>{}public interface IControlPage<TCategory,TMember>:ITerminalPage,IEnumerable<TCategory>where TCategory:IControlCategory<TMember>,new(){IReadOnlyList<TCategory>Categories{get;}IControlPage<TCategory,TMember>CategoryContainer{get;}void Add(TCategory category);}}}﻿using System;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using Client;using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;public enum ControlTileAccessors:int{AddControl=1,Enabled=2,}public interface IControlTile:IEnumerable<ITerminalControl>{IReadOnlyList<TerminalControlBase>Controls{get;}IControlTile ControlContainer{get;}bool Enabled{get;set;}object ID{get;}void Add(TerminalControlBase control);ControlContainerMembers GetApiData();}}}﻿using System;using System.Collections.Generic;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{namespace UI{using Client;using ControlContainerMembers=MyTuple<ApiMemberAccessor,MyTuple<object,Func<int>>,object>;public enum TerminalAccessors:int{ToggleMenu=0,OpenMenu=1,CloseMenu=2,OpenToPage=3,SetPage=4,GetMenuOpen=5,GetNewPageCategoryFunc=6}public enum MenuControls:int{Checkbox=1,ColorPicker=2,OnOffButton=3,SliderSetting=4,TerminalButton=5,TextField=6,DropdownControl=7,ListControl=8,DragBox=9,}public enum ControlContainers:int{Tile=1,Category=2,}public enum ModPages:int{ControlPage=1,RebindPage=2,TextPage=3,}public enum ModControlRootAccessors:int{GetOrSetCallback=1,GetCategoryAccessors=7,AddSubcategory=8}public interface IModRootMember{string Name{get;set;}bool Enabled{get;set;}object ID{get;}}public interface IModControlRoot:ITerminalPageCategory{event EventHandler SelectionChanged;IReadOnlyList<TerminalPageCategoryBase>Subcategories{get;}void Add(TerminalPageCategoryBase subcategory);void AddRange(IReadOnlyList<IModRootMember>members);ControlContainerMembers GetApiData();}}}﻿using System.Collections.Generic;namespace RichHudFramework{namespace UI{public enum RebindPageAccessors:int{Add=10,}public interface IRebindPage:ITerminalPage,IEnumerable<IBindGroup>{IReadOnlyList<IBindGroup>BindGroups{get;}void Add(IBindGroup bindGroup);void Add(IBindGroup bindGroup,BindDefinition[]defaultBinds);}}}﻿using System;using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlMembers=MyTuple<ApiMemberAccessor,object>;namespace UI{public enum TerminalControlAccessors:int{GetOrSetControlCallback=1,Name=2,Enabled=3,ToolTip=4,Value=8,ValueGetter=9,}public interface ITerminalControl{event EventHandler ControlChanged;string Name{get;set;}bool Enabled{get;set;}ToolTip ToolTip{get;set;}object ID{get;}EventHandler ControlChangedHandler{get;set;}ControlMembers GetApiData();}public interface ITerminalValue<TValue>:ITerminalControl{TValue Value{get;set;}Func<TValue>CustomValueGetter{get;set;}}}}﻿using VRage;using ApiMemberAccessor=System.Func<object,int,object>;namespace RichHudFramework{using ControlMembers=MyTuple<ApiMemberAccessor,object>;namespace UI{public enum TerminalPageAccessors:int{Name=1,Enabled=2,}public interface ITerminalPage:IModRootMember{ControlMembers GetApiData();}}}﻿using System.Collections.Generic;namespace RichHudFramework{namespace UI{using Client;public enum TerminalPageCategoryAccessors:int{Name=2,Enabled=3,Selection=4,AddPage=5,AddPageRange=6,}public interface ITerminalPageCategory:IEnumerable<TerminalPageBase>,IModRootMember{IReadOnlyList<TerminalPageBase>Pages{get;}ITerminalPageCategory PageContainer{get;}TerminalPageBase SelectedPage{get;}void Add(TerminalPageBase page);void AddRange(IReadOnlyList<TerminalPageBase>pages);}}}﻿using RichHudFramework.UI.Rendering;namespace RichHudFramework{namespace UI{public enum TextPageAccessors:int{GetOrSetHeader=10,GetOrSetSubheader=11,GetOrSetText=12,GetTextBuilder=13,}public interface ITextPage:ITerminalPage{RichText HeaderText{get;set;}RichText SubHeaderText{get;set;}RichText Text{get;set;}ITextBuilder TextBuilder{get;}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.ModAPI;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.ModAPI;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.UserInterface{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal abstract class GridBasedIndicator_Base:MySessionComponentBase{internal IMyCubeGrid controlledGrid;public bool Visible=true;public override void UpdateAfterSimulation(){base.UpdateAfterSimulation();if(MyAPIGateway.Utilities.IsDedicated||!HeartData.I.IsLoaded){Visible=false;return;}Visible=MyAPIGateway.Gui.GetCurrentScreen==MyTerminalPageEnum.None;if(!Visible)return;IMyEntity controlledEntity=MyAPIGateway.Session.Player?.Controller?.ControlledEntity?.Entity?.GetTopMostParent();if(!(controlledEntity is IMyCubeGrid)){controlledGrid=null;return;}controlledGrid=(IMyCubeGrid)controlledEntity;foreach(var weaponLogic in WeaponManager.I.GridWeapons[controlledGrid]){if(weaponLogic.HudBarrelIndicatorState){PerWeaponUpdate(weaponLogic);}}}public abstract void PerWeaponUpdate(SorterWeaponLogic weapon);}}﻿using RichHudFramework.Client;using RichHudFramework.UI;using RichHudFramework.UI.Client;using VRage.Game.Components;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.UserInterface{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal class ResourceIndicator:MySessionComponentBase{private bool _hasInitedHud=false;private ResourceStatusWindow _window;public override void UpdateAfterSimulation(){base.UpdateAfterSimulation();if(!RichHudClient.Registered)return;if(!_hasInitedHud)InitHud();try{int resourceCount=GetResourceCount();_window.UpdateResourceInfo($"Resources: {resourceCount}");}catch{}}private void InitHud(){_window=new ResourceStatusWindow(HudMain.HighDpiRoot){Visible=true,};_hasInitedHud=true;}private int GetResourceCount(){return 0;}}internal class ResourceStatusWindow:WindowBase{private Label _resourceInfo;public ResourceStatusWindow(HudParentBase parent):base(parent){_resourceInfo=new Label(body){ParentAlignment=ParentAlignments.Top|ParentAlignments.InnerH|ParentAlignments.InnerV,Text="Resource Status: Initializing...",AutoResize=false,DimAlignment=DimAlignments.Both,};BodyColor=new Color(41,54,62,150);BorderColor=new Color(58,68,77);header.Format=new GlyphFormat(Vector4.One,TextAlignment.Center);header.Height=30f;HeaderText="Resource Status";Size=new Vector2(250f,150f);Offset=new Vector2(580,464);}public void UpdateResourceInfo(string infoText){_resourceInfo.Text=infoText;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Weapons;using Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting;using Sandbox.ModAPI;using VRage.Game;using VRage.Game.Components;using VRage.Utils;using VRageMath;using VRageRender;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.UserInterface{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal class TurretBarrelIndicator:GridBasedIndicator_Base{const int MaxVisibleIndicators=100;readonly MyStringId FixedMaterial=MyStringId.GetOrCompute("WhiteDot");readonly Vector4 FixedColor=new Vector4(1,0.48f,0,0.5f);readonly MyStringId TurretMaterial=MyStringId.GetOrCompute("SquareFullColor");readonly Vector4 TurretColor=new Vector4(1*2,0.48f*2,0,1f);float viewDist=10000;int numVisible=0;public override void LoadData(){viewDist=MyAPIGateway.Multiplayer.MultiplayerActive?MyAPIGateway.Session.SessionSettings.SyncDistance:MyAPIGateway.Session.SessionSettings.ViewDistance;}public override void UpdateAfterSimulation(){base.UpdateAfterSimulation();numVisible=0;}public override void PerWeaponUpdate(SorterWeaponLogic weapon){if(numVisible>MaxVisibleIndicators)return;try{if(!weapon.SorterWep.IsWorking)return;double dist=viewDist;MyStringId texture;Vector4 color;if(weapon is SorterTurretLogic){SorterTurretLogic turret=(SorterTurretLogic)weapon;if(turret.AimPoint!=Vector3D.MaxValue)dist=Vector3D.Distance(turret.AimPoint,turret.MuzzleMatrix.Translation);texture=TurretMaterial;color=TurretColor;}else{var targeting=WeaponManagerAi.I.GetTargeting(weapon.SorterWep.CubeGrid);if(targeting!=null&&targeting.PrimaryGridTarget!=null)dist=Vector3D.Distance(targeting.PrimaryGridTarget.GetPosition(),weapon.MuzzleMatrix.Translation);texture=FixedMaterial;color=FixedColor;}Vector3D progradeCtr=weapon.MuzzleMatrix.Translation+(weapon.MuzzleMatrix.Forward*dist);float adjSymbolHeight=(float)dist/(40f/70f*MyAPIGateway.Session.Camera.FieldOfViewAngle);var progradeTop=progradeCtr+MyAPIGateway.Session.Camera.WorldMatrix.Up*adjSymbolHeight;MySimpleObjectDraw.DrawLine(progradeTop,progradeTop-MyAPIGateway.Session.Camera.WorldMatrix.Up*adjSymbolHeight*2,texture,ref color,adjSymbolHeight,MyBillboard.BlendTypeEnum.AdditiveTop);numVisible++;}catch{}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Weapons;using RichHudFramework.Client;using RichHudFramework.UI.Client;using VRage.Game;using VRage.Game.Components;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.UserInterface.ReloadIndicators{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal class ReloadIndicator:GridBasedIndicator_Base{bool HasInitedHud=false;ReloadWindow Window;public override void Init(MyObjectBuilder_SessionComponent sessionComponent){base.Init(sessionComponent);}public override void Draw(){if(!RichHudClient.Registered)return;if(!HasInitedHud)InitHud();try{int numWeapons=0;if(controlledGrid!=null){numWeapons=WeaponManager.I.GridWeapons[controlledGrid].Count;Window.UpdateWeaponText(WeaponManager.I.GridWeapons[controlledGrid]);}else Window.ClearWeaponText();Window.UpdateDebugText(ProjectileManager.I.NumProjectiles,numWeapons,HeartData.I.Net.TotalNetworkLoad);}catch{}}void InitHud(){Window=new ReloadWindow(HudMain.HighDpiRoot){Visible=true,};HasInitedHud=true;}public override void PerWeaponUpdate(SorterWeaponLogic weapon){}}}﻿using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Weapons;using RichHudFramework.UI;using System;using System.Collections.Generic;using System.Linq;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.UserInterface.ReloadIndicators{internal class ReloadWindow:WindowBase{Label debugInfo;Label debugInfo2;ListBox<uint>weaponStatus;public ReloadWindow(HudParentBase parent):base(parent){debugInfo=new Label(body){ParentAlignment=ParentAlignments.Bottom|ParentAlignments.InnerV,DimAlignment=DimAlignments.Width,};debugInfo2=new Label(body){ParentAlignment=ParentAlignments.Bottom|ParentAlignments.InnerV,DimAlignment=DimAlignments.Width,Offset=new Vector2(0,debugInfo.Height),};weaponStatus=new ListBox<uint>(body){ParentAlignment=ParentAlignments.Top|ParentAlignments.InnerV,DimAlignment=DimAlignments.Both,EnableScrolling=false,InputEnabled=false,Color=new Color(0,0,0,0),};weaponStatus.hudChain.ScrollBar.Visible=false;BodyColor=new Color(41,54,62,150);BorderColor=new Color(58,68,77);header.Format=new GlyphFormat(GlyphFormat.Blueish.Color,TextAlignment.Center,1.08f);header.Height=30f;HeaderText="[OCF] HeartModule";Size=new Vector2(250f,500f);Offset=new Vector2(835,290);}protected override void Layout(){base.Layout();MinimumSize=new Vector2(Math.Max(1,MinimumSize.X),MinimumSize.Y);}public void UpdateDebugText(int numProjectiles,int numWeapons,int networkLoad){debugInfo.Text=$"Projectiles: {numProjectiles} | Weapons: {numWeapons}";debugInfo2.Text=$"NETLOAD: {Math.Round(networkLoad/1000f,1)}kb/s ({HeartData.I.Net.HighestNetworkLoad().Key.Name})";}public void UpdateWeaponText(SorterWeaponLogic weapon){if(!weapon.SorterWep.ShowInTerminal)return;var entry=GetEntry(weapon.Id);if(entry==null){entry=weaponStatus.Add("AWAIT INIT",weapon.Id);entry.Element.DimAlignment=DimAlignments.Width;entry.Element.ParentAlignment=ParentAlignments.Left;}ProjectileDefinitionBase projectileDef=ProjectileDefinitionManager.GetDefinition(weapon.Magazines.SelectedAmmoId);string targetStatus="";if(weapon is SorterTurretLogic){SorterTurretLogic turret=weapon as SorterTurretLogic;if(turret.AimPoint!=Vector3D.MaxValue)targetStatus=(turret.IsTargetAligned?"":"ALIGN")+(turret.IsTargetInRange?"":" RANGE");else targetStatus="NO TARGET";}targetStatus+=weapon.HasLoS?"":" LOS";string ammoStatus=$"{weapon.Magazines.ShotsInMag}/{projectileDef?.Ungrouped.ShotsPerMagazine}";if(weapon.Magazines.NextReloadTime!=weapon.Definition.Loading.ReloadTime)ammoStatus+=$" {Math.Round(weapon.Magazines.NextReloadTime,1)}";if(weapon.Definition.Loading.DelayUntilFire>0)ammoStatus+=$" (Del{Math.Round(weapon.delayCounter,1)}s)";entry.Element.Text=$"{weapon.Id}: [{ammoStatus}] {targetStatus}";}private ListBoxEntry<uint>GetEntry(uint id){foreach(var value in weaponStatus.EntryList)if(value.AssocMember==id)return value;return null;}public void UpdateWeaponText(List<SorterWeaponLogic>weapons){foreach(var weaponTextId in weaponStatus.EntryList.ToArray()){bool shouldRemove=true;foreach(var weapon in weapons){if(weaponTextId.AssocMember==weapon.Id){shouldRemove=!weapon.SorterWep.ShowInTerminal;break;}}if(shouldRemove)weaponStatus.Remove(weaponTextId);}int i=0;foreach(var weapon in weapons){if(i>14)break;UpdateWeaponText(weapon);i++;}}public void ClearWeaponText(){weaponStatus.ClearEntries();}}}﻿using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Text;using VRage.Game.ModAPI;using VRage.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public class CommandHandler{public static CommandHandler I;private Dictionary<string,Command>commands=new Dictionary<string,Command>(){["help"]=new Command("HeartMod","Displays command help.",(message)=>I.ShowHelp()),["debug.fillammo"]=new Command("HeartMod.Debug","Fills all magazines on your current grid.",(message)=>I.FillGridWeapons()),["debug.reloadammo"]=new Command("HeartMod.Debug","Forces all weapons on your current grid to reload.",(message)=>I.ReloadGridWeapons()),["debug.reloaddefs"]=new Command("HeartMod.Debug","Clears and refreshes all weapon definitions.",(message)=>{HeartLoad.ResetDefinitions();MyAPIGateway.Utilities.ShowMessage("[OCF]","All definitions cleared. Good luck fixing the bug!");}),};private void ShowHelp(){StringBuilder helpBuilder=new StringBuilder();List<string>modNames=new List<string>();foreach(var command in commands.Values)if(!modNames.Contains(command.modName))modNames.Add(command.modName);MyAPIGateway.Utilities.ShowMessage("Orrery Combat Framework Help","");foreach(var modName in modNames){foreach(var command in commands)if(command.Value.modName==modName)helpBuilder.Append($"\n{{/ocf {command.Key}}}: "+command.Value.helpText);MyAPIGateway.Utilities.ShowMessage($"[{modName}]",helpBuilder+"\n");helpBuilder.Clear();}}private void FillGridWeapons(){if(MyAPIGateway.Utilities.IsDedicated)return;if(MyAPIGateway.Session.Player.PromoteLevel<MyPromoteLevel.SpaceMaster){MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]",$"You need a minimum rank of Space Master to run this command!\nlook at this nerd trying to cheat");return;}IMyEntity entity=MyAPIGateway.Session.Player.Controller.ControlledEntity.Entity;if(entity is IMyCubeBlock){int ct=0;IMyCubeGrid grid=((IMyCubeBlock)entity).CubeGrid;foreach(var weapon in WeaponManager.I.GridWeapons[grid]){weapon.Magazines.MagazinesLoaded=weapon.Definition.Loading.MagazinesToLoad;weapon.Magazines.ShotsInMag=ProjectileDefinitionManager.GetDefinition(weapon.Magazines.SelectedAmmoId).Ungrouped.ShotsPerMagazine;ct++;}MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]",$"Filled {ct} weapons.");}else{MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]","No grid found!");}}private void ReloadGridWeapons(){if(MyAPIGateway.Utilities.IsDedicated)return;if(MyAPIGateway.Session.Player.PromoteLevel<MyPromoteLevel.SpaceMaster){MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]",$"You need a minimum rank of Space Master to run this command!\nlook at this nerd trying to cheat");return;}IMyEntity entity=MyAPIGateway.Session.Player.Controller.ControlledEntity.Entity;if(entity is IMyCubeBlock){int ct=0;IMyCubeGrid grid=((IMyCubeBlock)entity).CubeGrid;foreach(var weapon in WeaponManager.I.GridWeapons[grid]){weapon.Magazines.EmptyMagazines(true);ct++;}MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]",$"Force-reloaded {ct} weapons.");}else{MyAPIGateway.Utilities.ShowMessage($"[HeartMod.Debug]","No grid found!");}}public void Init(){I?.Close();I=this;MyAPIGateway.Utilities.MessageEnteredSender+=Command_MessageEnteredSender;MyAPIGateway.Utilities.ShowMessage("[OCF]","Chat commands registered - run \"/ocf help\" for help.");}private void Command_MessageEnteredSender(ulong sender,string messageText,ref bool sendToOthers){if(messageText.Length==0||!messageText.ToLower().StartsWith("/ocf"))return;sendToOthers=false;string[]parts=messageText.Substring(5).Split(' ');if(commands.ContainsKey(parts[0].ToLower()))commands[parts[0].ToLower()].action.Invoke(parts);else MyAPIGateway.Utilities.ShowMessage("[OCF]",$"Unrecognized command \"{messageText}\" ({sender})");}public void Close(){MyAPIGateway.Utilities.MessageEnteredSender-=Command_MessageEnteredSender;I=null;}public static void AddCommand(string command,string helpText,Action<string[]>action,string modName="HeartMod"){if(I==null)return;if(I.commands.ContainsKey(command)){SoftHandle.RaiseException("Attempted to add duplicate command "+command+" from ["+modName+"]",callingType:typeof(CommandHandler));return;}I.commands.Add(command,new Command(modName,helpText,action));HeartLog.Log($"Registered new chat command \"/{command}\" from [{modName}]");}private class Command{public string modName;public string helpText;public Action<string[]>action;public Command(string modName,string helpText,Action<string[]>action){this.modName=modName;this.helpText=helpText;this.action=action;}}}}﻿using Sandbox.ModAPI;using System.Collections.Generic;using System.Linq;using VRage.Game;using VRage.Game.Components;using VRage.Utils;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Utility{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]public class GlobalEffects:MySessionComponentBase{const float TickRate=1/60f;internal static GlobalEffects I;List<LineFade>TrailFade=new List<LineFade>();public static void AddLine(Vector3D start,Vector3D end,float fadeTime,float width,Vector4 color,MyStringId texture){I?.TrailFade.Add(new LineFade(start,end,fadeTime,width,color,texture));}public override void LoadData(){I=this;}protected override void UnloadData(){I=null;}public override void UpdateAfterSimulation(){}public override void Draw(){UpdateTrailFade(TickRate);}private void UpdateTrailFade(float delta){foreach(var lineFade in TrailFade.ToList()){BoundingSphereD sphere=new BoundingSphereD(lineFade.Start,lineFade.Length);if(MyAPIGateway.Session.Camera?.IsInFrustum(ref sphere)??false){float lifetimePct=lineFade.RemainingTime/lineFade.FadeTime;Vector4 fadedColor=lineFade.Color*(lineFade.FadeTime==0?1:lifetimePct);MySimpleObjectDraw.DrawLine(lineFade.Start,lineFade.End,lineFade.Texture,ref fadedColor,lineFade.Width);}if(!HeartData.I.IsPaused)lineFade.RemainingTime-=delta;if(lineFade.RemainingTime<=0)TrailFade.Remove(lineFade);}}internal class LineFade{public Vector3D Start;public Vector3D End;public float RemainingTime;public float FadeTime;public double Length;public Vector4 Color;public float Width;public MyStringId Texture;public LineFade(Vector3D start,Vector3D end,float fadeTime,float width,Vector4 color,MyStringId texture){Start=start;End=end;FadeTime=fadeTime;RemainingTime=fadeTime;Length=Vector3D.Distance(Start,End);Color=color;Width=width;Texture=texture;}}}}﻿using Sandbox.Definitions;using System.Collections.Generic;using VRage.Game;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public class GuiBlockCategoryHelper{MyGuiBlockCategoryDefinition category;public GuiBlockCategoryHelper(string Name,string Id){category=new MyGuiBlockCategoryDefinition{Id=new MyDefinitionId(typeof(MyObjectBuilder_GuiBlockCategoryDefinition),Id),Name=Name,DisplayNameString=Name,ItemIds=new HashSet<string>(),IsBlockCategory=true,};MyDefinitionManager.Static.GetCategories().Add(Name,category);}public void AddBlock(string subtypeId){if(!category.ItemIds.Contains(subtypeId))category.ItemIds.Add(subtypeId);}}}﻿using ParallelTasks;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.IO;using System.Text;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.Utils;namespace Heart_Module.Data.Scripts.HeartModule.Utility{[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate,priority:int.MaxValue)]public class Log:MySessionComponentBase{private static Log instance;private static Handler handler;private static bool unloaded=false;public static readonly string FILE=GenerateTimestampedFileName();private const int DEFAULT_TIME_INFO=3000;private const int DEFAULT_TIME_ERROR=10000;private static string GenerateTimestampedFileName(){string timestamp=DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");return$"[{timestamp}]-Heart_Debug.log";}public const string PRINT_ERROR="<err>";public const string PRINT_MSG="<msg>";public override void LoadData(){instance=this;EnsureHandlerCreated();handler.Init(this);}protected override void UnloadData(){instance=null;if(handler!=null&&handler.AutoClose){Unload();}}private void Unload(){try{if(unloaded)return;unloaded=true;handler?.Close();handler=null;}catch(Exception e){MyLog.Default.WriteLine($"Error in {ModContext.ModName} ({ModContext.ModId}): {e.Message}\n{e.StackTrace}");throw new ModCrashedException(e,ModContext);}}private static void EnsureHandlerCreated(){if(unloaded)throw new Exception("Digi.Log accessed after it was unloaded!");if(handler==null)handler=new Handler();}public static void Close(){instance?.Unload();}public static bool AutoClose{get{EnsureHandlerCreated();return handler.AutoClose;}set{EnsureHandlerCreated();handler.AutoClose=value;}}public static string ModName{get{EnsureHandlerCreated();return handler.ModName;}set{EnsureHandlerCreated();handler.ModName=value;}}public static ulong WorkshopId=>handler?.WorkshopId??0;public static void IncreaseIndent(){EnsureHandlerCreated();handler.IncreaseIndent();}public static void DecreaseIndent(){EnsureHandlerCreated();handler.DecreaseIndent();}public static void ResetIndent(){EnsureHandlerCreated();handler.ResetIndent();}public static void Error(Exception exception,string printText=PRINT_ERROR,int printTimeMs=DEFAULT_TIME_ERROR){EnsureHandlerCreated();handler.Error(exception.ToString(),printText,printTimeMs);}public static void Error(string message,string printText=PRINT_ERROR,int printTimeMs=DEFAULT_TIME_ERROR){EnsureHandlerCreated();handler.Error(message,printText,printTimeMs);}public static void Info(string message,string printText=null,int printTimeMs=DEFAULT_TIME_INFO){EnsureHandlerCreated();handler.Info(message,printText,printTimeMs);}public static bool TaskHasErrors(Task task,string taskName){EnsureHandlerCreated();if(task.Exceptions!=null&&task.Exceptions.Length>0){foreach(var e in task.Exceptions){Error($"Error in {taskName} thread!\n{e}");}return true;}return false;}private class Handler{private Log sessionComp;private string modName=string.Empty;private TextWriter writer;private int indent=0;private string errorPrintText;private IMyHudNotification notifyInfo;private IMyHudNotification notifyError;private StringBuilder sb=new StringBuilder(64);private List<string>preInitMessages;public bool AutoClose{get;set;}=true;public ulong WorkshopId{get;private set;}=0;public string ModName{get{return modName;}set{modName=value;ComputeErrorPrintText();}}public Handler(){}public void Init(Log sessionComp){if(writer!=null)return;if(MyAPIGateway.Utilities==null){Error("MyAPIGateway.Utilities is NULL !");return;}this.sessionComp=sessionComp;if(string.IsNullOrWhiteSpace(ModName))ModName=sessionComp.ModContext.ModName;WorkshopId=GetWorkshopID(sessionComp.ModContext.ModId);writer=MyAPIGateway.Utilities.WriteFileInLocalStorage(FILE,typeof(Log));if(preInitMessages!=null){string warning=$"{modName} WARNING: there are log messages before the mod initialized!";Info($"--- pre-init messages ---");foreach(var msg in preInitMessages){Info(msg,warning);}Info("--- end pre-init messages ---");preInitMessages=null;}sb.Clear();sb.Append("Initialized");sb.Append("\nGameMode=").Append(MyAPIGateway.Session.SessionSettings.GameMode);sb.Append("\nOnlineMode=").Append(MyAPIGateway.Session.SessionSettings.OnlineMode);sb.Append("\nServer=").Append(MyAPIGateway.Session.IsServer);sb.Append("\nDS=").Append(MyAPIGateway.Utilities.IsDedicated);sb.Append("\nDefined=");
#if STABLE
sb.Append("STABLE, ");
#endif
#if UNOFFICIAL
sb.Append("UNOFFICIAL, ");
#endif
#if DEBUG
sb.Append("DEBUG, ");
#endif
#if BRANCH_STABLE
sb.Append("BRANCH_STABLE, ");
#endif
#if BRANCH_DEVELOP
sb.Append("BRANCH_DEVELOP, ");
#endif
#if BRANCH_UNKNOWN
sb.Append("BRANCH_UNKNOWN, ");
#endif
Info(sb.ToString());sb.Clear();}public void Close(){if(writer!=null){Info("Unloaded.");writer.Flush();writer.Close();writer=null;}}private void ComputeErrorPrintText(){errorPrintText=$"[ {modName} ERROR, report contents of: %AppData%/SpaceEngineers/Storage/{MyAPIGateway.Utilities.GamePaths.ModScopeName}/{FILE} ]";}public void IncreaseIndent(){indent++;}public void DecreaseIndent(){if(indent>0)indent--;}public void ResetIndent(){indent=0;}public void Error(string message,string printText=PRINT_ERROR,int printTime=DEFAULT_TIME_ERROR){MyLog.Default.WriteLineAndConsole(modName+" error/exception: "+message);LogMessage(message,"ERROR: ");if(printText!=null)ShowHudMessage(ref notifyError,message,printText,printTime,MyFontEnum.Red);}public void Info(string message,string printText=null,int printTime=DEFAULT_TIME_INFO){LogMessage(message);if(printText!=null)ShowHudMessage(ref notifyInfo,message,printText,printTime,MyFontEnum.White);}private void ShowHudMessage(ref IMyHudNotification notify,string message,string printText,int printTime,string font){if(printText==null)return;try{if(MyAPIGateway.Utilities!=null&&!MyAPIGateway.Utilities.IsDedicated){if(printText==PRINT_ERROR)printText=errorPrintText;else if(printText==PRINT_MSG)printText=$"[ {modName} ERROR: {message} ]";if(notify==null){notify=MyAPIGateway.Utilities.CreateNotification(printText,printTime,font);}else{notify.Text=printText;notify.AliveTime=printTime;notify.ResetAliveTime();}notify.Show();}}catch(Exception e){Info("ERROR: Could not send notification to local client: "+e);MyLog.Default.WriteLineAndConsole(modName+" logger error/exception: Could not send notification to local client: "+e);}}private void LogMessage(string message,string prefix=null){try{sb.Clear();sb.Append(DateTime.Now.ToString("[HH:mm:ss] "));if(writer==null)sb.Append("(PRE-INIT) ");for(int i=0;i<indent;i++)sb.Append(' ',4);if(prefix!=null)sb.Append(prefix);sb.Append(message);if(writer==null){if(preInitMessages==null)preInitMessages=new List<string>();preInitMessages.Add(sb.ToString());}else{writer.WriteLine(sb);writer.Flush();}sb.Clear();}catch(Exception e){MyLog.Default.WriteLineAndConsole($"{modName} had an error while logging message = '{message}'\nLogger error: {e.Message}\n{e.StackTrace}");}}private ulong GetWorkshopID(string modId){foreach(var mod in MyAPIGateway.Session.Mods){if(mod.Name==modId)return mod.PublishedFileId;}return 0;}}}}﻿using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public class PID{public double kIntegral=1;public double kDerivative=1;public double kProportional=1;private double p_error=0;private double p_integral=0;public PID(){}public PID(double kProportional,double kIntegral,double kDerivative){this.kIntegral=kIntegral;this.kDerivative=kDerivative;this.kProportional=kProportional;}public double Tick(double current,double desired,double bias,double delta){double error=desired-current;double integral=p_integral+error*delta;double derivative=(error-p_error)/delta;p_error=error;p_integral=integral;return kProportional*error+kIntegral*integral+kDerivative*derivative+bias;}}public class VectorPID{public double kIntegral{get{return x.kIntegral;}set{x.kIntegral=value;y.kIntegral=value;z.kIntegral=value;}}public double kDerivative{get{return x.kDerivative;}set{x.kDerivative=value;y.kDerivative=value;z.kDerivative=value;}}public double kProportional{get{return x.kProportional;}set{x.kProportional=value;y.kProportional=value;z.kProportional=value;}}private PID x=new PID();private PID y=new PID();private PID z=new PID();public VectorPID(double kProportional,double kIntegral,double kDerivative){this.kIntegral=kIntegral;this.kDerivative=kDerivative;this.kProportional=kProportional;}public Vector3D Tick(Vector3D current,Vector3D desired,Vector3D bias,double delta){return new Vector3D(x.Tick(current.X,desired.X,bias.X,delta),y.Tick(current.Y,desired.Y,bias.Y,delta),z.Tick(current.Z,desired.Z,bias.Z,delta));}}}﻿using System;using System.Collections.Generic;using System.Linq;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public class PriorityQueue<TElement,TKey>{private SortedDictionary<TKey,Queue<TElement>>dictionary=new SortedDictionary<TKey,Queue<TElement>>();private Func<TElement,TKey>selector;public PriorityQueue(Func<TElement,TKey>selector){this.selector=selector;}public bool IsEmpty=>dictionary.Count==0;public int Count=>dictionary.Count;public void Enqueue(TElement item){TKey key=selector(item);Queue<TElement>queue;if(!dictionary.TryGetValue(key,out queue)){queue=new Queue<TElement>();dictionary.Add(key,queue);}queue.Enqueue(item);}public TElement Dequeue(){if(dictionary.Count==0)throw new Exception("No items to Dequeue:");var key=dictionary.Keys.First();var queue=dictionary[key];var output=queue.Dequeue();if(queue.Count==0)dictionary.Remove(key);return output;}}}﻿using System.Collections.Generic;using System.Linq;using VRage.Game.Entity;using VRage.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public class SubpartManager{Dictionary<IMyEntity,Dictionary<string,MyEntitySubpart>>CachedSubparts=new Dictionary<IMyEntity,Dictionary<string,MyEntitySubpart>>();public MyEntitySubpart GetSubpart(IMyEntity entity,string name){if(entity==null)return null;if(!CachedSubparts.ContainsKey(entity))CachedSubparts.Add(entity,new Dictionary<string,MyEntitySubpart>());if(!CachedSubparts[entity].ContainsKey(name)){MyEntitySubpart subpart;entity.TryGetSubpart(name,out subpart);if(subpart!=null)CachedSubparts[entity].Add(name,subpart);else return null;}if(CachedSubparts[entity][name]==null){MyEntitySubpart subpart=null;entity.TryGetSubpart(name,out subpart);if(CachedSubparts[entity][name]==null){CachedSubparts[entity].Remove(name);return null;}else CachedSubparts[entity][name]=subpart;}return CachedSubparts[entity][name];}public MyEntitySubpart RecursiveGetSubpart(IMyEntity entity,string name){if(entity==null)return null;MyEntitySubpart desiredSubpart=GetSubpart(entity,name);if(desiredSubpart==null)foreach(var subpart in((MyEntity)entity).Subparts.Values)return RecursiveGetSubpart(subpart,name);return desiredSubpart;}public string[]GetAllSubparts(IMyEntity entity){if(entity==null)return new string[0];return((MyEntity)entity).Subparts.Keys.ToArray();}public void LocalRotateSubpart(MyEntitySubpart subpart,Matrix matrix){Matrix refMatrix=matrix*subpart.PositionComp.LocalMatrixRef;refMatrix.Translation=subpart.PositionComp.LocalMatrixRef.Translation;subpart.PositionComp.SetLocalMatrix(ref refMatrix);}public void LocalRotateSubpartAbs(MyEntitySubpart subpart,Matrix matrix){matrix.Translation=subpart.PositionComp.LocalMatrixRef.Translation;subpart.PositionComp.SetLocalMatrix(ref matrix);}}}﻿using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using System;using VRage.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Utility{public static class TargetingHelper{public static Vector3D?InterceptionPoint(Vector3D startPos,Vector3D startVel,Projectile target,int projectileDef){ProjectileDefinitionBase def=ProjectileDefinitionManager.GetDefinition(projectileDef);if(def==null||target==null)return null;if(def.PhysicalProjectile.IsHitscan)return target.Position-(target.InheritedVelocity+target.Direction*target.Velocity)/60f;return InterceptionPoint(startPos,startVel,target.Position,target.InheritedVelocity+target.Direction*target.Velocity,def.PhysicalProjectile.Velocity);}public static Vector3D?InterceptionPoint(Vector3D startPos,Vector3D startVel,IMyEntity target,int projectileDef){ProjectileDefinitionBase def=ProjectileDefinitionManager.GetDefinition(projectileDef);if(def==null||target?.Physics==null)return null;if(def.PhysicalProjectile.IsHitscan)return target.WorldAABB.Center-target.Physics.LinearVelocity/60f;return InterceptionPoint(startPos,startVel,target.WorldAABB.Center,target.Physics.LinearVelocity,def.PhysicalProjectile.Velocity);}public static Vector3D?InterceptionPoint(Vector3D startPos,Vector3D startVel,Vector3D targetPos,Vector3D targetVel,float projectileSpeed){Vector3D relativeVelocity=targetVel-startVel;try{double t=TimeOfInterception(targetPos-startPos,relativeVelocity,projectileSpeed);if(t==-1)return null;Vector3D interceptionPoint=targetPos+relativeVelocity*t;return interceptionPoint;}catch{return null;}}public static double TimeOfInterception(Vector3 relativePosition,Vector3 relativeVelocity,float projectileSpeed){double velocitySquared=relativeVelocity.LengthSquared();if(velocitySquared<double.Epsilon)return 0;double a=velocitySquared-projectileSpeed*projectileSpeed;if(Math.Abs(a)<double.Epsilon){double t=-relativePosition.LengthSquared()/(2*Vector3D.Dot(relativeVelocity,relativePosition));return t>0?t:-1;}double b=2*Vector3D.Dot(relativeVelocity,relativePosition);double c=relativePosition.LengthSquared();double determinant=b*b-4*a*c;if(determinant>0){double t1=(-b+Math.Sqrt(determinant))/(2*a);double t2=(-b-Math.Sqrt(determinant))/(2*a);if(t1>0){if(t2>0)return t1<t2?t1:t2;return t1;}return t2>0?t2:-1;}else if(determinant<0)return-1;double solution=-b/(2*a);return solution>0?solution:-1;}}}using Heart_Module.Data.Scripts.HeartModule;using Heart_Module.Data.Scripts.HeartModule.Network;using Heart_Module.Data.Scripts.HeartModule.Weapons;using ProtoBuf;using Sandbox.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Weapons{[ProtoContract(UseProtoMembersOnly=true)]public class Heart_Settings:PacketBase{public void Sync(Vector3D turretPosition){if(MyAPIGateway.Session.IsServer){HeartData.I.Net.SendToEveryoneInSync(this,turretPosition);}else{HeartData.I.Net.SendToServer(this);}}public static void RequestSync(long weaponEntityId){if(MyAPIGateway.Session.IsServer)return;HeartData.I.Net.SendToServer(new Heart_Settings(){IsSyncRequest=true,WeaponEntityId=weaponEntityId});}public override void Received(ulong SenderSteamId){var weapon=WeaponManager.I.GetWeapon(WeaponEntityId);if(weapon==null){return;}if(IsSyncRequest){weapon.Settings.Sync(weapon.SorterWep.GetPosition());return;}weapon.Settings=this;weapon.Magazines.SelectedAmmoIndex=AmmoLoadedIdx;if(MyAPIGateway.Session.IsServer)weapon.Settings.Sync(weapon.SorterWep.GetPosition());}[ProtoMember(1)]internal short ShootStateContainer;[ProtoMember(2)]public int AmmoLoadedIdx;[ProtoMember(3)]public float AiRange;[ProtoMember(4)]internal int TargetStateContainer;[ProtoMember(5)]public long ControlTypeState;[ProtoMember(6)]public long WeaponEntityId;public bool ShootState{get{return ExpandValue(ShootStateContainer,ShootStates.Shoot);}set{CompressValue(ref ShootStateContainer,ShootStates.Shoot,value);}}public bool MouseShootState{get{return ExpandValue(ShootStateContainer,ShootStates.MouseShoot);}set{CompressValue(ref ShootStateContainer,ShootStates.MouseShoot,value);}}public bool HudBarrelIndicatorState{get{return ExpandValue(ShootStateContainer,ShootStates.HudBarrelIndicator);}set{CompressValue(ref ShootStateContainer,ShootStates.HudBarrelIndicator,value);}}public bool IsSyncRequest{get{return ExpandValue(ShootStateContainer,ShootStates.IsSyncRequest);}set{CompressValue(ref ShootStateContainer,ShootStates.IsSyncRequest,value);}}public bool TargetGridsState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetGrids);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetGrids,value);}}public bool TargetSmallGridsState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetSmallGrids);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetSmallGrids,value);}}public bool TargetLargeGridsState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetLargeGrids);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetLargeGrids,value);}}public bool TargetCharactersState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetCharacters);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetCharacters,value);}}public bool TargetProjectilesState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetProjectiles);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetProjectiles,value);}}public bool TargetEnemiesState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetEnemies);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetEnemies,value);}}public bool TargetFriendliesState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetFriendlies);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetFriendlies,value);}}public bool TargetNeutralsState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetNeutrals);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetNeutrals,value);}}public bool TargetUnownedState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.TargetUnowned);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.TargetUnowned,value);}}public bool PreferUniqueTargetState{get{return ExpandValue(TargetStateContainer,TargetingSettingStates.PreferUniqueTarget);}set{CompressValue(ref TargetStateContainer,TargetingSettingStates.PreferUniqueTarget,value);}}public override string ToString(){return$"ShootState: {ShootState}\nAmmoLoadedIdx: {AmmoLoadedIdx}";}private bool ExpandValue(int bitwise,int enumValue){return(bitwise&enumValue)==enumValue;}private void CompressValue(ref int bitwise,int enumValue,bool state){if(state)bitwise|=enumValue;else bitwise&=~enumValue;}private bool ExpandValue(short bitwise,int enumValue){return(bitwise&enumValue)==enumValue;}private void CompressValue(ref short bitwise,int enumValue,bool state){if(state)bitwise|=(short)enumValue;else bitwise&=(short)~enumValue;}private static class TargetingSettingStates{public const int TargetGrids=2;public const int TargetLargeGrids=4;public const int TargetSmallGrids=8;public const int TargetProjectiles=16;public const int TargetCharacters=32;public const int TargetFriendlies=64;public const int TargetNeutrals=128;public const int TargetEnemies=256;public const int TargetUnowned=512;public const int PreferUniqueTarget=1024;}private static class ShootStates{public const int Shoot=1;public const int MouseShoot=2;public const int HudBarrelIndicator=4;public const int IsSyncRequest=8;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.Game.Entities;using Sandbox.ModAPI;using System;using VRage.Game.Entity;using VRage.Network;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons{public partial class SorterTurretLogic:SorterWeaponLogic,IMyEventProxy{internal float Azimuth=0;internal float Elevation=0;internal double DesiredAzimuth=0;internal double DesiredElevation=0;MyEntity3DSoundEmitter TurretRotationSound;private const float deltaTick=1/60f;public bool IsTargetAligned{get;private set;}=false;public bool IsTargetInRange{get;private set;}=false;public Vector3D AimPoint{get;private set;}=Vector3D.MaxValue;public SorterTurretLogic(IMyConveyorSorter sorterWeapon,WeaponDefinitionBase definition,uint id):base(sorterWeapon,definition,id){TurretRotationSound=new MyEntity3DSoundEmitter(null);}public override void UpdateAfterSimulation(){if(!SorterWep.IsWorking)return;if(MyAPIGateway.Session.IsServer)UpdateTargeting();base.UpdateAfterSimulation();}public override void TryShoot(){AutoShoot=Definition.Targeting.CanAutoShoot&&IsTargetAligned&&IsTargetInRange;base.TryShoot();}public override MatrixD CalcMuzzleMatrix(int id,bool local=false){if(Definition.Assignments.Muzzles.Length==0||!MuzzleDummies.ContainsKey(Definition.Assignments.Muzzles[id]))return SorterWep.WorldMatrix;try{MyEntitySubpart azSubpart=SubpartManager.GetSubpart((MyEntity)SorterWep,Definition.Assignments.AzimuthSubpart);MyEntitySubpart evSubpart=SubpartManager.GetSubpart(azSubpart,Definition.Assignments.ElevationSubpart);MatrixD partMatrix=evSubpart.WorldMatrix;Matrix muzzleMatrix=MuzzleDummies[Definition.Assignments.Muzzles[id]].Matrix;if(local){return muzzleMatrix*evSubpart.PositionComp.LocalMatrixRef*azSubpart.PositionComp.LocalMatrixRef;}if(muzzleMatrix!=null)return muzzleMatrix*partMatrix;}catch{}return MatrixD.Identity;}public void UpdateAzimuthElevation(Vector3D aimpoint){if(aimpoint==Vector3D.MaxValue){DesiredAzimuth=Definition.Hardpoint.HomeAzimuth;DesiredElevation=-Definition.Hardpoint.HomeElevation;return;}Vector3D vecToTarget=aimpoint-MuzzleMatrix.Translation;vecToTarget=Vector3D.Rotate(vecToTarget.Normalized(),-MatrixD.Invert(SorterWep.WorldMatrix));DesiredAzimuth=GetNewAzimuthAngle(vecToTarget);DesiredElevation=GetNewElevationAngle(vecToTarget);}const float tolerance=0.1f;public void UpdateTurretSubparts(float delta){if(!Definition.Hardpoint.ControlRotation)return;if(Azimuth==DesiredAzimuth&&Elevation==DesiredElevation)return;if(Math.Abs(Azimuth-DesiredAzimuth)>tolerance||Math.Abs(Elevation-DesiredElevation)>tolerance){if(!TurretRotationSound.IsPlaying){TurretRotationSound.PlaySound(Definition.Audio.RotationSoundPair,true);}}else if(TurretRotationSound.IsPlaying){TurretRotationSound.StopSound(false);}MyEntitySubpart azimuth=SubpartManager.GetSubpart(SorterWep,Definition.Assignments.AzimuthSubpart);if(azimuth==null){SoftHandle.RaiseException($"Azimuth subpart null on \"{SorterWep?.CustomName}\"");return;}MyEntitySubpart elevation=SubpartManager.GetSubpart(azimuth,Definition.Assignments.ElevationSubpart);if(elevation==null){SoftHandle.RaiseException($"Elevation subpart null on \"{SorterWep?.CustomName}\"");return;}SubpartManager.LocalRotateSubpartAbs(azimuth,GetAzimuthMatrix(delta));SubpartManager.LocalRotateSubpartAbs(elevation,GetElevationMatrix(delta));}private double GetNewAzimuthAngle(Vector3D targetDirection){double desiredAzimuth=Math.Atan2(targetDirection.X,targetDirection.Z);if(desiredAzimuth==double.NaN)desiredAzimuth=Math.PI;return desiredAzimuth;}private Matrix GetAzimuthMatrix(float delta){var _limitedAzimuth=HeartUtils.LimitRotationSpeed(Azimuth,DesiredAzimuth,Definition.Hardpoint.AzimuthRate*delta);if(!Definition.Hardpoint.CanRotateFull)Azimuth=(float)HeartUtils.Clamp(_limitedAzimuth,Definition.Hardpoint.MinAzimuth,Definition.Hardpoint.MaxAzimuth);else Azimuth=(float)HeartUtils.NormalizeAngle(_limitedAzimuth);return Matrix.CreateFromYawPitchRoll(Azimuth,0,0);}private double GetNewElevationAngle(Vector3D targetDirection){double desiredElevation=Math.Asin(-targetDirection.Y);if(desiredElevation==double.NaN)desiredElevation=Math.PI;return desiredElevation;}private Matrix GetElevationMatrix(float delta){var _limitedElevation=HeartUtils.LimitRotationSpeed(Elevation,DesiredElevation,Definition.Hardpoint.ElevationRate*delta);if(!Definition.Hardpoint.CanElevateFull)Elevation=(float)HeartUtils.Clamp(_limitedElevation,Definition.Hardpoint.MinElevation,Definition.Hardpoint.MaxElevation);else Elevation=(float)HeartUtils.NormalizeAngle(_limitedElevation);return Matrix.CreateFromYawPitchRoll(0,Elevation,0);}public void SetFacing(float azimuth,float elevation){DesiredAzimuth=azimuth;DesiredElevation=elevation;}private Vector2D GetAngleToTarget(Vector3D targetPosition){Vector3D vecToTarget=targetPosition-MuzzleMatrix.Translation;vecToTarget=Vector3D.Rotate(vecToTarget.Normalized(),MatrixD.Invert(SorterWep.WorldMatrix));double desiredAzimuth=Math.Atan2(vecToTarget.X,vecToTarget.Z);if(desiredAzimuth==double.NaN)desiredAzimuth=Math.PI;double desiredElevation=Math.Asin(-vecToTarget.Y);if(desiredElevation==double.NaN)desiredElevation=Math.PI;return new Vector2D(desiredAzimuth,desiredElevation);}private bool CanAimAtTarget(Vector3D targetPosition){if(Vector3D.DistanceSquared(MuzzleMatrix.Translation,targetPosition)>AiRange*AiRange)return false;Vector2D neededAngle=GetAngleToTarget(targetPosition);neededAngle.X=HeartUtils.NormalizeAngle(neededAngle.X-Math.PI);neededAngle.Y=-HeartUtils.NormalizeAngle(neededAngle.Y,Math.PI/2);bool canAimAzimuth=Definition.Hardpoint.CanRotateFull;if(!canAimAzimuth&&!(neededAngle.X<Definition.Hardpoint.MaxAzimuth&&neededAngle.X>Definition.Hardpoint.MinAzimuth))return false;bool canAimElevation=Definition.Hardpoint.CanElevateFull;if(!canAimElevation&&!(neededAngle.Y<Definition.Hardpoint.MaxElevation&&neededAngle.Y>Definition.Hardpoint.MinElevation))return false;return true;}public void IncreaseAIRange(){AiRange=Math.Min(AiRange+100,1000);}public void DecreaseAIRange(){AiRange=Math.Max(AiRange-100,0);}internal override void LoadDefaultSettings(){base.LoadDefaultSettings();if(MyAPIGateway.Session.IsServer){AiRange=Definition.Targeting.MaxTargetingRange;Settings.TargetProjectilesState=true;Settings.TargetCharactersState=true;Settings.TargetGridsState=true;Settings.TargetLargeGridsState=true;Settings.TargetSmallGridsState=true;Settings.TargetEnemiesState=(Definition.Targeting.DefaultIFF&IFF_Enum.TargetEnemies)==IFF_Enum.TargetEnemies;Settings.TargetFriendliesState=(Definition.Targeting.DefaultIFF&IFF_Enum.TargetFriendlies)==IFF_Enum.TargetFriendlies;Settings.TargetNeutralsState=(Definition.Targeting.DefaultIFF&IFF_Enum.TargetNeutrals)==IFF_Enum.TargetNeutrals;Settings.TargetUnownedState=false;Settings.PreferUniqueTargetState=(Definition.Targeting.DefaultIFF&IFF_Enum.TargetUnique)==IFF_Enum.TargetUnique;}}internal override bool LoadSettings(){if(SorterWep.Storage==null){LoadDefaultSettings();return false;}string rawData;if(!SorterWep.Storage.TryGetValue(HeartSettingsGUID,out rawData)){LoadDefaultSettings();return false;}bool baseRet=base.LoadSettings();try{var loadedSettings=MyAPIGateway.Utilities.SerializeFromBinary<Heart_Settings>(Convert.FromBase64String(rawData));if(loadedSettings!=null){Settings.AiRange=loadedSettings.AiRange;Settings.PreferUniqueTargetState=loadedSettings.PreferUniqueTargetState;Settings.TargetGridsState=loadedSettings.TargetGridsState;Settings.TargetProjectilesState=loadedSettings.TargetProjectilesState;Settings.TargetCharactersState=loadedSettings.TargetCharactersState;Settings.TargetLargeGridsState=loadedSettings.TargetLargeGridsState;Settings.TargetSmallGridsState=loadedSettings.TargetSmallGridsState;Settings.TargetFriendliesState=loadedSettings.TargetFriendliesState;Settings.TargetNeutralsState=loadedSettings.TargetNeutralsState;Settings.TargetEnemiesState=loadedSettings.TargetEnemiesState;Settings.TargetUnownedState=loadedSettings.TargetUnownedState;return baseRet;}}catch{}TargetProjectilesState&=(Definition.Targeting.AllowedTargetTypes&TargetType_Enum.TargetProjectiles)==TargetType_Enum.TargetProjectiles;TargetCharactersState&=(Definition.Targeting.AllowedTargetTypes&TargetType_Enum.TargetCharacters)==TargetType_Enum.TargetCharacters;TargetGridsState&=(Definition.Targeting.AllowedTargetTypes&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids;TargetLargeGridsState&=(Definition.Targeting.AllowedTargetTypes&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids;TargetSmallGridsState&=(Definition.Targeting.AllowedTargetTypes&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids;return false;}public float AiRange{get{return Settings.AiRange;}set{Settings.AiRange=value;Settings.Sync(SorterWep.GetPosition());}}public bool PreferUniqueTargetsState{get{return Settings.PreferUniqueTargetState;}set{Settings.PreferUniqueTargetState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetGridsState{get{return Settings.TargetGridsState;}set{Settings.TargetGridsState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetProjectilesState{get{return Settings.TargetProjectilesState;}set{Settings.TargetProjectilesState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetCharactersState{get{return Settings.TargetCharactersState;}set{Settings.TargetCharactersState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetLargeGridsState{get{return Settings.TargetLargeGridsState;}set{Settings.TargetLargeGridsState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetSmallGridsState{get{return Settings.TargetSmallGridsState;}set{Settings.TargetSmallGridsState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetFriendliesState{get{return Settings.TargetFriendliesState;}set{Settings.TargetFriendliesState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetNeutralsState{get{return Settings.TargetNeutralsState;}set{Settings.TargetNeutralsState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetEnemiesState{get{return Settings.TargetEnemiesState;}set{Settings.TargetEnemiesState=value;Settings.Sync(SorterWep.GetPosition());}}public bool TargetUnownedState{get{return Settings.TargetUnownedState;}set{Settings.TargetUnownedState=value;Settings.Sync(SorterWep.GetPosition());}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Utility;using Sandbox.ModAPI;using VRage.Game;using VRage.Game.ModAPI;using VRage.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Weapons{partial class SorterTurretLogic{public float TargetAge=0;public IMyEntity TargetEntity{get;private set;}=null;public Projectile TargetProjectile{get;private set;}=null;public void UpdateTargeting(){MuzzleMatrix=CalcMuzzleMatrix(0);if(TargetProjectile!=null){AimPoint=TargetingHelper.InterceptionPoint(MuzzleMatrix.Translation,SorterWep.CubeGrid.LinearVelocity,TargetProjectile,0)??Vector3D.MaxValue;UpdateTargetState(AimPoint);}else if(TargetEntity!=null){AimPoint=TargetingHelper.InterceptionPoint(MuzzleMatrix.Translation,SorterWep.CubeGrid.LinearVelocity,TargetEntity,0)??Vector3D.MaxValue;UpdateTargetState(AimPoint);}else ResetTargetingState();if(!HasValidTarget()){TargetProjectile=null;TargetEntity=null;ResetTargetingState();}UpdateAzimuthElevation(AimPoint);TargetAge+=1/60f;}public void SetTarget(object target){TargetEntity=null;TargetProjectile=null;TargetAge=0;if(target is IMyEntity)TargetEntity=(IMyEntity)target;else if(target is Projectile)TargetProjectile=(Projectile)target;}public bool HasValidTarget(){return(TargetEntity!=null||(TargetProjectile!=null&&!TargetProjectile.QueuedDispose))&&IsTargetInRange&&(Definition.Targeting.RetargetTime==0||TargetAge>Definition.Targeting.RetargetTime);}private void ResetTargetingState(){IsTargetAligned=false;IsTargetInRange=false;AutoShoot=false;AimPoint=Vector3D.MaxValue;}private void UpdateTargetState(Vector3D aimPoint){double angle=Vector3D.Angle(MuzzleMatrix.Forward,(aimPoint-MuzzleMatrix.Translation).Normalized());IsTargetAligned=angle<Definition.Targeting.AimTolerance;double range=Vector3D.Distance(MuzzleMatrix.Translation,aimPoint);IsTargetInRange=range<Definition.Targeting.MaxTargetingRange&&range>Definition.Targeting.MinTargetingRange;}public bool ShouldConsiderTarget(IMyCubeGrid targetGrid){if(!TargetGridsState||targetGrid==null)return false;if(Definition.Targeting.RetargetTime!=0&&!HasValidTarget()&&targetGrid==TargetEntity)return false;switch(targetGrid.GridSizeEnum){case MyCubeSize.Large:if(!TargetLargeGridsState)return false;break;case MyCubeSize.Small:if(!TargetSmallGridsState)return false;break;}if(!ShouldConsiderTarget(HeartUtils.GetRelationsBetweeenGrids(SorterWep.CubeGrid,targetGrid)))return false;Vector3D?intercept=TargetingHelper.InterceptionPoint(MuzzleMatrix.Translation,SorterWep.CubeGrid.LinearVelocity,targetGrid,Magazines.SelectedAmmoId);return intercept!=null&&CanAimAtTarget(intercept.Value);}public bool ShouldConsiderTarget(IMyCharacter targetCharacter){if(!TargetCharactersState||targetCharacter==null)return false;if(Definition.Targeting.RetargetTime!=0&&!HasValidTarget()&&targetCharacter==TargetEntity)return false;if(!ShouldConsiderTarget(HeartUtils.GetRelationsBetweenGridAndPlayer(SorterWep.CubeGrid,targetCharacter.ControllerInfo?.ControllingIdentityId)))return false;Vector3D?intercept=TargetingHelper.InterceptionPoint(MuzzleMatrix.Translation,SorterWep.CubeGrid.LinearVelocity,targetCharacter,Magazines.SelectedAmmoId);return intercept!=null&&CanAimAtTarget(intercept.Value);}public bool ShouldConsiderTarget(Projectile targetProjectile){if(!TargetProjectilesState||targetProjectile==null||targetProjectile.Firer==SorterWep.EntityId)return false;if(Definition.Targeting.RetargetTime!=0&&!HasValidTarget()&&targetProjectile==TargetProjectile)return false;MyRelationsBetweenPlayerAndBlock relations=MyRelationsBetweenPlayerAndBlock.NoOwnership;IMyEntity entity=MyAPIGateway.Entities.GetEntityById(targetProjectile.Firer);if(entity is IMyCharacter)relations=HeartUtils.GetRelationsBetweenGridAndPlayer(SorterWep.CubeGrid,((IMyCharacter)entity).ControllerInfo?.ControllingIdentityId);else if(entity is IMyCubeBlock)relations=HeartUtils.GetRelationsBetweeenGrids(SorterWep.CubeGrid,((IMyCubeBlock)entity).CubeGrid);if(!ShouldConsiderTarget(relations))return false;Vector3D?intercept=TargetingHelper.InterceptionPoint(MuzzleMatrix.Translation,SorterWep.CubeGrid.LinearVelocity,targetProjectile,Magazines.SelectedAmmoId);return intercept!=null&&CanAimAtTarget(intercept.Value);}public bool ShouldConsiderTarget(MyRelationsBetweenPlayerAndBlock relations){switch(relations){case MyRelationsBetweenPlayerAndBlock.NoOwnership:if(!TargetUnownedState)return false;break;case MyRelationsBetweenPlayerAndBlock.Owner:case MyRelationsBetweenPlayerAndBlock.Friends:case MyRelationsBetweenPlayerAndBlock.FactionShare:if(!TargetFriendliesState)return false;break;case MyRelationsBetweenPlayerAndBlock.Enemies:if(!TargetEnemiesState)return false;break;case MyRelationsBetweenPlayerAndBlock.Neutral:if(!TargetNeutralsState)return false;break;}return true;}}}﻿using Heart_Module.Data.Scripts.HeartModule;using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Projectiles.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.ResourceSystem;using Heart_Module.Data.Scripts.HeartModule.Utility;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.Game;using Sandbox.Game.EntityComponents;using Sandbox.ModAPI;using System;using System.Collections.Generic;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.ModAPI;using VRage.Network;using VRage.ObjectBuilders;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding{public partial class SorterWeaponLogic:MyGameLogicComponent,IMyEventProxy{internal IMyConveyorSorter SorterWep;internal WeaponDefinitionBase Definition;public readonly Guid HeartSettingsGUID=new Guid("06edc546-3e42-41f3-bc72-1d640035fbf2");public const int HeartSettingsUpdateCount=60*1/10;public Heart_Settings Settings=new Heart_Settings();public WeaponLogic_Magazines Magazines;public Dictionary<string,IMyModelDummy>MuzzleDummies{get;set;}=new Dictionary<string,IMyModelDummy>();public SubpartManager SubpartManager=new SubpartManager();public MatrixD MuzzleMatrix{get;internal set;}=MatrixD.Identity;public bool HasLoS=false;public readonly uint Id=uint.MaxValue;private WeaponResourceSystem _resourceSystem;public SorterWeaponLogic(IMyConveyorSorter sorterWeapon,WeaponDefinitionBase definition,uint id){if(definition==null)return;sorterWeapon.GameLogic=this;Init(sorterWeapon.GetObjectBuilder());this.Definition=definition;Func<IMyInventory>getInventoryFunc=()=>sorterWeapon.GetInventory();Magazines=new WeaponLogic_Magazines(this,getInventoryFunc,AmmoComboBox);_resourceSystem=new WeaponResourceSystem(definition,this);Id=id;}public override void Init(MyObjectBuilder_EntityBase objectBuilder){NeedsUpdate=MyEntityUpdateEnum.BEFORE_NEXT_FRAME;}public override void UpdateOnceBeforeFrame(){SorterWep=(IMyConveyorSorter)Entity;Settings.WeaponEntityId=SorterWep.EntityId;if(SorterWep.CubeGrid?.Physics==null)return;NeedsUpdate=MyEntityUpdateEnum.EACH_FRAME;if(Definition.Assignments.HasMuzzleSubpart)((IMyEntity)SubpartManager.RecursiveGetSubpart(SorterWep,Definition.Assignments.MuzzleSubpart))?.Model?.GetDummies(MuzzleDummies);else SorterWep.Model.GetDummies(MuzzleDummies);SorterWep.SlimBlock.BlockGeneralDamageModifier=Definition.Assignments.DurabilityModifier;SorterWep.ResourceSink.SetRequiredInputByType(MyResourceDistributorComponent.ElectricityId,Definition.Hardpoint.IdlePower);LoadSettings();SaveSettings();}public override void UpdateAfterSimulation(){try{if(MarkedForClose||Id==uint.MaxValue)return;MuzzleMatrix=CalcMuzzleMatrix(0);Magazines.UpdateReload();HasLoS=HasLineOfSight();if(!SorterWep.IsWorking)return;TryShoot();}catch(Exception ex){SoftHandle.RaiseException(ex,typeof(SorterWeaponLogic));}}const float GridCheckRange=200;private bool HasLineOfSight(){if(!Definition.Hardpoint.LineOfSightCheck)return true;List<Vector3I>intersects=new List<Vector3I>();SorterWep.CubeGrid.RayCastCells(MuzzleMatrix.Translation,MuzzleMatrix.Translation+MuzzleMatrix.Forward*GridCheckRange,intersects);foreach(var intersect in intersects)if(SorterWep.CubeGrid.CubeExists(intersect)&&SorterWep.CubeGrid.GetCubeBlock(intersect)!=SorterWep.SlimBlock)return false;return true;}float lastShoot=0;internal bool AutoShoot=false;public int NextMuzzleIdx=0;public float delayCounter=0f;private readonly Random random=new Random();public virtual void TryShoot(){float modifiedRateOfFire=Definition.Loading.RateOfFire;if(Definition.Loading.RateOfFireVariance!=0){modifiedRateOfFire+=(float)((random.NextDouble()*2-1)*Definition.Loading.RateOfFireVariance);}if(lastShoot<60)lastShoot+=modifiedRateOfFire;if((ShootState||AutoShoot)&&Magazines.IsLoaded&&delayCounter>0){if(delayCounter==Definition.Loading.DelayUntilFire&&!string.IsNullOrEmpty(Definition.Audio.ShootSound))MyVisualScriptLogicProvider.PlaySingleSoundAtPosition(Definition.Audio.PreShootSound,SorterWep.GetPosition());delayCounter-=1/60f;}else if(!((ShootState||AutoShoot)&&Magazines.IsLoaded)&&delayCounter<=0&&Definition.Loading.DelayUntilFire>0){delayCounter=Definition.Loading.DelayUntilFire;}if((ShootState||AutoShoot)&&Magazines.IsLoaded&&lastShoot>=60&&delayCounter<=0&&HasLoS){if(Magazines.SelectedAmmoId==-1){SoftHandle.RaiseSyncException($"Invalid ammo type on weapon! Subtype: {SorterWep.BlockDefinition.SubtypeId} | AmmoId: {Magazines.SelectedAmmoId}");return;}if(_resourceSystem!=null&&_resourceSystem.CanShoot()){float accuracyVarianceMultiplier=ProjectileDefinitionManager.GetDefinition(Magazines.SelectedAmmoId).PhysicalProjectile.AccuracyVarianceMultiplier;float effectiveInaccuracy=Definition.Hardpoint.ShotInaccuracy*(accuracyVarianceMultiplier!=0?accuracyVarianceMultiplier:1);while(lastShoot>=60&&Magazines.ShotsInMag>0){ProjectileDefinitionBase ammoDef=ProjectileDefinitionManager.GetDefinition(Magazines.SelectedAmmoId);for(int i=0;i<Definition.Loading.BarrelsPerShot;i++){NextMuzzleIdx++;NextMuzzleIdx%=Definition.Assignments.Muzzles.Length;MatrixD muzzleMatrix=CalcMuzzleMatrix(NextMuzzleIdx);Vector3D muzzlePos=muzzleMatrix.Translation;for(int j=0;j<Definition.Loading.ProjectilesPerBarrel;j++){if(MyAPIGateway.Session.IsServer){SorterWep.CubeGrid.Physics?.ApplyImpulse(muzzleMatrix.Backward*ammoDef.Ungrouped.Recoil,muzzleMatrix.Translation);Projectile newProjectile=ProjectileManager.I.AddProjectile(Magazines.SelectedAmmoId,muzzlePos,RandomCone(muzzleMatrix.Forward,effectiveInaccuracy),SorterWep,!ammoDef.PhysicalProjectile.IsHitscan);if(newProjectile==null)return;if(newProjectile.Guidance!=null){if(this is SorterTurretLogic)newProjectile.Guidance.SetTarget(((SorterTurretLogic)this).TargetEntity);else newProjectile.Guidance.SetTarget(WeaponManagerAi.I.GetTargeting(SorterWep.CubeGrid)?.PrimaryGridTarget);}}else{if(ammoDef.PhysicalProjectile.IsHitscan)DrawHitscanBeam(ammoDef);}}lastShoot-=60f;if(!string.IsNullOrEmpty(Definition.Audio.ShootSound))MyVisualScriptLogicProvider.PlaySingleSoundAtPosition(Definition.Audio.ShootSound,muzzlePos);MuzzleFlash();Magazines.UseShot(MuzzleMatrix.Translation);if(lastShoot<60)break;}}_resourceSystem.ConsumeResources();}}}private void DrawHitscanBeam(ProjectileDefinitionBase beam){List<IHitInfo>intersects=new List<IHitInfo>();Vector3D pos=MuzzleMatrix.Translation;Vector3D end=MuzzleMatrix.Translation+MuzzleMatrix.Forward*beam.PhysicalProjectile.MaxTrajectory;MyAPIGateway.Physics.CastRay(pos,end,intersects);if(intersects.Count>0){Vector3D hitPos=intersects[0].Position;GlobalEffects.AddLine(pos,hitPos,beam.Visual.TrailFadeTime,beam.Visual.TrailWidth,beam.Visual.TrailColor,beam.Visual.TrailTexture);MatrixD matrix=MatrixD.CreateWorld(hitPos,(Vector3D)intersects[0].Normal,Vector3D.CalculatePerpendicularVector(intersects[0].Normal));MyParticleEffect hitEffect;if(MyParticlesManager.TryCreateParticleEffect(beam.Visual.ImpactParticle,ref matrix,ref hitPos,uint.MaxValue,out hitEffect)){if(hitEffect.Loop)hitEffect.Stop();}}else{GlobalEffects.AddLine(pos,end,beam.Visual.TrailFadeTime,beam.Visual.TrailWidth,beam.Visual.TrailColor,beam.Visual.TrailTexture);}}public void MuzzleFlash(bool increment=false){if(Definition.Visuals.HasShootParticle&&!HeartData.I.DegradedMode){MatrixD localMuzzleMatrix=CalcMuzzleMatrix(NextMuzzleIdx,true);MatrixD muzzleMatrix=CalcMuzzleMatrix(NextMuzzleIdx);Vector3D muzzlePos=muzzleMatrix.Translation;MyParticleEffect hitEffect;if(MyParticlesManager.TryCreateParticleEffect(Definition.Visuals.ShootParticle,ref localMuzzleMatrix,ref muzzlePos,SorterWep.Render.GetRenderObjectID(),out hitEffect)){if(hitEffect.Loop)hitEffect.Stop();}}}public virtual MatrixD CalcMuzzleMatrix(int id,bool local=false){if(Definition.Assignments.Muzzles.Length==0||!MuzzleDummies.ContainsKey(Definition.Assignments.Muzzles[id]))return SorterWep.WorldMatrix;MatrixD dummyMatrix=MuzzleDummies[Definition.Assignments.Muzzles[id]].Matrix;if(local)return dummyMatrix;MatrixD worldMatrix=SorterWep.WorldMatrix;return dummyMatrix*worldMatrix;}public void SetAmmo(int AmmoId){Magazines.SelectedAmmoId=AmmoId;Settings.AmmoLoadedIdx=Magazines.SelectedAmmoIndex;HeartLog.Log("Ammo: "+ProjectileDefinitionManager.GetDefinition(Magazines.SelectedAmmoId).Name);}public void SetAmmoByIdx(int AmmoIdx){if(AmmoIdx<0||AmmoIdx>=Definition.Loading.Ammos.Length)return;Magazines.SelectedAmmoIndex=AmmoIdx;Settings.AmmoLoadedIdx=Magazines.SelectedAmmoIndex;}public bool MouseShootState{get{return Settings.MouseShootState;}set{Settings.MouseShootState=value;Settings.Sync(SorterWep.GetPosition());ShootState=false;}}public bool ShootState{get{return Settings.ShootState;}set{Settings.ShootState=value;Settings.Sync(SorterWep.GetPosition());}}public int AmmoComboBox{get{return Settings.AmmoLoadedIdx;}set{SetAmmoByIdx(value);Settings.AmmoLoadedIdx=Magazines.SelectedAmmoIndex;Settings.Sync(SorterWep.GetPosition());}}public void CycleAmmoType(bool forward){if(forward)Magazines.SelectedAmmoIndex=(Magazines.SelectedAmmoIndex+1)%Definition.Loading.Ammos.Length;else Magazines.SelectedAmmoIndex=(Magazines.SelectedAmmoIndex-1+Definition.Loading.Ammos.Length)%Definition.Loading.Ammos.Length;Settings.AmmoLoadedIdx=Magazines.SelectedAmmoIndex;Magazines.EmptyMagazines();AmmoComboBox=Magazines.SelectedAmmoIndex;}public bool HudBarrelIndicatorState{get{return Settings.HudBarrelIndicatorState;}set{Settings.HudBarrelIndicatorState=value;Settings.Sync(SorterWep.GetPosition());}}void SaveSettings(){if(SorterWep==null)return;if(Settings==null)throw new NullReferenceException($"Settings == null on entId={Entity?.EntityId}; Test log 1");if(MyAPIGateway.Utilities==null)throw new NullReferenceException($"MyAPIGateway.Utilities == null; entId={Entity?.EntityId}; Test log 2");if(SorterWep.Storage==null)SorterWep.Storage=new MyModStorageComponent();SorterWep.Storage.SetValue(HeartSettingsGUID,Convert.ToBase64String(MyAPIGateway.Utilities.SerializeToBinary(Settings)));}internal virtual void LoadDefaultSettings(){if(!MyAPIGateway.Session.IsServer)return;Settings.ShootState=false;Settings.AmmoLoadedIdx=Magazines.SelectedAmmoIndex;Settings.HudBarrelIndicatorState=false;}internal virtual bool LoadSettings(){if(SorterWep.Storage==null){LoadDefaultSettings();return false;}string rawData;if(!SorterWep.Storage.TryGetValue(HeartSettingsGUID,out rawData)){LoadDefaultSettings();return false;}try{var loadedSettings=MyAPIGateway.Utilities.SerializeFromBinary<Heart_Settings>(Convert.FromBase64String(rawData));if(loadedSettings!=null){Settings.ShootState=loadedSettings.ShootState;Settings.AmmoLoadedIdx=loadedSettings.AmmoLoadedIdx;Magazines.SelectedAmmoIndex=loadedSettings.AmmoLoadedIdx;Settings.ControlTypeState=loadedSettings.ControlTypeState;Settings.HudBarrelIndicatorState=loadedSettings.HudBarrelIndicatorState;Settings.WeaponEntityId=SorterWep.EntityId;return true;}}catch(Exception e){SoftHandle.RaiseException(e,typeof(SorterWeaponLogic));}return false;}public override bool IsSerialized(){try{SaveSettings();}catch(Exception e){}return base.IsSerialized();}internal Vector3D RandomCone(Vector3D center,double radius){Vector3D Axis=Vector3D.CalculatePerpendicularVector(center).Rotate(center,Math.PI*2*HeartData.I.Random.NextDouble());return center.Rotate(Axis,radius*HeartData.I.Random.NextDouble());}}}﻿using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.ModAPI;using System.Collections.Generic;using System.Linq;namespace Heart_Module.Data.Scripts.HeartModule.Weapons{internal class WeaponDefinitionManager{public static WeaponDefinitionManager I;private Dictionary<string,WeaponDefinitionBase>Definitions=new Dictionary<string,WeaponDefinitionBase>();private Dictionary<string,byte[]>SerializedDefinitions=new Dictionary<string,byte[]>();public static WeaponDefinitionBase GetDefinition(string subTypeId){if(HasDefinition(subTypeId))return I.Definitions[subTypeId];return null;}public static byte[]GetSerializedDefinition(string subTypeId){if(HasDefinition(subTypeId))return I.SerializedDefinitions[subTypeId];return null;}public static bool HasDefinition(string subTypeId){return I.Definitions.ContainsKey(subTypeId);}public static bool UpdateDefinition(byte[]serializedDefinition){var definition=MyAPIGateway.Utilities.SerializeFromBinary<WeaponDefinitionBase>(serializedDefinition);if(definition==null||!HasDefinition(definition.Assignments.BlockSubtype))return false;ApplyTrainingWheels(ref definition);I.Definitions[definition.Assignments.BlockSubtype]=definition;I.SerializedDefinitions[definition.Assignments.BlockSubtype]=serializedDefinition;return true;}public static bool UpdateDefinition(WeaponDefinitionBase definition){if(!HasDefinition(definition.Assignments.BlockSubtype))return false;ApplyTrainingWheels(ref definition);I.Definitions[definition.Assignments.BlockSubtype]=definition;I.SerializedDefinitions[definition.Assignments.BlockSubtype]=MyAPIGateway.Utilities.SerializeToBinary(definition);return true;}public static bool RegisterModApiDefinition(byte[]serializedDefinition){RegisterDefinition(serializedDefinition);return true;}public static void RegisterDefinition(byte[]serializedDefinition){if(serializedDefinition==null)return;var definition=MyAPIGateway.Utilities.SerializeFromBinary<WeaponDefinitionBase>(serializedDefinition);if(definition==null)return;if(I.Definitions.ContainsKey(definition.Assignments.BlockSubtype)){I.Definitions[definition.Assignments.BlockSubtype]=definition;I.SerializedDefinitions[definition.Assignments.BlockSubtype]=serializedDefinition;HeartLog.Log($"Duplicate weapon definition {definition.Assignments.BlockSubtype}! Overriding...");}else{I.Definitions.Add(definition.Assignments.BlockSubtype,definition);I.SerializedDefinitions.Add(definition.Assignments.BlockSubtype,serializedDefinition);}HeartData.I.OrreryBlockCategory.AddBlock(definition.Assignments.BlockSubtype);HeartLog.Log($"Registered weapon definition {definition.Assignments.BlockSubtype}.");if(HeartData.I.IsLoaded)WeaponManager.I.UpdateLogicOnExistingBlocks(definition);}public static void RegisterDefinition(WeaponDefinitionBase definition){if(definition==null)return;ApplyTrainingWheels(ref definition);RegisterDefinition(MyAPIGateway.Utilities.SerializeToBinary(definition));}public static void RemoveDefinition(string subtype){if(!HasDefinition(subtype))return;WeaponDefinitionBase definition=I.Definitions[subtype];WeaponManager.I.RemoveLogicOnExistingBlocks(definition);I.Definitions.Remove(subtype);I.SerializedDefinitions.Remove(subtype);HeartLog.Log("Removed weapon definition "+subtype);}public static int DefinitionCount(){return I.Definitions.Count;}public static string[]GetAllDefinitions(){return I.Definitions.Keys.ToArray();}public static void ClearDefinitions(){foreach(var id in GetAllDefinitions()){RemoveDefinition(id);}HeartLog.Log("Cleared all weapon definitions.");}private static void ApplyTrainingWheels(ref WeaponDefinitionBase input){if(input.Loading.RateOfFire>500){input.Loading.RateOfFire=500;HeartLog.Log($"WeaponDefinitionManager.TrainingWheels: Definition {input.Assignments.BlockSubtype}'s firerate is over 500 rps!\nI've gone ahead and clamped it for you, but if you reeealllly want to break stuff, increase ProjectilesPerBarrel :)");}}}}﻿using Heart_Module.Data.Scripts.HeartModule;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.Game;using Sandbox.ModAPI;using System;using VRage.Game;using VRage.Game.ModAPI;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding{public class WeaponLogic_Magazines{Loading Definition;Audio DefinitionAudio;SorterWeaponLogic Weapon;private readonly Func<IMyInventory>GetInventoryFunc;private int _selectedAmmoIndex=0;private int _selectedAmmo=0;private int shotsPerMag=0;public int SelectedAmmoId{get{return _selectedAmmo;}set{int idx=Array.IndexOf(Definition.Ammos,value);if(idx==-1)return;_selectedAmmo=value;_selectedAmmoIndex=idx;shotsPerMag=ProjectileDefinitionManager.GetDefinition(SelectedAmmoId).Ungrouped.ShotsPerMagazine;if(value==_selectedAmmo)return;EmptyMagazines();}}public int SelectedAmmoIndex{get{return _selectedAmmoIndex;}set{if(Definition.Ammos.Length<=value||value<0)return;_selectedAmmo=ProjectileDefinitionManager.GetId(Definition.Ammos[value]);_selectedAmmoIndex=value;shotsPerMag=ProjectileDefinitionManager.GetDefinition(SelectedAmmoId).Ungrouped.ShotsPerMagazine;if(value==_selectedAmmoIndex)return;EmptyMagazines();}}public WeaponLogic_Magazines(SorterWeaponLogic weapon,Func<IMyInventory>getInventoryFunc,int ammoIdx,bool startLoaded=false){Weapon=weapon;Definition=weapon.Definition.Loading;DefinitionAudio=weapon.Definition.Audio;GetInventoryFunc=getInventoryFunc;RemainingReloads=Definition.MaxReloads;NextReloadTime=Definition.ReloadTime;SelectedAmmoIndex=ammoIdx;if(startLoaded){MagazinesLoaded=Definition.MagazinesToLoad;ShotsInMag=ProjectileDefinitionManager.GetDefinition(SelectedAmmoId).Ungrouped.ShotsPerMagazine;}}public int MagazinesLoaded=0;public int ShotsInMag=0;public float NextReloadTime=-1;public int RemainingReloads;public void UpdateReload(float delta=1/60f){if(RemainingReloads==0)return;if(MagazinesLoaded>=Definition.MagazinesToLoad)return;if(NextReloadTime==-1)return;NextReloadTime-=delta;if(NextReloadTime<=0){var inventory=GetInventoryFunc();var ammoDefinition=ProjectileDefinitionManager.GetDefinition(SelectedAmmoId);string magazineItem=ammoDefinition.Ungrouped.MagazineItemToConsume;if(!string.IsNullOrWhiteSpace(magazineItem)){var itemToConsume=new MyDefinitionId(typeof(MyObjectBuilder_Component),magazineItem);if(inventory.ContainItems(1,itemToConsume)){inventory.RemoveItemsOfType(1,itemToConsume);MyVisualScriptLogicProvider.ShowNotification($"Consumed 1 {magazineItem} for reloading.",1000/60,"White");MagazinesLoaded++;RemainingReloads--;NextReloadTime=Definition.ReloadTime;ShotsInMag+=shotsPerMag;if(!string.IsNullOrEmpty(DefinitionAudio.ReloadSound)){MyVisualScriptLogicProvider.PlaySingleSoundAtPosition(DefinitionAudio.ReloadSound,Vector3D.Zero);}}else{return;}}else{}MagazinesLoaded++;RemainingReloads--;NextReloadTime=Definition.ReloadTime;ShotsInMag+=shotsPerMag;}}public bool IsLoaded=>ShotsInMag>0;public void UseShot(Vector3D muzzlePos){ShotsInMag--;if(ShotsInMag%shotsPerMag==0){MagazinesLoaded--;if(MyAPIGateway.Session.IsServer){HeartData.I.Net.SendToEveryoneInSync(new n_MagazineUpdate(){WeaponEntityId=Weapon.SorterWep.EntityId,MillisecondsFromMidnight=(int)DateTime.UtcNow.TimeOfDay.TotalMilliseconds,MagazinesLoaded=MagazinesLoaded,NextMuzzleIdx=(short)Weapon.NextMuzzleIdx,},Weapon.SorterWep.GetPosition());}if(!string.IsNullOrEmpty(DefinitionAudio.ReloadSound)){MyVisualScriptLogicProvider.PlaySingleSoundAtPosition(DefinitionAudio.ReloadSound,muzzlePos);}}}public void EmptyMagazines(bool doSyncIfClient=false){ShotsInMag=0;MagazinesLoaded=0;NextReloadTime=Definition.ReloadTime;if(MyAPIGateway.Session.IsServer||doSyncIfClient){HeartData.I.Net.SendToEveryoneInSync(new n_MagazineUpdate(){WeaponEntityId=Weapon.SorterWep.EntityId,MillisecondsFromMidnight=(int)DateTime.UtcNow.TimeOfDay.TotalMilliseconds,MagazinesLoaded=MagazinesLoaded,NextMuzzleIdx=(short)Weapon.NextMuzzleIdx,},Weapon.SorterWep.GetPosition());}}}}﻿using Heart_Module.Data.Scripts.HeartModule.ExceptionHandler;using Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses;using Sandbox.ModAPI;using System.Collections.Generic;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.ModAPI;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]public class WeaponManager:MySessionComponentBase{public static WeaponManager I;internal Dictionary<uint,SorterWeaponLogic>ActiveWeapons=new Dictionary<uint,SorterWeaponLogic>();private uint NextId=0;public Dictionary<IMyCubeGrid,List<SorterWeaponLogic>>GridWeapons=new Dictionary<IMyCubeGrid,List<SorterWeaponLogic>>();public bool DidFirstInit=false;private const float deltaTick=1/60f;public override void LoadData(){I=this;HeartData.I.OnGridAdd+=OnGridAdd;HeartData.I.OnGridRemove+=OnGridRemove;}public void UpdateLogicOnExistingBlocks(WeaponDefinitionBase definition){foreach(var grid in GridWeapons.Keys){foreach(var block in grid.GetFatBlocks<IMyConveyorSorter>()){if(block.BlockDefinition.SubtypeName!=definition.Assignments.BlockSubtype||block.GameLogic?.GetAs<SorterWeaponLogic>()!=null)continue;AddWeapon(block);}}}public void RemoveLogicOnExistingBlocks(WeaponDefinitionBase definition){foreach(var grid in GridWeapons){foreach(var weapon in grid.Value.ToArray()){if(weapon.Definition==definition){ActiveWeapons.Remove(weapon.Id);List<SorterWeaponLogic>values;GridWeapons.TryGetValue(weapon.SorterWep.CubeGrid,out values);values?.Remove(weapon);weapon.MarkForClose();}}}}private void OnGridAdd(IMyCubeGrid grid){List<IMySlimBlock>blocks=new List<IMySlimBlock>();grid.GetBlocks(null,b=>{if(b.FatBlock is IMyConveyorSorter)blocks.Add(b);return false;});if(!GridWeapons.ContainsKey(grid))GridWeapons.Add(grid,new List<SorterWeaponLogic>());foreach(var block in blocks)OnBlockAdd(block);grid.OnBlockAdded+=OnBlockAdd;}private void OnGridRemove(IMyCubeGrid grid){GridWeapons.Remove(grid);}private void OnBlockAdd(IMySlimBlock slim){IMyConveyorSorter sorter=slim.FatBlock as IMyConveyorSorter;if(sorter==null||!WeaponDefinitionManager.HasDefinition(slim.BlockDefinition.Id.SubtypeName))return;AddWeapon(sorter);}private void AddWeapon(IMyConveyorSorter sorter){WeaponDefinitionBase def=WeaponDefinitionManager.GetDefinition(sorter.BlockDefinition.SubtypeName);SorterWeaponLogic logic;while(!IsIdAvailable(NextId))NextId++;if(def.Assignments.IsTurret)logic=new SorterTurretLogic(sorter,def,NextId);else logic=new SorterWeaponLogic(sorter,def,NextId);ActiveWeapons.Add(NextId,logic);GridWeapons[sorter.CubeGrid].Add(logic);sorter.OnMarkForClose+=(a)=>{ActiveWeapons.Remove(NextId);List<SorterWeaponLogic>values;GridWeapons.TryGetValue(sorter.CubeGrid,out values);values?.Remove(logic);};Heart_Settings.RequestSync(sorter.EntityId);if(logic.Id==uint.MaxValue){logic.Close();CriticalHandle.ThrowCriticalException(new System.Exception($"Failed to initialize weapon! Subtype: {sorter.BlockDefinition.SubtypeId}"),typeof(WeaponManager));}}protected override void UnloadData(){I=null;ActiveWeapons.Clear();GridWeapons.Clear();HeartData.I.OnGridAdd-=OnGridAdd;HeartData.I.OnGridRemove-=OnGridRemove;}int update25Ct=0;public override void UpdateAfterSimulation(){if(HeartData.I.IsSuspended)return;if(!MyAPIGateway.Utilities.IsDedicated)HandleMouseShoot();update25Ct++;foreach(var weapon in ActiveWeapons.Values){(weapon as SorterTurretLogic)?.UpdateTurretSubparts(deltaTick);}if(update25Ct>=25){Update25();update25Ct=0;}}public void HandleMouseShoot(){IMyEntity controlledEntity=MyAPIGateway.Session.Player?.Controller?.ControlledEntity?.Entity?.GetTopMostParent();IMyCubeGrid grid=controlledEntity as IMyCubeGrid;if(MyAPIGateway.Gui.IsCursorVisible||grid==null||!GridWeapons.ContainsKey(grid))return;bool isMousePressed=MyAPIGateway.Input.IsMousePressed(VRage.Input.MyMouseButtonsEnum.Left);foreach(var weapon in GridWeapons[grid])if(weapon.MouseShootState&&weapon.ShootState!=isMousePressed)weapon.ShootState=isMousePressed;}public void Update25(){if(!MyAPIGateway.Session.IsServer||!MyAPIGateway.Multiplayer.MultiplayerActive)return;Dictionary<Vector3D,n_TurretFacing>facings=new Dictionary<Vector3D,n_TurretFacing>();foreach(var weapon in ActiveWeapons.Values){if(!(weapon is SorterTurretLogic))continue;SorterTurretLogic turret=weapon as SorterTurretLogic;facings.Add(turret.SorterWep.GetPosition(),new n_TurretFacing(turret));}foreach(var player in HeartData.I.Players){Vector3D playerPos=player.GetPosition();List<n_TurretFacing>facingsForPlayer=new List<n_TurretFacing>();foreach(var facing in facings)if(Vector3D.DistanceSquared(facing.Key,playerPos)<=HeartData.I.SyncRangeSq)facingsForPlayer.Add(facing.Value);if(facingsForPlayer.Count==0)continue;HeartData.I.Net.SendToPlayer(new n_TurretFacingArray(facingsForPlayer),player.SteamUserId);}}public SorterWeaponLogic GetWeapon(uint id)=>ActiveWeapons.GetValueOrDefault(id,null);public SorterWeaponLogic GetWeapon(long id)=>(MyAPIGateway.Entities.GetEntityById(id)as IMyCubeBlock)?.GameLogic as SorterWeaponLogic;public bool IsIdAvailable(uint id)=>!ActiveWeapons.ContainsKey(id);}}﻿using Sandbox.Game.Entities;using Sandbox.Game.EntityComponents;using Sandbox.ModAPI;using VRage.Game;using VRage.Game.Entity;using VRage.Game.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting{public class GenericKeenTargeting{public MyEntity GetTarget(IMyCubeGrid grid){return GetTarget(grid,true,true,true,true,true,true,true);}public MyEntity GetTarget(IMyCubeGrid grid,bool targetGrids,bool targetLargeGrids,bool targetSmallGrids,bool targetFriendlies,bool targetNeutrals,bool targetEnemies,bool targetUnowned){if(grid==null){return null;}var myCubeGrid=grid as MyCubeGrid;if(myCubeGrid!=null){MyShipController activeController=null;foreach(var block in myCubeGrid.GetFatBlocks<MyShipController>()){if(block.NeedsPerFrameUpdate){activeController=block;break;}}if(activeController!=null&&activeController.Pilot!=null){var targetLockingComponent=activeController.Pilot.Components.Get<MyTargetLockingComponent>();if(targetLockingComponent!=null&&targetLockingComponent.IsTargetLocked){var targetEntity=targetLockingComponent.TargetEntity;if(targetEntity!=null&&targetGrids){bool isLargeGrid=targetEntity is IMyCubeGrid&&((IMyCubeGrid)targetEntity).GridSizeEnum==MyCubeSize.Large;bool isSmallGrid=targetEntity is IMyCubeGrid&&((IMyCubeGrid)targetEntity).GridSizeEnum==MyCubeSize.Small;if(isLargeGrid&&targetLargeGrids||isSmallGrid&&targetSmallGrids){var filteredTarget=FilterTargetBasedOnFactionRelation(targetEntity,targetFriendlies,targetNeutrals,targetEnemies,targetUnowned);if(filteredTarget!=null){}else{}return filteredTarget;}}}}}return null;}private MyEntity FilterTargetBasedOnFactionRelation(MyEntity targetEntity,bool targetFriendlies,bool targetNeutrals,bool targetEnemies,bool targetUnowned){IMyCubeGrid grid=targetEntity as IMyCubeGrid;if(grid!=null){MyRelationsBetweenPlayerAndBlock relation=GetRelationsToGrid(grid);bool isFriendly=relation==MyRelationsBetweenPlayerAndBlock.Friends;bool isNeutral=relation==MyRelationsBetweenPlayerAndBlock.Neutral;bool isEnemy=relation==MyRelationsBetweenPlayerAndBlock.Enemies;bool isOwner=relation==MyRelationsBetweenPlayerAndBlock.Owner;bool isFactionShare=relation==MyRelationsBetweenPlayerAndBlock.FactionShare;bool isNoOwnership=relation==MyRelationsBetweenPlayerAndBlock.NoOwnership;int reputation=0;if(grid.BigOwners.Count>0){long gridOwner=grid.BigOwners[0];IMyFaction ownerFaction=MyAPIGateway.Session.Factions.TryGetPlayerFaction(gridOwner);if(ownerFaction!=null){reputation=MyAPIGateway.Session.Factions.GetReputationBetweenPlayerAndFaction(MyAPIGateway.Session.Player.IdentityId,ownerFaction.FactionId);}}if(isEnemy&&reputation>-500){isNeutral=true;isEnemy=false;}if((isFriendly||isFactionShare)&&targetFriendlies){return targetEntity;}else if(isNeutral&&targetNeutrals){return targetEntity;}else if(isEnemy&&targetEnemies){return targetEntity;}else if(isOwner&&targetFriendlies){return targetEntity;}else if(isNoOwnership&&targetUnowned){return targetEntity;}}return null;}private MyRelationsBetweenPlayerAndBlock GetRelationsToGrid(IMyCubeGrid grid){if(grid.BigOwners==null||grid.BigOwners.Count==0)return MyRelationsBetweenPlayerAndBlock.NoOwnership;long gridOwner=grid.BigOwners[0];IMyFaction ownerFaction=gridOwner!=0?MyAPIGateway.Session.Factions.TryGetPlayerFaction(gridOwner):null;IMyFaction playerFaction=MyAPIGateway.Session.Factions.TryGetPlayerFaction(MyAPIGateway.Session.Player.IdentityId);if(playerFaction==null){return gridOwner==MyAPIGateway.Session.Player.IdentityId?MyRelationsBetweenPlayerAndBlock.Owner:MyRelationsBetweenPlayerAndBlock.Enemies;}if(ownerFaction!=null&&playerFaction!=null){if(ownerFaction.FactionId==playerFaction.FactionId)return MyRelationsBetweenPlayerAndBlock.Friends;int reputation=MyAPIGateway.Session.Factions.GetReputationBetweenPlayerAndFaction(MyAPIGateway.Session.Player.IdentityId,ownerFaction.FactionId);if(reputation>-500)return MyRelationsBetweenPlayerAndBlock.Neutral;if(ownerFaction.IsNeutral(playerFaction.FactionId))return MyRelationsBetweenPlayerAndBlock.Neutral;else return MyRelationsBetweenPlayerAndBlock.Enemies;}return MyRelationsBetweenPlayerAndBlock.NoOwnership;}}}using Heart_Module.Data.Scripts.HeartModule.ErrorHandler;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Sandbox.Game.Entities;using System;using System.Collections.Generic;using System.Linq;using VRage.Game.Entity;using VRage.Game.ModAPI;using VRageMath;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting{internal class GridAiTargeting{IMyCubeGrid Grid;List<SorterWeaponLogic>Weapons=>WeaponManager.I.GridWeapons[Grid];Vector3D gridPosition=>Grid.PositionComp.WorldAABB.Center;SortedList<IMyCubeGrid,int>TargetedGrids=new SortedList<IMyCubeGrid,int>();SortedList<IMyCharacter,int>TargetedCharacters=new SortedList<IMyCharacter,int>();SortedList<MyEntity,int>PriorityTargets=new SortedList<MyEntity,int>();SortedList<uint,int>TargetedProjectiles=new SortedList<uint,int>();private GenericKeenTargeting keenTargeting=new GenericKeenTargeting();public IMyCubeGrid PrimaryGridTarget{get;private set;}public bool Enabled=false;float MaxTargetingRange=1000;bool DoesTargetGrids=true;bool DoesTargetCharacters=true;bool DoesTargetProjectiles=true;public GridAiTargeting(IMyCubeGrid grid){Grid=grid;Grid.OnBlockAdded+=Grid_OnBlockAdded;GridComparer=Comparer<IMyCubeGrid>.Create((x,y)=>{return(int)(Vector3D.DistanceSquared(gridPosition,x.GetPosition())-Vector3D.DistanceSquared(gridPosition,y.GetPosition()));});CharacterComparer=Comparer<IMyCharacter>.Create((x,y)=>{return(int)(Vector3D.DistanceSquared(gridPosition,x.GetPosition())-Vector3D.DistanceSquared(gridPosition,y.GetPosition()));});ProjectileComparer=Comparer<uint>.Create((x,y)=>{return(int)(Vector3D.DistanceSquared(gridPosition,ProjectileManager.I.GetProjectile(x).Position)-Vector3D.DistanceSquared(gridPosition,ProjectileManager.I.GetProjectile(y).Position));});SetTargetingFlags();}private void Grid_OnBlockAdded(IMySlimBlock obj){}public void SetPrimaryTarget(IMyCubeGrid entity){PrimaryGridTarget=entity;}public void UpdateTargeting(){try{if(!Enabled)return;SetTargetingFlags();ScanForTargets();MyEntity manualTarget=null;if(keenTargeting!=null){manualTarget=keenTargeting.GetTarget(Grid);if(manualTarget is IMyCubeGrid)PrimaryGridTarget=(IMyCubeGrid)manualTarget;}foreach(var weapon in Weapons){if(!(weapon is SorterTurretLogic))continue;SorterTurretLogic turret=weapon as SorterTurretLogic;bool turretHasTarget=false;if(keenTargeting!=null){bool isManuallyLockedTargetInRange=manualTarget==null||Vector3D.DistanceSquared(manualTarget.PositionComp.WorldAABB.Center,Grid.PositionComp.WorldAABB.Center)<=MaxTargetingRange*MaxTargetingRange;if(manualTarget!=null&&isManuallyLockedTargetInRange){turret.SetTarget(manualTarget);turretHasTarget=true;}}if(!turretHasTarget&&PriorityTargets.Count>0){MyEntity priorityTarget=PriorityTargets.First().Key;if(turret.ShouldConsiderTarget((IMyCubeGrid)priorityTarget)){turret.SetTarget(priorityTarget);turretHasTarget=true;PriorityTargets[priorityTarget]++;}}if(turretHasTarget||turret.HasValidTarget())continue;if(turret.TargetProjectilesState){if(turret.PreferUniqueTargetsState){List<Projectile>targetable=new List<Projectile>();foreach(var target in TargetedProjectiles){Projectile proj=ProjectileManager.I.GetProjectile(target.Key);if(turret.ShouldConsiderTarget(proj))targetable.Add(proj);}if(targetable.Count==0)continue;Projectile minTargeted=targetable[0];int minCount=int.MaxValue;targetable.ForEach(p=>{if(TargetedProjectiles[p.Id]<minCount){minTargeted=p;minCount=TargetedProjectiles[p.Id];}});turret.SetTarget(minTargeted);turretHasTarget=true;TargetedProjectiles[minTargeted.Id]++;}else{foreach(var projectile in TargetedProjectiles.Keys){if(turret.ShouldConsiderTarget(ProjectileManager.I.GetProjectile(projectile))){turret.SetTarget(ProjectileManager.I.GetProjectile(projectile));turretHasTarget=true;TargetedProjectiles[projectile]++;break;}}}}if(!turretHasTarget&&turret.TargetCharactersState){if(turret.PreferUniqueTargetsState){List<IMyCharacter>targetable=new List<IMyCharacter>();foreach(var target in TargetedCharacters.Keys){if(turret.ShouldConsiderTarget(target))targetable.Add(target);}if(targetable.Count==0)continue;IMyCharacter minTargeted=targetable[0];int minCount=int.MaxValue;targetable.ForEach(p=>{if(TargetedCharacters[p]<minCount){minTargeted=p;minCount=TargetedCharacters[p];}});turret.SetTarget(minTargeted);turretHasTarget=true;TargetedCharacters[minTargeted]++;}else{foreach(var character in TargetedCharacters.Keys){if(turret.ShouldConsiderTarget(character)){turret.SetTarget(character);turretHasTarget=true;TargetedCharacters[character]++;break;}}}}if(!turretHasTarget&&turret.TargetGridsState){if(turret.PreferUniqueTargetsState){List<IMyCubeGrid>targetable=new List<IMyCubeGrid>();foreach(var target in TargetedGrids.Keys){if(turret.ShouldConsiderTarget(target))targetable.Add(target);};if(targetable.Count==0)continue;IMyCubeGrid minTargeted=targetable[0];int minCount=int.MaxValue;targetable.ForEach(p=>{if(TargetedGrids[p]<minCount){minTargeted=p;minCount=TargetedGrids[p];}});turret.SetTarget(minTargeted);turretHasTarget=true;TargetedGrids[minTargeted]++;}else{foreach(var grid in TargetedGrids.Keys){if(turret.ShouldConsiderTarget(grid)){turret.SetTarget(grid);turretHasTarget=true;TargetedGrids[grid]++;break;}}}}}}catch(Exception ex){SoftHandle.RaiseException(ex,typeof(GridAiTargeting));}}private void SetTargetingFlags(){Enabled=Weapons.Count>0;if(!Enabled)return;DoesTargetGrids=false;DoesTargetCharacters=false;DoesTargetProjectiles=false;MaxTargetingRange=0;foreach(var weapon in Weapons){if(weapon is SorterTurretLogic){var turret=(SorterTurretLogic)weapon;DoesTargetGrids|=turret.Settings.TargetGridsState;DoesTargetCharacters|=turret.Settings.TargetCharactersState;DoesTargetProjectiles|=turret.Settings.TargetProjectilesState;}float maxTrajectory=ProjectileDefinitionManager.GetDefinition(weapon.Magazines.SelectedAmmoId)?.PhysicalProjectile.MaxTrajectory??0;if(maxTrajectory>MaxTargetingRange)MaxTargetingRange=maxTrajectory;}MaxTargetingRange*=1.1f;if(Enabled)Enabled=MaxTargetingRange>0;}private void ScanForTargets(){if(!Enabled)return;BoundingSphereD sphere=new BoundingSphereD(Grid.PositionComp.WorldAABB.Center,MaxTargetingRange);List<MyEntity>entities=new List<MyEntity>();MyGamePruningStructure.GetAllTopMostEntitiesInSphere(ref sphere,entities);List<IMyCubeGrid>allGrids=new List<IMyCubeGrid>();List<IMyCharacter>allCharacters=new List<IMyCharacter>();foreach(var entity in entities){if(entity==Grid||entity.Physics==null)continue;if(entity is IMyCubeGrid){allGrids.Add((IMyCubeGrid)entity);}else if(entity is IMyCharacter)allCharacters.Add(entity as IMyCharacter);}List<Projectile>allProjectiles=new List<Projectile>();ProjectileManager.I.GetProjectilesInSphere(sphere,ref allProjectiles,true);UpdateAvailableTargets(allGrids,allCharacters,allProjectiles,false);}public void UpdateAvailableTargets(List<IMyCubeGrid>allGrids,List<IMyCharacter>allCharacters,List<Projectile>allProjectiles,bool distanceCheck=true){float maxRangeSq=MaxTargetingRange*MaxTargetingRange;Dictionary<IMyCubeGrid,int>gridBuffer=new Dictionary<IMyCubeGrid,int>();Dictionary<IMyCharacter,int>charBuffer=new Dictionary<IMyCharacter,int>();Dictionary<uint,int>projBuffer=new Dictionary<uint,int>();if(DoesTargetGrids)foreach(var grid in allGrids)if(!distanceCheck||Vector3D.DistanceSquared(gridPosition,grid.GetPosition())<maxRangeSq)gridBuffer.Add(grid,0);if(DoesTargetCharacters)foreach(var character in allCharacters)if(!distanceCheck||Vector3D.DistanceSquared(gridPosition,character.GetPosition())<maxRangeSq)charBuffer.Add(character,0);if(DoesTargetProjectiles)foreach(var projectile in allProjectiles)if(!distanceCheck||Vector3D.DistanceSquared(gridPosition,projectile.Position)<maxRangeSq)projBuffer.Add(projectile.Id,0);TargetedGrids=new SortedList<IMyCubeGrid,int>(gridBuffer,GridComparer);TargetedCharacters=new SortedList<IMyCharacter,int>(charBuffer,CharacterComparer);TargetedProjectiles=new SortedList<uint,int>(projBuffer,ProjectileComparer);}public void Close(){TargetedGrids.Clear();TargetedCharacters.Clear();TargetedProjectiles.Clear();}private Comparer<IMyCubeGrid>GridComparer;private Comparer<IMyCharacter>CharacterComparer;private Comparer<uint>ProjectileComparer;}}﻿using Sandbox.ModAPI;using System.Collections.Generic;using VRage.Game.Components;using VRage.Game.ModAPI;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal class WeaponManagerAi:MySessionComponentBase{public static WeaponManagerAi I;private Dictionary<IMyCubeGrid,GridAiTargeting>GridTargetingMap=new Dictionary<IMyCubeGrid,GridAiTargeting>();private Dictionary<IMyCubeGrid,List<SorterWeaponLogic>>GridWeapons=>WeaponManager.I.GridWeapons;public GridAiTargeting GetTargeting(IMyCubeGrid grid){if(GridTargetingMap.ContainsKey(grid))return GridTargetingMap[grid];return null;}public override void LoadData(){if(!MyAPIGateway.Session.IsServer){SetUpdateOrder(MyUpdateOrder.NoUpdate);return;}HeartData.I.OnGridAdd+=InitializeGridAI;HeartData.I.OnGridRemove+=CloseGridAI;I=this;}protected override void UnloadData(){HeartData.I.OnGridAdd-=InitializeGridAI;HeartData.I.OnGridRemove-=CloseGridAI;I=null;}public override void UpdateAfterSimulation(){UpdateAITargeting();}private void InitializeGridAI(IMyCubeGrid grid){if(grid.Physics==null)return;var aiTargeting=new GridAiTargeting(grid);MyAPIGateway.Utilities.ShowNotification($"Grid AI initialized for grid '{grid.DisplayName}' [{(aiTargeting.Enabled?"ENABLED":"DISABLED")}]",1000,"White");GridTargetingMap.Add(grid,aiTargeting);}private void CloseGridAI(IMyCubeGrid grid){if(grid.Physics==null)return;if(GridTargetingMap.ContainsKey(grid)){GridTargetingMap[grid].Close();GridTargetingMap.Remove(grid);MyAPIGateway.Utilities.ShowNotification($"Grid AI closed for grid '{grid.DisplayName}'",1000,"White");}else{MyAPIGateway.Utilities.ShowNotification($"Attempted to close Grid AI on a non-tracked grid: '{grid.DisplayName}'",1000,"Red");}}private void UpdateAITargeting(){foreach(var targetingKvp in GridTargetingMap){targetingKvp.Value.UpdateTargeting();}}}}﻿using Sandbox.Game.Localization;using Sandbox.ModAPI;using Sandbox.ModAPI.Interfaces.Terminal;using System;using System.Text;using VRage.Utils;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup{internal static class ControlsHelper{const string IdPrefix="ModularHeartMod_";public static IMyTerminalControlOnOffSwitch CreateToggle<T>(string id,string displayName,string toolTip,Func<IMyTerminalBlock,bool>getter,Action<IMyTerminalBlock,bool>setter,Func<IMyTerminalBlock,bool>visible=null)where T:SorterWeaponLogic{var ShootToggle=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlOnOffSwitch,IMyConveyorSorter>(IdPrefix+id);ShootToggle.Title=MyStringId.GetOrCompute(displayName);ShootToggle.Tooltip=MyStringId.GetOrCompute(toolTip);ShootToggle.SupportsMultipleBlocks=true;Func<IMyTerminalBlock,bool>visibleFunc;if(typeof(T)==typeof(SorterTurretLogic))visibleFunc=(b)=>HasTurretLogic(b)&&(visible?.Invoke(b)??true);else visibleFunc=(b)=>HasWeaponLogic(b)&&(visible?.Invoke(b)??true);ShootToggle.Visible=visibleFunc;ShootToggle.OnText=MySpaceTexts.SwitchText_On;ShootToggle.OffText=MySpaceTexts.SwitchText_Off;ShootToggle.Getter=getter;ShootToggle.Setter=setter;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(ShootToggle);return ShootToggle;}public static IMyTerminalControlSlider CreateSlider<T>(string id,string displayName,string toolTip,float min,float max,Func<IMyTerminalBlock,float>getter,Action<IMyTerminalBlock,float>setter,Action<IMyTerminalBlock,StringBuilder>writer,Func<IMyTerminalBlock,bool>visible=null){var slider=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlSlider,IMyConveyorSorter>(IdPrefix+id);slider.Title=MyStringId.GetOrCompute(displayName);slider.Tooltip=MyStringId.GetOrCompute(toolTip);slider.SetLimits(min,max);slider.Getter=getter;slider.Setter=setter;slider.Writer=writer;Func<IMyTerminalBlock,bool>visibleFunc;if(typeof(T)==typeof(SorterTurretLogic))visibleFunc=(b)=>HasTurretLogic(b)&&(visible?.Invoke(b)??true);else visibleFunc=(b)=>HasWeaponLogic(b)&&(visible?.Invoke(b)??true);slider.Visible=visibleFunc;slider.Enabled=(b)=>true;slider.SupportsMultipleBlocks=true;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(slider);return slider;}static bool HasWeaponLogic(IMyTerminalBlock b){return b?.GameLogic?.GetAs<SorterWeaponLogic>()!=null;}static bool HasTurretLogic(IMyTerminalBlock b){return b?.GameLogic?.GetAs<SorterTurretLogic>()!=null;}public static IMyTerminalAction CreateAction<T>(string id,string displayName,Action<IMyTerminalBlock>action,Action<IMyTerminalBlock,StringBuilder>writer,string icon)where T:SorterWeaponLogic{var cycleControlForwardAction=MyAPIGateway.TerminalControls.CreateAction<IMyConveyorSorter>(IdPrefix+id);cycleControlForwardAction.Name=new StringBuilder(displayName);cycleControlForwardAction.Action=action;cycleControlForwardAction.Writer=writer;cycleControlForwardAction.Icon=icon;Func<IMyTerminalBlock,bool>visibleFunc;if(typeof(T)==typeof(SorterTurretLogic))visibleFunc=HasTurretLogic;else visibleFunc=HasWeaponLogic;cycleControlForwardAction.Enabled=visibleFunc;MyAPIGateway.TerminalControls.AddAction<IMyConveyorSorter>(cycleControlForwardAction);return cycleControlForwardAction;}}}﻿using Sandbox.ModAPI;using Sandbox.ModAPI.Interfaces.Terminal;using System.Collections.Generic;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Hiding{public static class HideSorterControls{static bool Done=false;public static void DoOnce(){if(Done)return;Done=true;EditControls();EditActions();}static bool AppendedCondition(IMyTerminalBlock block){return block?.GameLogic?.GetAs<SorterWeaponLogic>()==null;}static void EditControls(){List<IMyTerminalControl>controls;MyAPIGateway.TerminalControls.GetControls<IMyConveyorSorter>(out controls);foreach(IMyTerminalControl c in controls){switch(c.Id){case"DrainAll":case"blacklistWhitelist":case"CurrentList":case"removeFromSelectionButton":case"candidatesList":case"addToSelectionButton":{c.Visible=TerminalChainedDelegate.Create(c.Visible,AppendedCondition);break;}}}}static void EditActions(){List<IMyTerminalAction>actions;MyAPIGateway.TerminalControls.GetActions<IMyConveyorSorter>(out actions);foreach(IMyTerminalAction a in actions){switch(a.Id){case"DrainAll":case"DrainAll_On":case"DrainAll_Off":{a.Enabled=TerminalChainedDelegate.Create(a.Enabled,AppendedCondition);break;}}}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using Heart_Module.Data.Scripts.HeartModule.Projectiles;using Heart_Module.Data.Scripts.HeartModule.Weapons;using Heart_Module.Data.Scripts.HeartModule.Weapons.Setup;using Sandbox.ModAPI;using Sandbox.ModAPI.Interfaces.Terminal;using System;using System.Collections.Generic;using VRage.Game.ModAPI;using VRage.ModAPI;using VRage.Utils;using VRageMath;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup.Adding{public static class SorterWeaponTerminalControls{const string IdPrefix="ModularHeartMod_";static bool Done=false;public static void DoOnce(IMyModContext context){if(Done)return;Done=true;CreateControls();CreateActions(context);CreateProperties();MyAPIGateway.TerminalControls.CustomControlGetter+=CustomControlGetter;}private static void CustomControlGetter(IMyTerminalBlock block,List<IMyTerminalControl>controls){SorterWeaponLogic logic=block?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic==null)return;foreach(var control in controls){if(control.Id==(IdPrefix+"HeartAmmoComboBox")){((IMyTerminalControlCombobox)control).ComboBoxContent=(list)=>{for(int i=0;i<logic.Definition.Loading.Ammos.Length;i++)list.Add(new MyTerminalControlComboBoxItem(){Key=i,Value=MyStringId.GetOrCompute(logic.Definition.Loading.Ammos[i])});};break;}}}static bool CustomVisibleCondition(IMyTerminalBlock b){return b?.GameLogic?.GetAs<SorterWeaponLogic>()!=null;}private static string GetAmmoTypeName(long ammoKey){if(ProjectileDefinitionManager.HasDefinition((int)ammoKey))return ProjectileDefinitionManager.GetDefinition((int)ammoKey).Name;return"Unknown Ammo";}static void CreateControls(){{var c=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlSeparator,IMyConveyorSorter>("");c.SupportsMultipleBlocks=true;c.Visible=CustomVisibleCondition;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(c);}{var c=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlLabel,IMyConveyorSorter>(IdPrefix+"HeartWeaponOptionsDivider");c.Label=MyStringId.GetOrCompute("=== HeartWeaponOptions ===");c.SupportsMultipleBlocks=true;c.Visible=CustomVisibleCondition;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(c);}{ControlsHelper.CreateToggle<SorterWeaponLogic>("HeartWeaponShoot","Toogle Shoot","TargetGridsDesc",(b)=>b.GameLogic.GetAs<SorterWeaponLogic>().ShootState,(b,v)=>b.GameLogic.GetAs<SorterWeaponLogic>().ShootState=v);}{ControlsHelper.CreateToggle<SorterWeaponLogic>("HeartWeaponMouseShoot","Toogle Mouse Shoot","TargetGridsDesc",(b)=>b.GameLogic.GetAs<SorterWeaponLogic>().MouseShootState,(b,v)=>b.GameLogic.GetAs<SorterWeaponLogic>().MouseShootState=v);}{var AmmoComboBox=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlCombobox,IMyConveyorSorter>(IdPrefix+"HeartAmmoComboBox");AmmoComboBox.Title=MyStringId.GetOrCompute("Ammo Type");AmmoComboBox.Tooltip=MyStringId.GetOrCompute("HeartAmmoComboBoxDesc");AmmoComboBox.SupportsMultipleBlocks=true;AmmoComboBox.Visible=CustomVisibleCondition;AmmoComboBox.Getter=(b)=>{var logic=b?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic!=null){return logic.Magazines.SelectedAmmoIndex;}return-1;};AmmoComboBox.Setter=(b,key)=>b.GameLogic.GetAs<SorterWeaponLogic>().AmmoComboBox=(int)key;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(AmmoComboBox);}{var c=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlLabel,IMyConveyorSorter>(IdPrefix+"HeartWeaponTargetingOptionsDivider");c.Label=MyStringId.GetOrCompute("=== HeartWeaponTargetingOptions === ");c.SupportsMultipleBlocks=true;c.Visible=CustomVisibleCondition;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(c);}{ControlsHelper.CreateSlider<SorterTurretLogic>("HeartAIRange","AI Range","HeartSliderDesc",0,10000,(b)=>b.GameLogic.GetAs<SorterTurretLogic>().AiRange,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().AiRange=v,(b,sb)=>sb.Append($"Current value: {Math.Round(b.GameLogic.GetAs<SorterTurretLogic>().AiRange)}")).SetLimits((b)=>b.GameLogic.GetAs<SorterTurretLogic>().Definition.Targeting.MinTargetingRange,(b)=>b.GameLogic.GetAs<SorterTurretLogic>().Definition.Targeting.MaxTargetingRange);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetUnique","Prefer Unique Targets","TargetUniqueDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().PreferUniqueTargetsState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().PreferUniqueTargetsState=v);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetGrids","Target Grids","TargetGridsDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetGridsState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetGridsState=v,(b)=>((b.GameLogic?.GetAs<SorterTurretLogic>()?.Definition.Targeting.AllowedTargetTypes??0)&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetLargeGrids","Target Large Grids","TargetLargeGridsDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetLargeGridsState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetLargeGridsState=v,(b)=>((b.GameLogic?.GetAs<SorterTurretLogic>()?.Definition.Targeting.AllowedTargetTypes??0)&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetSmallGrids","Target Small Grids","TargetSmallGridsDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetSmallGridsState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetSmallGridsState=v,(b)=>((b.GameLogic?.GetAs<SorterTurretLogic>()?.Definition.Targeting.AllowedTargetTypes??0)&TargetType_Enum.TargetGrids)==TargetType_Enum.TargetGrids);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetProjectiles","Target Projectiles","TargetProjectilesDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetProjectilesState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetProjectilesState=v,(b)=>((b.GameLogic?.GetAs<SorterTurretLogic>()?.Definition.Targeting.AllowedTargetTypes??0)&TargetType_Enum.TargetProjectiles)==TargetType_Enum.TargetProjectiles);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetCharacters","Target Characters","TargetCharactersDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetCharactersState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetCharactersState=v,(b)=>((b.GameLogic?.GetAs<SorterTurretLogic>()?.Definition.Targeting.AllowedTargetTypes??0)&TargetType_Enum.TargetCharacters)==TargetType_Enum.TargetCharacters);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetFriendlies","Target Friendlies","TargetFriendliesDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetFriendliesState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetFriendliesState=v);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetNeutrals","Target Neutrals","TargetNeutralsDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetNeutralsState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetNeutralsState=v);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetEnemies","Target Enemies","TargetEnemiesDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetEnemiesState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetEnemiesState=v);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartTargetUnowned","Target Unowned","TargetUnownedDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetUnownedState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().TargetUnownedState=v);}{var c=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlLabel,IMyConveyorSorter>(IdPrefix+"HeartWeaponHUDDivider");c.Label=MyStringId.GetOrCompute("=== HUD ===");c.SupportsMultipleBlocks=true;c.Visible=CustomVisibleCondition;MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(c);}{ControlsHelper.CreateToggle<SorterTurretLogic>("HeartHUDBarrelIndicatorToggle","HUD Barrel Indicator","HUDBarrelIndicatorDesc",(b)=>b.GameLogic.GetAs<SorterTurretLogic>().HudBarrelIndicatorState,(b,v)=>b.GameLogic.GetAs<SorterTurretLogic>().HudBarrelIndicatorState=v);}}static void CreateActions(IMyModContext context){{ControlsHelper.CreateAction<SorterWeaponLogic>("ToggleShoot","Toggle Shoot",(b)=>{var logic=b?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic!=null){logic.ShootState=!logic.ShootState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic!=null){sb.Append(logic.ShootState?"Shoot ON":"Shoot OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterWeaponLogic>("ToggleMouseShoot","Toggle Mouse Shoot",(b)=>{var logic=b?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic!=null){logic.MouseShootState=!logic.MouseShootState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterWeaponLogic>();if(logic!=null){sb.Append(logic.MouseShootState?"Mouse ON":"Mouse OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterWeaponLogic>("HeartCycleAmmoForward","Cycle Ammo",(b)=>b.GameLogic.GetAs<SorterWeaponLogic>().CycleAmmoType(true),(b,sb)=>sb.Append($"{GetAmmoTypeName(b.GameLogic.GetAs<SorterWeaponLogic>().Magazines.SelectedAmmoId)}"),@"Textures\GUI\Icons\Actions\MissileToggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("IncreaseAIRange","Increase AI Range",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.IncreaseAIRange();}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append($"{logic.AiRange} Range");}},@"Textures\GUI\Icons\Actions\Increase.dds");ControlsHelper.CreateAction<SorterTurretLogic>("DecreaseAIRange","Decrease AI Range",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null)logic.DecreaseAIRange();},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null)sb.Append($"{logic.AiRange} Range");},@"Textures\GUI\Icons\Actions\Decrease.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleUniqueTargets","Toggle Prefer Unique",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null)logic.PreferUniqueTargetsState=!logic.PreferUniqueTargetsState;},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null)sb.Append(logic.PreferUniqueTargetsState?"Grid ON":"Grid OFF");},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetGrids","Toggle Target Grids",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetGridsState=!logic.TargetGridsState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetGridsState?"Grid ON":"Grid OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetLargeGrids","Toggle Target Large Grids",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetLargeGridsState=!logic.TargetLargeGridsState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetLargeGridsState?"LGrid ON":"LGrid OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetSmallGrids","Toggle Target Small Grids",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetSmallGridsState=!logic.TargetSmallGridsState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetSmallGridsState?"SGrid ON":"SGrid OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetProjectiles","Toggle Target Projectiles",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetProjectilesState=!logic.TargetProjectilesState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetProjectilesState?"Proj. ON":"Proj. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetCharacters","Toggle Target Characters",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetCharactersState=!logic.TargetCharactersState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetCharactersState?"Char. ON":"Char. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetFriendlies","Toggle Target Friendlies",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetFriendliesState=!logic.TargetFriendliesState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetFriendliesState?"Fr. ON":"Fr. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetNeutrals","Toggle Target Neutrals",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetNeutralsState=!logic.TargetNeutralsState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetNeutralsState?"Neu. ON":"Neu. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetEnemies","Toggle Target Enemies",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetEnemiesState=!logic.TargetEnemiesState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetEnemiesState?"Enem. ON":"Enem. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleTargetUnowned","Toggle Target Unowned",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.TargetUnownedState=!logic.TargetUnownedState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.TargetUnownedState?"Unow. ON":"Unow. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}{ControlsHelper.CreateAction<SorterTurretLogic>("ToggleHUDBarrelIndicator","Toggle HUD Barrel Indicator",(b)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){logic.HudBarrelIndicatorState=!logic.HudBarrelIndicatorState;}},(b,sb)=>{var logic=b?.GameLogic?.GetAs<SorterTurretLogic>();if(logic!=null){sb.Append(logic.HudBarrelIndicatorState?"Ind. ON":"Ind. OFF");}},@"Textures\GUI\Icons\Actions\Toggle.dds");}}static void CreateProperties(){{var p=MyAPIGateway.TerminalControls.CreateProperty<Vector3,IMyConveyorSorter>(IdPrefix+"SampleProp");p.Getter=(b)=>{float interferrence;Vector3 gravity=MyAPIGateway.Physics.CalculateNaturalGravityAt(b.GetPosition(),out interferrence);return gravity;};p.Setter=(b,v)=>{};MyAPIGateway.TerminalControls.AddControl<IMyConveyorSorter>(p);}}}}﻿using Sandbox.ModAPI;using System;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.Setup{public class TerminalChainedDelegate{public static Func<IMyTerminalBlock,bool>Create(Func<IMyTerminalBlock,bool>originalFunc,Func<IMyTerminalBlock,bool>customFunc,bool checkOR=false){return new TerminalChainedDelegate(originalFunc,customFunc,checkOR).ResultFunc;}readonly Func<IMyTerminalBlock,bool>OriginalFunc;readonly Func<IMyTerminalBlock,bool>CustomFunc;readonly bool CheckOR;TerminalChainedDelegate(Func<IMyTerminalBlock,bool>originalFunc,Func<IMyTerminalBlock,bool>customFunc,bool checkOR){OriginalFunc=originalFunc;CustomFunc=customFunc;CheckOR=checkOR;}bool ResultFunc(IMyTerminalBlock block){if(block?.CubeGrid==null)return false;bool originalCondition=OriginalFunc==null?true:OriginalFunc.Invoke(block);bool customCondition=CustomFunc==null?true:CustomFunc.Invoke(block);if(CheckOR)return originalCondition||customCondition;else return originalCondition&&customCondition;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using System;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses{[ProtoContract]internal class n_MagazineUpdate:PacketBase{[ProtoMember(1)]internal long WeaponEntityId;[ProtoMember(2)]internal int MillisecondsFromMidnight;[ProtoMember(3)]internal int MagazinesLoaded;[ProtoMember(4)]internal short NextMuzzleIdx;public override void Received(ulong SenderSteamId){var weapon=WeaponManager.I.GetWeapon(WeaponEntityId);var magazine=weapon?.Magazines;if(magazine==null)return;float timeDelta=(float)((DateTime.UtcNow.TimeOfDay.TotalMilliseconds-MillisecondsFromMidnight)/1000);magazine.EmptyMagazines();magazine.MagazinesLoaded=MagazinesLoaded;magazine.UpdateReload(timeDelta);weapon.NextMuzzleIdx=NextMuzzleIdx;}}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using Heart_Module.Data.Scripts.HeartModule.Weapons.AiTargeting;using ProtoBuf;using Sandbox.ModAPI;using VRage.Game.ModAPI;using VRage.ModAPI;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses{[ProtoContract]internal class n_TargetingUpdate:PacketBase{[ProtoMember(1)]long EntityId;[ProtoMember(2)]long TargetEntityId;public override void Received(ulong SenderSteamId){IMyEntity thisEntity=MyAPIGateway.Entities.GetEntityById(EntityId);if(thisEntity==null)return;IMyEntity targetEntity=MyAPIGateway.Entities.GetEntityById(TargetEntityId);if(thisEntity is IMyCubeGrid){WeaponManagerAi.I.GetTargeting((IMyCubeGrid)thisEntity).SetPrimaryTarget((IMyCubeGrid)targetEntity);}else if(thisEntity is IMyConveyorSorter){SorterTurretLogic weapon=WeaponManager.I.GetWeapon(EntityId)as SorterTurretLogic;weapon?.SetTarget(targetEntity);}}}}﻿using Heart_Module.Data.Scripts.HeartModule.Network;using ProtoBuf;using Sandbox.ModAPI;using System.Collections.Generic;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses{[ProtoContract]public class n_TurretFacing:PacketBase{[ProtoMember(21)]long TurretId;[ProtoMember(22)]float Azimuth;[ProtoMember(23)]float Elevation;public n_TurretFacing(){}public n_TurretFacing(SorterTurretLogic turret){if(turret!=null&&turret.SorterWep!=null){TurretId=turret.SorterWep.EntityId;Azimuth=(float)turret.DesiredAzimuth;Elevation=(float)turret.DesiredElevation;}else{TurretId=0;Azimuth=0f;Elevation=0f;}}public override void Received(ulong SenderSteamId){if(!MyAPIGateway.Session.IsServer){SorterTurretLogic turretLogic=WeaponManager.I.GetWeapon(TurretId)as SorterTurretLogic;if(turretLogic!=null){turretLogic.SetFacing(Azimuth,Elevation);}}}}[ProtoContract]public class n_TurretFacingArray:PacketBase{[ProtoMember(21)]byte[][]Facings=new byte[0][];public n_TurretFacingArray(){}public n_TurretFacingArray(List<n_TurretFacing>facings){SerializeProjectiles(facings.ToArray());}public n_TurretFacingArray(n_TurretFacing[]facings){SerializeProjectiles(facings);}private void SerializeProjectiles(n_TurretFacing[]facings){Facings=new byte[facings.Length][];for(int i=0;i<Facings.Length;i++)Facings[i]=MyAPIGateway.Utilities.SerializeToBinary(facings[i]);}private n_TurretFacing[]DeSerializeProjectiles(){n_TurretFacing[]deSerialized=new n_TurretFacing[Facings.Length];for(int i=0;i<Facings.Length;i++)deSerialized[i]=MyAPIGateway.Utilities.SerializeFromBinary<n_TurretFacing>(Facings[i]);return deSerialized;}public override void Received(ulong SenderSteamId){if(MyAPIGateway.Session.IsServer)return;foreach(var projectile in DeSerializeProjectiles())projectile?.Received(SenderSteamId);}}}﻿using Heart_Module.Data.Scripts.HeartModule.Definitions.StandardClasses;using ProtoBuf;using Sandbox.Game.Entities;using System;namespace Heart_Module.Data.Scripts.HeartModule.Weapons.StandardClasses{[ProtoContract]public class WeaponDefinitionBase{public WeaponDefinitionBase(){}[ProtoMember(2)]public Targeting Targeting;[ProtoMember(3)]public Assignments Assignments;[ProtoMember(4)]public Hardpoint Hardpoint;[ProtoMember(5)]public Loading Loading;[ProtoMember(6)]public Audio Audio;[ProtoMember(7)]public Visuals Visuals;}[ProtoContract]public struct Targeting{[ProtoMember(1)]public float MaxTargetingRange;[ProtoMember(2)]public float MinTargetingRange;[ProtoMember(3)]public bool CanAutoShoot;[ProtoMember(4)]public IFF_Enum DefaultIFF;[ProtoMember(5)]public TargetType_Enum AllowedTargetTypes;[ProtoMember(6)]public float RetargetTime;[ProtoMember(7)]public float AimTolerance;}[ProtoContract]public struct Assignments{[ProtoMember(1)]public string BlockSubtype;[ProtoMember(2)]public string MuzzleSubpart;[ProtoMember(3)]public string ElevationSubpart;[ProtoMember(4)]public string AzimuthSubpart;[ProtoMember(5)]public float DurabilityModifier;[ProtoMember(6)]public string InventoryIconName;[ProtoMember(7)]public string[]Muzzles;public bool HasElevation=>!ElevationSubpart?.Equals("")??false;public bool HasAzimuth=>!AzimuthSubpart?.Equals("")??false;public bool HasMuzzleSubpart=>!MuzzleSubpart?.Equals("")??false;public bool IsTurret=>HasAzimuth&&HasElevation;}[ProtoContract]public struct Hardpoint{[ProtoMember(1)]public float AzimuthRate;[ProtoMember(2)]public float ElevationRate;[ProtoMember(3)]public float MaxAzimuth;[ProtoMember(4)]public float MinAzimuth;[ProtoMember(5)]public float MaxElevation;[ProtoMember(6)]public float MinElevation;[ProtoMember(7)]public float IdlePower;[ProtoMember(8)]public float ShotInaccuracy;[ProtoMember(9)]public bool LineOfSightCheck;[ProtoMember(10)]public bool ControlRotation;[ProtoMember(11)]public float HomeAzimuth;[ProtoMember(12)]public float HomeElevation;public bool CanRotateFull=>MaxAzimuth>=-(float)Math.PI&&MinAzimuth<=-(float)Math.PI;public bool CanElevateFull=>MaxElevation>=-(float)Math.PI&&MinElevation<=-(float)Math.PI;}[ProtoContract]public struct Loading{[ProtoMember(10)]public string[]Ammos;[ProtoMember(1)]public int RateOfFire;[ProtoMember(2)]public int BarrelsPerShot;[ProtoMember(3)]public int ProjectilesPerBarrel;[ProtoMember(4)]public float ReloadTime;[ProtoMember(6)]public int MagazinesToLoad;[ProtoMember(7)]public int MaxReloads;[ProtoMember(8)]public float DelayUntilFire;[ProtoMember(9)]public Resource[]Resources;[ProtoMember(11)]public float RateOfFireVariance;[ProtoContract]public struct Resource{[ProtoMember(1)]public string ResourceType;[ProtoMember(2)]public float ResourceGeneration;[ProtoMember(3)]public float ResourceStorage;[ProtoMember(4)]public float ResourcePerShot;[ProtoMember(5)]public float MinResourceBeforeFire;}}[ProtoContract]public struct Audio{[ProtoMember(1)]public string PreShootSound;[ProtoMember(2)]public string ShootSound;[ProtoMember(3)]public string ReloadSound;[ProtoMember(4)]public string RotationSound;public MySoundPair RotationSoundPair=>new MySoundPair(RotationSound);}[ProtoContract]public struct Visuals{[ProtoMember(1)]public string ShootParticle;[ProtoMember(2)]public bool ContinuousShootParticle;[ProtoMember(3)]public string ReloadParticle;public bool HasShootParticle=>!ShootParticle?.Equals("")??false;public bool HasReloadParticle=>!ReloadParticle?.Equals("")??false;}}
